
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `nasso_logs` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model nasso_logs
 * 
 */
export type nasso_logsModel = runtime.Types.Result.DefaultSelection<Prisma.$nasso_logsPayload>

export type AggregateNasso_logs = {
  _count: Nasso_logsCountAggregateOutputType | null
  _avg: Nasso_logsAvgAggregateOutputType | null
  _sum: Nasso_logsSumAggregateOutputType | null
  _min: Nasso_logsMinAggregateOutputType | null
  _max: Nasso_logsMaxAggregateOutputType | null
}

export type Nasso_logsAvgAggregateOutputType = {
  log_Id: number | null
  log_amount: number | null
}

export type Nasso_logsSumAggregateOutputType = {
  log_Id: number | null
  log_amount: number | null
}

export type Nasso_logsMinAggregateOutputType = {
  log_Id: number | null
  log_amount: number | null
  log_op: string | null
  log_date: string | null
  log_usr: string | null
}

export type Nasso_logsMaxAggregateOutputType = {
  log_Id: number | null
  log_amount: number | null
  log_op: string | null
  log_date: string | null
  log_usr: string | null
}

export type Nasso_logsCountAggregateOutputType = {
  log_Id: number
  log_amount: number
  log_op: number
  log_date: number
  log_usr: number
  _all: number
}


export type Nasso_logsAvgAggregateInputType = {
  log_Id?: true
  log_amount?: true
}

export type Nasso_logsSumAggregateInputType = {
  log_Id?: true
  log_amount?: true
}

export type Nasso_logsMinAggregateInputType = {
  log_Id?: true
  log_amount?: true
  log_op?: true
  log_date?: true
  log_usr?: true
}

export type Nasso_logsMaxAggregateInputType = {
  log_Id?: true
  log_amount?: true
  log_op?: true
  log_date?: true
  log_usr?: true
}

export type Nasso_logsCountAggregateInputType = {
  log_Id?: true
  log_amount?: true
  log_op?: true
  log_date?: true
  log_usr?: true
  _all?: true
}

export type Nasso_logsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_logs to aggregate.
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_logs to fetch.
   */
  orderBy?: Prisma.nasso_logsOrderByWithRelationInput | Prisma.nasso_logsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.nasso_logsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned nasso_logs
  **/
  _count?: true | Nasso_logsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Nasso_logsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Nasso_logsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Nasso_logsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Nasso_logsMaxAggregateInputType
}

export type GetNasso_logsAggregateType<T extends Nasso_logsAggregateArgs> = {
      [P in keyof T & keyof AggregateNasso_logs]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNasso_logs[P]>
    : Prisma.GetScalarType<T[P], AggregateNasso_logs[P]>
}




export type nasso_logsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.nasso_logsWhereInput
  orderBy?: Prisma.nasso_logsOrderByWithAggregationInput | Prisma.nasso_logsOrderByWithAggregationInput[]
  by: Prisma.Nasso_logsScalarFieldEnum[] | Prisma.Nasso_logsScalarFieldEnum
  having?: Prisma.nasso_logsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Nasso_logsCountAggregateInputType | true
  _avg?: Nasso_logsAvgAggregateInputType
  _sum?: Nasso_logsSumAggregateInputType
  _min?: Nasso_logsMinAggregateInputType
  _max?: Nasso_logsMaxAggregateInputType
}

export type Nasso_logsGroupByOutputType = {
  log_Id: number
  log_amount: number
  log_op: string
  log_date: string
  log_usr: string
  _count: Nasso_logsCountAggregateOutputType | null
  _avg: Nasso_logsAvgAggregateOutputType | null
  _sum: Nasso_logsSumAggregateOutputType | null
  _min: Nasso_logsMinAggregateOutputType | null
  _max: Nasso_logsMaxAggregateOutputType | null
}

type GetNasso_logsGroupByPayload<T extends nasso_logsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Nasso_logsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Nasso_logsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Nasso_logsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Nasso_logsGroupByOutputType[P]>
      }
    >
  >



export type nasso_logsWhereInput = {
  AND?: Prisma.nasso_logsWhereInput | Prisma.nasso_logsWhereInput[]
  OR?: Prisma.nasso_logsWhereInput[]
  NOT?: Prisma.nasso_logsWhereInput | Prisma.nasso_logsWhereInput[]
  log_Id?: Prisma.IntFilter<"nasso_logs"> | number
  log_amount?: Prisma.FloatFilter<"nasso_logs"> | number
  log_op?: Prisma.StringFilter<"nasso_logs"> | string
  log_date?: Prisma.StringFilter<"nasso_logs"> | string
  log_usr?: Prisma.StringFilter<"nasso_logs"> | string
}

export type nasso_logsOrderByWithRelationInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
  log_op?: Prisma.SortOrder
  log_date?: Prisma.SortOrder
  log_usr?: Prisma.SortOrder
  _relevance?: Prisma.nasso_logsOrderByRelevanceInput
}

export type nasso_logsWhereUniqueInput = Prisma.AtLeast<{
  log_Id?: number
  AND?: Prisma.nasso_logsWhereInput | Prisma.nasso_logsWhereInput[]
  OR?: Prisma.nasso_logsWhereInput[]
  NOT?: Prisma.nasso_logsWhereInput | Prisma.nasso_logsWhereInput[]
  log_amount?: Prisma.FloatFilter<"nasso_logs"> | number
  log_op?: Prisma.StringFilter<"nasso_logs"> | string
  log_date?: Prisma.StringFilter<"nasso_logs"> | string
  log_usr?: Prisma.StringFilter<"nasso_logs"> | string
}, "log_Id">

export type nasso_logsOrderByWithAggregationInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
  log_op?: Prisma.SortOrder
  log_date?: Prisma.SortOrder
  log_usr?: Prisma.SortOrder
  _count?: Prisma.nasso_logsCountOrderByAggregateInput
  _avg?: Prisma.nasso_logsAvgOrderByAggregateInput
  _max?: Prisma.nasso_logsMaxOrderByAggregateInput
  _min?: Prisma.nasso_logsMinOrderByAggregateInput
  _sum?: Prisma.nasso_logsSumOrderByAggregateInput
}

export type nasso_logsScalarWhereWithAggregatesInput = {
  AND?: Prisma.nasso_logsScalarWhereWithAggregatesInput | Prisma.nasso_logsScalarWhereWithAggregatesInput[]
  OR?: Prisma.nasso_logsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.nasso_logsScalarWhereWithAggregatesInput | Prisma.nasso_logsScalarWhereWithAggregatesInput[]
  log_Id?: Prisma.IntWithAggregatesFilter<"nasso_logs"> | number
  log_amount?: Prisma.FloatWithAggregatesFilter<"nasso_logs"> | number
  log_op?: Prisma.StringWithAggregatesFilter<"nasso_logs"> | string
  log_date?: Prisma.StringWithAggregatesFilter<"nasso_logs"> | string
  log_usr?: Prisma.StringWithAggregatesFilter<"nasso_logs"> | string
}

export type nasso_logsCreateInput = {
  log_amount?: number
  log_op: string
  log_date: string
  log_usr: string
}

export type nasso_logsUncheckedCreateInput = {
  log_Id?: number
  log_amount?: number
  log_op: string
  log_date: string
  log_usr: string
}

export type nasso_logsUpdateInput = {
  log_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  log_op?: Prisma.StringFieldUpdateOperationsInput | string
  log_date?: Prisma.StringFieldUpdateOperationsInput | string
  log_usr?: Prisma.StringFieldUpdateOperationsInput | string
}

export type nasso_logsUncheckedUpdateInput = {
  log_Id?: Prisma.IntFieldUpdateOperationsInput | number
  log_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  log_op?: Prisma.StringFieldUpdateOperationsInput | string
  log_date?: Prisma.StringFieldUpdateOperationsInput | string
  log_usr?: Prisma.StringFieldUpdateOperationsInput | string
}

export type nasso_logsCreateManyInput = {
  log_Id?: number
  log_amount?: number
  log_op: string
  log_date: string
  log_usr: string
}

export type nasso_logsUpdateManyMutationInput = {
  log_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  log_op?: Prisma.StringFieldUpdateOperationsInput | string
  log_date?: Prisma.StringFieldUpdateOperationsInput | string
  log_usr?: Prisma.StringFieldUpdateOperationsInput | string
}

export type nasso_logsUncheckedUpdateManyInput = {
  log_Id?: Prisma.IntFieldUpdateOperationsInput | number
  log_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  log_op?: Prisma.StringFieldUpdateOperationsInput | string
  log_date?: Prisma.StringFieldUpdateOperationsInput | string
  log_usr?: Prisma.StringFieldUpdateOperationsInput | string
}

export type nasso_logsOrderByRelevanceInput = {
  fields: Prisma.nasso_logsOrderByRelevanceFieldEnum | Prisma.nasso_logsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type nasso_logsCountOrderByAggregateInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
  log_op?: Prisma.SortOrder
  log_date?: Prisma.SortOrder
  log_usr?: Prisma.SortOrder
}

export type nasso_logsAvgOrderByAggregateInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
}

export type nasso_logsMaxOrderByAggregateInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
  log_op?: Prisma.SortOrder
  log_date?: Prisma.SortOrder
  log_usr?: Prisma.SortOrder
}

export type nasso_logsMinOrderByAggregateInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
  log_op?: Prisma.SortOrder
  log_date?: Prisma.SortOrder
  log_usr?: Prisma.SortOrder
}

export type nasso_logsSumOrderByAggregateInput = {
  log_Id?: Prisma.SortOrder
  log_amount?: Prisma.SortOrder
}



export type nasso_logsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  log_Id?: boolean
  log_amount?: boolean
  log_op?: boolean
  log_date?: boolean
  log_usr?: boolean
}, ExtArgs["result"]["nasso_logs"]>



export type nasso_logsSelectScalar = {
  log_Id?: boolean
  log_amount?: boolean
  log_op?: boolean
  log_date?: boolean
  log_usr?: boolean
}

export type nasso_logsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"log_Id" | "log_amount" | "log_op" | "log_date" | "log_usr", ExtArgs["result"]["nasso_logs"]>

export type $nasso_logsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "nasso_logs"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    log_Id: number
    log_amount: number
    log_op: string
    log_date: string
    log_usr: string
  }, ExtArgs["result"]["nasso_logs"]>
  composites: {}
}

export type nasso_logsGetPayload<S extends boolean | null | undefined | nasso_logsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload, S>

export type nasso_logsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<nasso_logsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Nasso_logsCountAggregateInputType | true
  }

export interface nasso_logsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nasso_logs'], meta: { name: 'nasso_logs' } }
  /**
   * Find zero or one Nasso_logs that matches the filter.
   * @param {nasso_logsFindUniqueArgs} args - Arguments to find a Nasso_logs
   * @example
   * // Get one Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends nasso_logsFindUniqueArgs>(args: Prisma.SelectSubset<T, nasso_logsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Nasso_logs that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {nasso_logsFindUniqueOrThrowArgs} args - Arguments to find a Nasso_logs
   * @example
   * // Get one Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends nasso_logsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, nasso_logsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_logs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsFindFirstArgs} args - Arguments to find a Nasso_logs
   * @example
   * // Get one Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends nasso_logsFindFirstArgs>(args?: Prisma.SelectSubset<T, nasso_logsFindFirstArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_logs that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsFindFirstOrThrowArgs} args - Arguments to find a Nasso_logs
   * @example
   * // Get one Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends nasso_logsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, nasso_logsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Nasso_logs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findMany()
   * 
   * // Get first 10 Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.findMany({ take: 10 })
   * 
   * // Only select the `log_Id`
   * const nasso_logsWithLog_IdOnly = await prisma.nasso_logs.findMany({ select: { log_Id: true } })
   * 
   */
  findMany<T extends nasso_logsFindManyArgs>(args?: Prisma.SelectSubset<T, nasso_logsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Nasso_logs.
   * @param {nasso_logsCreateArgs} args - Arguments to create a Nasso_logs.
   * @example
   * // Create one Nasso_logs
   * const Nasso_logs = await prisma.nasso_logs.create({
   *   data: {
   *     // ... data to create a Nasso_logs
   *   }
   * })
   * 
   */
  create<T extends nasso_logsCreateArgs>(args: Prisma.SelectSubset<T, nasso_logsCreateArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Nasso_logs.
   * @param {nasso_logsCreateManyArgs} args - Arguments to create many Nasso_logs.
   * @example
   * // Create many Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends nasso_logsCreateManyArgs>(args?: Prisma.SelectSubset<T, nasso_logsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Nasso_logs.
   * @param {nasso_logsDeleteArgs} args - Arguments to delete one Nasso_logs.
   * @example
   * // Delete one Nasso_logs
   * const Nasso_logs = await prisma.nasso_logs.delete({
   *   where: {
   *     // ... filter to delete one Nasso_logs
   *   }
   * })
   * 
   */
  delete<T extends nasso_logsDeleteArgs>(args: Prisma.SelectSubset<T, nasso_logsDeleteArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Nasso_logs.
   * @param {nasso_logsUpdateArgs} args - Arguments to update one Nasso_logs.
   * @example
   * // Update one Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends nasso_logsUpdateArgs>(args: Prisma.SelectSubset<T, nasso_logsUpdateArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Nasso_logs.
   * @param {nasso_logsDeleteManyArgs} args - Arguments to filter Nasso_logs to delete.
   * @example
   * // Delete a few Nasso_logs
   * const { count } = await prisma.nasso_logs.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends nasso_logsDeleteManyArgs>(args?: Prisma.SelectSubset<T, nasso_logsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Nasso_logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends nasso_logsUpdateManyArgs>(args: Prisma.SelectSubset<T, nasso_logsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Nasso_logs.
   * @param {nasso_logsUpsertArgs} args - Arguments to update or create a Nasso_logs.
   * @example
   * // Update or create a Nasso_logs
   * const nasso_logs = await prisma.nasso_logs.upsert({
   *   create: {
   *     // ... data to create a Nasso_logs
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Nasso_logs we want to update
   *   }
   * })
   */
  upsert<T extends nasso_logsUpsertArgs>(args: Prisma.SelectSubset<T, nasso_logsUpsertArgs<ExtArgs>>): Prisma.Prisma__nasso_logsClient<runtime.Types.Result.GetResult<Prisma.$nasso_logsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Nasso_logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsCountArgs} args - Arguments to filter Nasso_logs to count.
   * @example
   * // Count the number of Nasso_logs
   * const count = await prisma.nasso_logs.count({
   *   where: {
   *     // ... the filter for the Nasso_logs we want to count
   *   }
   * })
  **/
  count<T extends nasso_logsCountArgs>(
    args?: Prisma.Subset<T, nasso_logsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Nasso_logsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Nasso_logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Nasso_logsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Nasso_logsAggregateArgs>(args: Prisma.Subset<T, Nasso_logsAggregateArgs>): Prisma.PrismaPromise<GetNasso_logsAggregateType<T>>

  /**
   * Group by Nasso_logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_logsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends nasso_logsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: nasso_logsGroupByArgs['orderBy'] }
      : { orderBy?: nasso_logsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, nasso_logsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNasso_logsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the nasso_logs model
 */
readonly fields: nasso_logsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for nasso_logs.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__nasso_logsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the nasso_logs model
 */
export interface nasso_logsFieldRefs {
  readonly log_Id: Prisma.FieldRef<"nasso_logs", 'Int'>
  readonly log_amount: Prisma.FieldRef<"nasso_logs", 'Float'>
  readonly log_op: Prisma.FieldRef<"nasso_logs", 'String'>
  readonly log_date: Prisma.FieldRef<"nasso_logs", 'String'>
  readonly log_usr: Prisma.FieldRef<"nasso_logs", 'String'>
}
    

// Custom InputTypes
/**
 * nasso_logs findUnique
 */
export type nasso_logsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter, which nasso_logs to fetch.
   */
  where: Prisma.nasso_logsWhereUniqueInput
}

/**
 * nasso_logs findUniqueOrThrow
 */
export type nasso_logsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter, which nasso_logs to fetch.
   */
  where: Prisma.nasso_logsWhereUniqueInput
}

/**
 * nasso_logs findFirst
 */
export type nasso_logsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter, which nasso_logs to fetch.
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_logs to fetch.
   */
  orderBy?: Prisma.nasso_logsOrderByWithRelationInput | Prisma.nasso_logsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_logs.
   */
  cursor?: Prisma.nasso_logsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_logs.
   */
  distinct?: Prisma.Nasso_logsScalarFieldEnum | Prisma.Nasso_logsScalarFieldEnum[]
}

/**
 * nasso_logs findFirstOrThrow
 */
export type nasso_logsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter, which nasso_logs to fetch.
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_logs to fetch.
   */
  orderBy?: Prisma.nasso_logsOrderByWithRelationInput | Prisma.nasso_logsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_logs.
   */
  cursor?: Prisma.nasso_logsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_logs.
   */
  distinct?: Prisma.Nasso_logsScalarFieldEnum | Prisma.Nasso_logsScalarFieldEnum[]
}

/**
 * nasso_logs findMany
 */
export type nasso_logsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter, which nasso_logs to fetch.
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_logs to fetch.
   */
  orderBy?: Prisma.nasso_logsOrderByWithRelationInput | Prisma.nasso_logsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing nasso_logs.
   */
  cursor?: Prisma.nasso_logsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_logs.
   */
  skip?: number
  distinct?: Prisma.Nasso_logsScalarFieldEnum | Prisma.Nasso_logsScalarFieldEnum[]
}

/**
 * nasso_logs create
 */
export type nasso_logsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * The data needed to create a nasso_logs.
   */
  data: Prisma.XOR<Prisma.nasso_logsCreateInput, Prisma.nasso_logsUncheckedCreateInput>
}

/**
 * nasso_logs createMany
 */
export type nasso_logsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many nasso_logs.
   */
  data: Prisma.nasso_logsCreateManyInput | Prisma.nasso_logsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * nasso_logs update
 */
export type nasso_logsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * The data needed to update a nasso_logs.
   */
  data: Prisma.XOR<Prisma.nasso_logsUpdateInput, Prisma.nasso_logsUncheckedUpdateInput>
  /**
   * Choose, which nasso_logs to update.
   */
  where: Prisma.nasso_logsWhereUniqueInput
}

/**
 * nasso_logs updateMany
 */
export type nasso_logsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update nasso_logs.
   */
  data: Prisma.XOR<Prisma.nasso_logsUpdateManyMutationInput, Prisma.nasso_logsUncheckedUpdateManyInput>
  /**
   * Filter which nasso_logs to update
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * Limit how many nasso_logs to update.
   */
  limit?: number
}

/**
 * nasso_logs upsert
 */
export type nasso_logsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * The filter to search for the nasso_logs to update in case it exists.
   */
  where: Prisma.nasso_logsWhereUniqueInput
  /**
   * In case the nasso_logs found by the `where` argument doesn't exist, create a new nasso_logs with this data.
   */
  create: Prisma.XOR<Prisma.nasso_logsCreateInput, Prisma.nasso_logsUncheckedCreateInput>
  /**
   * In case the nasso_logs was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.nasso_logsUpdateInput, Prisma.nasso_logsUncheckedUpdateInput>
}

/**
 * nasso_logs delete
 */
export type nasso_logsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
  /**
   * Filter which nasso_logs to delete.
   */
  where: Prisma.nasso_logsWhereUniqueInput
}

/**
 * nasso_logs deleteMany
 */
export type nasso_logsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_logs to delete
   */
  where?: Prisma.nasso_logsWhereInput
  /**
   * Limit how many nasso_logs to delete.
   */
  limit?: number
}

/**
 * nasso_logs without action
 */
export type nasso_logsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_logs
   */
  select?: Prisma.nasso_logsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_logs
   */
  omit?: Prisma.nasso_logsOmit<ExtArgs> | null
}
