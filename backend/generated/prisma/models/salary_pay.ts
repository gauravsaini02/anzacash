
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `salary_pay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model salary_pay
 * 
 */
export type salary_payModel = runtime.Types.Result.DefaultSelection<Prisma.$salary_payPayload>

export type AggregateSalary_pay = {
  _count: Salary_payCountAggregateOutputType | null
  _avg: Salary_payAvgAggregateOutputType | null
  _sum: Salary_paySumAggregateOutputType | null
  _min: Salary_payMinAggregateOutputType | null
  _max: Salary_payMaxAggregateOutputType | null
}

export type Salary_payAvgAggregateOutputType = {
  s_ID: number | null
  s_amount: number | null
}

export type Salary_paySumAggregateOutputType = {
  s_ID: number | null
  s_amount: number | null
}

export type Salary_payMinAggregateOutputType = {
  s_ID: number | null
  s_name: string | null
  s_amount: number | null
  s_date: string | null
  s_month: string | null
  s_year: string | null
  s_status: string | null
}

export type Salary_payMaxAggregateOutputType = {
  s_ID: number | null
  s_name: string | null
  s_amount: number | null
  s_date: string | null
  s_month: string | null
  s_year: string | null
  s_status: string | null
}

export type Salary_payCountAggregateOutputType = {
  s_ID: number
  s_name: number
  s_amount: number
  s_date: number
  s_month: number
  s_year: number
  s_status: number
  _all: number
}


export type Salary_payAvgAggregateInputType = {
  s_ID?: true
  s_amount?: true
}

export type Salary_paySumAggregateInputType = {
  s_ID?: true
  s_amount?: true
}

export type Salary_payMinAggregateInputType = {
  s_ID?: true
  s_name?: true
  s_amount?: true
  s_date?: true
  s_month?: true
  s_year?: true
  s_status?: true
}

export type Salary_payMaxAggregateInputType = {
  s_ID?: true
  s_name?: true
  s_amount?: true
  s_date?: true
  s_month?: true
  s_year?: true
  s_status?: true
}

export type Salary_payCountAggregateInputType = {
  s_ID?: true
  s_name?: true
  s_amount?: true
  s_date?: true
  s_month?: true
  s_year?: true
  s_status?: true
  _all?: true
}

export type Salary_payAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which salary_pay to aggregate.
   */
  where?: Prisma.salary_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salary_pays to fetch.
   */
  orderBy?: Prisma.salary_payOrderByWithRelationInput | Prisma.salary_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.salary_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salary_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salary_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned salary_pays
  **/
  _count?: true | Salary_payCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Salary_payAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Salary_paySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Salary_payMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Salary_payMaxAggregateInputType
}

export type GetSalary_payAggregateType<T extends Salary_payAggregateArgs> = {
      [P in keyof T & keyof AggregateSalary_pay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSalary_pay[P]>
    : Prisma.GetScalarType<T[P], AggregateSalary_pay[P]>
}




export type salary_payGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.salary_payWhereInput
  orderBy?: Prisma.salary_payOrderByWithAggregationInput | Prisma.salary_payOrderByWithAggregationInput[]
  by: Prisma.Salary_payScalarFieldEnum[] | Prisma.Salary_payScalarFieldEnum
  having?: Prisma.salary_payScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Salary_payCountAggregateInputType | true
  _avg?: Salary_payAvgAggregateInputType
  _sum?: Salary_paySumAggregateInputType
  _min?: Salary_payMinAggregateInputType
  _max?: Salary_payMaxAggregateInputType
}

export type Salary_payGroupByOutputType = {
  s_ID: number
  s_name: string | null
  s_amount: number
  s_date: string
  s_month: string
  s_year: string
  s_status: string | null
  _count: Salary_payCountAggregateOutputType | null
  _avg: Salary_payAvgAggregateOutputType | null
  _sum: Salary_paySumAggregateOutputType | null
  _min: Salary_payMinAggregateOutputType | null
  _max: Salary_payMaxAggregateOutputType | null
}

type GetSalary_payGroupByPayload<T extends salary_payGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Salary_payGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Salary_payGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Salary_payGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Salary_payGroupByOutputType[P]>
      }
    >
  >



export type salary_payWhereInput = {
  AND?: Prisma.salary_payWhereInput | Prisma.salary_payWhereInput[]
  OR?: Prisma.salary_payWhereInput[]
  NOT?: Prisma.salary_payWhereInput | Prisma.salary_payWhereInput[]
  s_ID?: Prisma.IntFilter<"salary_pay"> | number
  s_name?: Prisma.StringNullableFilter<"salary_pay"> | string | null
  s_amount?: Prisma.FloatFilter<"salary_pay"> | number
  s_date?: Prisma.StringFilter<"salary_pay"> | string
  s_month?: Prisma.StringFilter<"salary_pay"> | string
  s_year?: Prisma.StringFilter<"salary_pay"> | string
  s_status?: Prisma.StringNullableFilter<"salary_pay"> | string | null
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersNullableScalarRelationFilter, Prisma.nasso_usersWhereInput> | null
}

export type salary_payOrderByWithRelationInput = {
  s_ID?: Prisma.SortOrder
  s_name?: Prisma.SortOrderInput | Prisma.SortOrder
  s_amount?: Prisma.SortOrder
  s_date?: Prisma.SortOrder
  s_month?: Prisma.SortOrder
  s_year?: Prisma.SortOrder
  s_status?: Prisma.SortOrderInput | Prisma.SortOrder
  nasso_users?: Prisma.nasso_usersOrderByWithRelationInput
  _relevance?: Prisma.salary_payOrderByRelevanceInput
}

export type salary_payWhereUniqueInput = Prisma.AtLeast<{
  s_ID?: number
  AND?: Prisma.salary_payWhereInput | Prisma.salary_payWhereInput[]
  OR?: Prisma.salary_payWhereInput[]
  NOT?: Prisma.salary_payWhereInput | Prisma.salary_payWhereInput[]
  s_name?: Prisma.StringNullableFilter<"salary_pay"> | string | null
  s_amount?: Prisma.FloatFilter<"salary_pay"> | number
  s_date?: Prisma.StringFilter<"salary_pay"> | string
  s_month?: Prisma.StringFilter<"salary_pay"> | string
  s_year?: Prisma.StringFilter<"salary_pay"> | string
  s_status?: Prisma.StringNullableFilter<"salary_pay"> | string | null
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersNullableScalarRelationFilter, Prisma.nasso_usersWhereInput> | null
}, "s_ID">

export type salary_payOrderByWithAggregationInput = {
  s_ID?: Prisma.SortOrder
  s_name?: Prisma.SortOrderInput | Prisma.SortOrder
  s_amount?: Prisma.SortOrder
  s_date?: Prisma.SortOrder
  s_month?: Prisma.SortOrder
  s_year?: Prisma.SortOrder
  s_status?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.salary_payCountOrderByAggregateInput
  _avg?: Prisma.salary_payAvgOrderByAggregateInput
  _max?: Prisma.salary_payMaxOrderByAggregateInput
  _min?: Prisma.salary_payMinOrderByAggregateInput
  _sum?: Prisma.salary_paySumOrderByAggregateInput
}

export type salary_payScalarWhereWithAggregatesInput = {
  AND?: Prisma.salary_payScalarWhereWithAggregatesInput | Prisma.salary_payScalarWhereWithAggregatesInput[]
  OR?: Prisma.salary_payScalarWhereWithAggregatesInput[]
  NOT?: Prisma.salary_payScalarWhereWithAggregatesInput | Prisma.salary_payScalarWhereWithAggregatesInput[]
  s_ID?: Prisma.IntWithAggregatesFilter<"salary_pay"> | number
  s_name?: Prisma.StringNullableWithAggregatesFilter<"salary_pay"> | string | null
  s_amount?: Prisma.FloatWithAggregatesFilter<"salary_pay"> | number
  s_date?: Prisma.StringWithAggregatesFilter<"salary_pay"> | string
  s_month?: Prisma.StringWithAggregatesFilter<"salary_pay"> | string
  s_year?: Prisma.StringWithAggregatesFilter<"salary_pay"> | string
  s_status?: Prisma.StringNullableWithAggregatesFilter<"salary_pay"> | string | null
}

export type salary_payCreateInput = {
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
  nasso_users?: Prisma.nasso_usersCreateNestedOneWithoutSalary_payInput
}

export type salary_payUncheckedCreateInput = {
  s_ID?: number
  s_name?: string | null
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
}

export type salary_payUpdateInput = {
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nasso_users?: Prisma.nasso_usersUpdateOneWithoutSalary_payNestedInput
}

export type salary_payUncheckedUpdateInput = {
  s_ID?: Prisma.IntFieldUpdateOperationsInput | number
  s_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salary_payCreateManyInput = {
  s_ID?: number
  s_name?: string | null
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
}

export type salary_payUpdateManyMutationInput = {
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salary_payUncheckedUpdateManyInput = {
  s_ID?: Prisma.IntFieldUpdateOperationsInput | number
  s_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type Salary_payListRelationFilter = {
  every?: Prisma.salary_payWhereInput
  some?: Prisma.salary_payWhereInput
  none?: Prisma.salary_payWhereInput
}

export type salary_payOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type salary_payOrderByRelevanceInput = {
  fields: Prisma.salary_payOrderByRelevanceFieldEnum | Prisma.salary_payOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type salary_payCountOrderByAggregateInput = {
  s_ID?: Prisma.SortOrder
  s_name?: Prisma.SortOrder
  s_amount?: Prisma.SortOrder
  s_date?: Prisma.SortOrder
  s_month?: Prisma.SortOrder
  s_year?: Prisma.SortOrder
  s_status?: Prisma.SortOrder
}

export type salary_payAvgOrderByAggregateInput = {
  s_ID?: Prisma.SortOrder
  s_amount?: Prisma.SortOrder
}

export type salary_payMaxOrderByAggregateInput = {
  s_ID?: Prisma.SortOrder
  s_name?: Prisma.SortOrder
  s_amount?: Prisma.SortOrder
  s_date?: Prisma.SortOrder
  s_month?: Prisma.SortOrder
  s_year?: Prisma.SortOrder
  s_status?: Prisma.SortOrder
}

export type salary_payMinOrderByAggregateInput = {
  s_ID?: Prisma.SortOrder
  s_name?: Prisma.SortOrder
  s_amount?: Prisma.SortOrder
  s_date?: Prisma.SortOrder
  s_month?: Prisma.SortOrder
  s_year?: Prisma.SortOrder
  s_status?: Prisma.SortOrder
}

export type salary_paySumOrderByAggregateInput = {
  s_ID?: Prisma.SortOrder
  s_amount?: Prisma.SortOrder
}

export type salary_payCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput> | Prisma.salary_payCreateWithoutNasso_usersInput[] | Prisma.salary_payUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.salary_payCreateOrConnectWithoutNasso_usersInput | Prisma.salary_payCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.salary_payCreateManyNasso_usersInputEnvelope
  connect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
}

export type salary_payUncheckedCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput> | Prisma.salary_payCreateWithoutNasso_usersInput[] | Prisma.salary_payUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.salary_payCreateOrConnectWithoutNasso_usersInput | Prisma.salary_payCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.salary_payCreateManyNasso_usersInputEnvelope
  connect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
}

export type salary_payUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput> | Prisma.salary_payCreateWithoutNasso_usersInput[] | Prisma.salary_payUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.salary_payCreateOrConnectWithoutNasso_usersInput | Prisma.salary_payCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.salary_payUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.salary_payUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.salary_payCreateManyNasso_usersInputEnvelope
  set?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  disconnect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  delete?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  connect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  update?: Prisma.salary_payUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.salary_payUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.salary_payUpdateManyWithWhereWithoutNasso_usersInput | Prisma.salary_payUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.salary_payScalarWhereInput | Prisma.salary_payScalarWhereInput[]
}

export type salary_payUncheckedUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput> | Prisma.salary_payCreateWithoutNasso_usersInput[] | Prisma.salary_payUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.salary_payCreateOrConnectWithoutNasso_usersInput | Prisma.salary_payCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.salary_payUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.salary_payUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.salary_payCreateManyNasso_usersInputEnvelope
  set?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  disconnect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  delete?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  connect?: Prisma.salary_payWhereUniqueInput | Prisma.salary_payWhereUniqueInput[]
  update?: Prisma.salary_payUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.salary_payUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.salary_payUpdateManyWithWhereWithoutNasso_usersInput | Prisma.salary_payUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.salary_payScalarWhereInput | Prisma.salary_payScalarWhereInput[]
}

export type salary_payCreateWithoutNasso_usersInput = {
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
}

export type salary_payUncheckedCreateWithoutNasso_usersInput = {
  s_ID?: number
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
}

export type salary_payCreateOrConnectWithoutNasso_usersInput = {
  where: Prisma.salary_payWhereUniqueInput
  create: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput>
}

export type salary_payCreateManyNasso_usersInputEnvelope = {
  data: Prisma.salary_payCreateManyNasso_usersInput | Prisma.salary_payCreateManyNasso_usersInput[]
  skipDuplicates?: boolean
}

export type salary_payUpsertWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.salary_payWhereUniqueInput
  update: Prisma.XOR<Prisma.salary_payUpdateWithoutNasso_usersInput, Prisma.salary_payUncheckedUpdateWithoutNasso_usersInput>
  create: Prisma.XOR<Prisma.salary_payCreateWithoutNasso_usersInput, Prisma.salary_payUncheckedCreateWithoutNasso_usersInput>
}

export type salary_payUpdateWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.salary_payWhereUniqueInput
  data: Prisma.XOR<Prisma.salary_payUpdateWithoutNasso_usersInput, Prisma.salary_payUncheckedUpdateWithoutNasso_usersInput>
}

export type salary_payUpdateManyWithWhereWithoutNasso_usersInput = {
  where: Prisma.salary_payScalarWhereInput
  data: Prisma.XOR<Prisma.salary_payUpdateManyMutationInput, Prisma.salary_payUncheckedUpdateManyWithoutNasso_usersInput>
}

export type salary_payScalarWhereInput = {
  AND?: Prisma.salary_payScalarWhereInput | Prisma.salary_payScalarWhereInput[]
  OR?: Prisma.salary_payScalarWhereInput[]
  NOT?: Prisma.salary_payScalarWhereInput | Prisma.salary_payScalarWhereInput[]
  s_ID?: Prisma.IntFilter<"salary_pay"> | number
  s_name?: Prisma.StringNullableFilter<"salary_pay"> | string | null
  s_amount?: Prisma.FloatFilter<"salary_pay"> | number
  s_date?: Prisma.StringFilter<"salary_pay"> | string
  s_month?: Prisma.StringFilter<"salary_pay"> | string
  s_year?: Prisma.StringFilter<"salary_pay"> | string
  s_status?: Prisma.StringNullableFilter<"salary_pay"> | string | null
}

export type salary_payCreateManyNasso_usersInput = {
  s_ID?: number
  s_amount?: number
  s_date: string
  s_month: string
  s_year: string
  s_status?: string | null
}

export type salary_payUpdateWithoutNasso_usersInput = {
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salary_payUncheckedUpdateWithoutNasso_usersInput = {
  s_ID?: Prisma.IntFieldUpdateOperationsInput | number
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salary_payUncheckedUpdateManyWithoutNasso_usersInput = {
  s_ID?: Prisma.IntFieldUpdateOperationsInput | number
  s_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  s_date?: Prisma.StringFieldUpdateOperationsInput | string
  s_month?: Prisma.StringFieldUpdateOperationsInput | string
  s_year?: Prisma.StringFieldUpdateOperationsInput | string
  s_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type salary_paySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  s_ID?: boolean
  s_name?: boolean
  s_amount?: boolean
  s_date?: boolean
  s_month?: boolean
  s_year?: boolean
  s_status?: boolean
  nasso_users?: boolean | Prisma.salary_pay$nasso_usersArgs<ExtArgs>
}, ExtArgs["result"]["salary_pay"]>



export type salary_paySelectScalar = {
  s_ID?: boolean
  s_name?: boolean
  s_amount?: boolean
  s_date?: boolean
  s_month?: boolean
  s_year?: boolean
  s_status?: boolean
}

export type salary_payOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"s_ID" | "s_name" | "s_amount" | "s_date" | "s_month" | "s_year" | "s_status", ExtArgs["result"]["salary_pay"]>
export type salary_payInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  nasso_users?: boolean | Prisma.salary_pay$nasso_usersArgs<ExtArgs>
}

export type $salary_payPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "salary_pay"
  objects: {
    nasso_users: Prisma.$nasso_usersPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    s_ID: number
    s_name: string | null
    s_amount: number
    s_date: string
    s_month: string
    s_year: string
    s_status: string | null
  }, ExtArgs["result"]["salary_pay"]>
  composites: {}
}

export type salary_payGetPayload<S extends boolean | null | undefined | salary_payDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$salary_payPayload, S>

export type salary_payCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<salary_payFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Salary_payCountAggregateInputType | true
  }

export interface salary_payDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['salary_pay'], meta: { name: 'salary_pay' } }
  /**
   * Find zero or one Salary_pay that matches the filter.
   * @param {salary_payFindUniqueArgs} args - Arguments to find a Salary_pay
   * @example
   * // Get one Salary_pay
   * const salary_pay = await prisma.salary_pay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends salary_payFindUniqueArgs>(args: Prisma.SelectSubset<T, salary_payFindUniqueArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Salary_pay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {salary_payFindUniqueOrThrowArgs} args - Arguments to find a Salary_pay
   * @example
   * // Get one Salary_pay
   * const salary_pay = await prisma.salary_pay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends salary_payFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, salary_payFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Salary_pay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payFindFirstArgs} args - Arguments to find a Salary_pay
   * @example
   * // Get one Salary_pay
   * const salary_pay = await prisma.salary_pay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends salary_payFindFirstArgs>(args?: Prisma.SelectSubset<T, salary_payFindFirstArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Salary_pay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payFindFirstOrThrowArgs} args - Arguments to find a Salary_pay
   * @example
   * // Get one Salary_pay
   * const salary_pay = await prisma.salary_pay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends salary_payFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, salary_payFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Salary_pays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Salary_pays
   * const salary_pays = await prisma.salary_pay.findMany()
   * 
   * // Get first 10 Salary_pays
   * const salary_pays = await prisma.salary_pay.findMany({ take: 10 })
   * 
   * // Only select the `s_ID`
   * const salary_payWithS_IDOnly = await prisma.salary_pay.findMany({ select: { s_ID: true } })
   * 
   */
  findMany<T extends salary_payFindManyArgs>(args?: Prisma.SelectSubset<T, salary_payFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Salary_pay.
   * @param {salary_payCreateArgs} args - Arguments to create a Salary_pay.
   * @example
   * // Create one Salary_pay
   * const Salary_pay = await prisma.salary_pay.create({
   *   data: {
   *     // ... data to create a Salary_pay
   *   }
   * })
   * 
   */
  create<T extends salary_payCreateArgs>(args: Prisma.SelectSubset<T, salary_payCreateArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Salary_pays.
   * @param {salary_payCreateManyArgs} args - Arguments to create many Salary_pays.
   * @example
   * // Create many Salary_pays
   * const salary_pay = await prisma.salary_pay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends salary_payCreateManyArgs>(args?: Prisma.SelectSubset<T, salary_payCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Salary_pay.
   * @param {salary_payDeleteArgs} args - Arguments to delete one Salary_pay.
   * @example
   * // Delete one Salary_pay
   * const Salary_pay = await prisma.salary_pay.delete({
   *   where: {
   *     // ... filter to delete one Salary_pay
   *   }
   * })
   * 
   */
  delete<T extends salary_payDeleteArgs>(args: Prisma.SelectSubset<T, salary_payDeleteArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Salary_pay.
   * @param {salary_payUpdateArgs} args - Arguments to update one Salary_pay.
   * @example
   * // Update one Salary_pay
   * const salary_pay = await prisma.salary_pay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends salary_payUpdateArgs>(args: Prisma.SelectSubset<T, salary_payUpdateArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Salary_pays.
   * @param {salary_payDeleteManyArgs} args - Arguments to filter Salary_pays to delete.
   * @example
   * // Delete a few Salary_pays
   * const { count } = await prisma.salary_pay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends salary_payDeleteManyArgs>(args?: Prisma.SelectSubset<T, salary_payDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Salary_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Salary_pays
   * const salary_pay = await prisma.salary_pay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends salary_payUpdateManyArgs>(args: Prisma.SelectSubset<T, salary_payUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Salary_pay.
   * @param {salary_payUpsertArgs} args - Arguments to update or create a Salary_pay.
   * @example
   * // Update or create a Salary_pay
   * const salary_pay = await prisma.salary_pay.upsert({
   *   create: {
   *     // ... data to create a Salary_pay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Salary_pay we want to update
   *   }
   * })
   */
  upsert<T extends salary_payUpsertArgs>(args: Prisma.SelectSubset<T, salary_payUpsertArgs<ExtArgs>>): Prisma.Prisma__salary_payClient<runtime.Types.Result.GetResult<Prisma.$salary_payPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Salary_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payCountArgs} args - Arguments to filter Salary_pays to count.
   * @example
   * // Count the number of Salary_pays
   * const count = await prisma.salary_pay.count({
   *   where: {
   *     // ... the filter for the Salary_pays we want to count
   *   }
   * })
  **/
  count<T extends salary_payCountArgs>(
    args?: Prisma.Subset<T, salary_payCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Salary_payCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Salary_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Salary_payAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Salary_payAggregateArgs>(args: Prisma.Subset<T, Salary_payAggregateArgs>): Prisma.PrismaPromise<GetSalary_payAggregateType<T>>

  /**
   * Group by Salary_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salary_payGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends salary_payGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: salary_payGroupByArgs['orderBy'] }
      : { orderBy?: salary_payGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, salary_payGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalary_payGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the salary_pay model
 */
readonly fields: salary_payFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for salary_pay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__salary_payClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  nasso_users<T extends Prisma.salary_pay$nasso_usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.salary_pay$nasso_usersArgs<ExtArgs>>): Prisma.Prisma__nasso_usersClient<runtime.Types.Result.GetResult<Prisma.$nasso_usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the salary_pay model
 */
export interface salary_payFieldRefs {
  readonly s_ID: Prisma.FieldRef<"salary_pay", 'Int'>
  readonly s_name: Prisma.FieldRef<"salary_pay", 'String'>
  readonly s_amount: Prisma.FieldRef<"salary_pay", 'Float'>
  readonly s_date: Prisma.FieldRef<"salary_pay", 'String'>
  readonly s_month: Prisma.FieldRef<"salary_pay", 'String'>
  readonly s_year: Prisma.FieldRef<"salary_pay", 'String'>
  readonly s_status: Prisma.FieldRef<"salary_pay", 'String'>
}
    

// Custom InputTypes
/**
 * salary_pay findUnique
 */
export type salary_payFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter, which salary_pay to fetch.
   */
  where: Prisma.salary_payWhereUniqueInput
}

/**
 * salary_pay findUniqueOrThrow
 */
export type salary_payFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter, which salary_pay to fetch.
   */
  where: Prisma.salary_payWhereUniqueInput
}

/**
 * salary_pay findFirst
 */
export type salary_payFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter, which salary_pay to fetch.
   */
  where?: Prisma.salary_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salary_pays to fetch.
   */
  orderBy?: Prisma.salary_payOrderByWithRelationInput | Prisma.salary_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for salary_pays.
   */
  cursor?: Prisma.salary_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salary_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salary_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of salary_pays.
   */
  distinct?: Prisma.Salary_payScalarFieldEnum | Prisma.Salary_payScalarFieldEnum[]
}

/**
 * salary_pay findFirstOrThrow
 */
export type salary_payFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter, which salary_pay to fetch.
   */
  where?: Prisma.salary_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salary_pays to fetch.
   */
  orderBy?: Prisma.salary_payOrderByWithRelationInput | Prisma.salary_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for salary_pays.
   */
  cursor?: Prisma.salary_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salary_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salary_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of salary_pays.
   */
  distinct?: Prisma.Salary_payScalarFieldEnum | Prisma.Salary_payScalarFieldEnum[]
}

/**
 * salary_pay findMany
 */
export type salary_payFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter, which salary_pays to fetch.
   */
  where?: Prisma.salary_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salary_pays to fetch.
   */
  orderBy?: Prisma.salary_payOrderByWithRelationInput | Prisma.salary_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing salary_pays.
   */
  cursor?: Prisma.salary_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salary_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salary_pays.
   */
  skip?: number
  distinct?: Prisma.Salary_payScalarFieldEnum | Prisma.Salary_payScalarFieldEnum[]
}

/**
 * salary_pay create
 */
export type salary_payCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * The data needed to create a salary_pay.
   */
  data: Prisma.XOR<Prisma.salary_payCreateInput, Prisma.salary_payUncheckedCreateInput>
}

/**
 * salary_pay createMany
 */
export type salary_payCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many salary_pays.
   */
  data: Prisma.salary_payCreateManyInput | Prisma.salary_payCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * salary_pay update
 */
export type salary_payUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * The data needed to update a salary_pay.
   */
  data: Prisma.XOR<Prisma.salary_payUpdateInput, Prisma.salary_payUncheckedUpdateInput>
  /**
   * Choose, which salary_pay to update.
   */
  where: Prisma.salary_payWhereUniqueInput
}

/**
 * salary_pay updateMany
 */
export type salary_payUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update salary_pays.
   */
  data: Prisma.XOR<Prisma.salary_payUpdateManyMutationInput, Prisma.salary_payUncheckedUpdateManyInput>
  /**
   * Filter which salary_pays to update
   */
  where?: Prisma.salary_payWhereInput
  /**
   * Limit how many salary_pays to update.
   */
  limit?: number
}

/**
 * salary_pay upsert
 */
export type salary_payUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * The filter to search for the salary_pay to update in case it exists.
   */
  where: Prisma.salary_payWhereUniqueInput
  /**
   * In case the salary_pay found by the `where` argument doesn't exist, create a new salary_pay with this data.
   */
  create: Prisma.XOR<Prisma.salary_payCreateInput, Prisma.salary_payUncheckedCreateInput>
  /**
   * In case the salary_pay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.salary_payUpdateInput, Prisma.salary_payUncheckedUpdateInput>
}

/**
 * salary_pay delete
 */
export type salary_payDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
  /**
   * Filter which salary_pay to delete.
   */
  where: Prisma.salary_payWhereUniqueInput
}

/**
 * salary_pay deleteMany
 */
export type salary_payDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which salary_pays to delete
   */
  where?: Prisma.salary_payWhereInput
  /**
   * Limit how many salary_pays to delete.
   */
  limit?: number
}

/**
 * salary_pay.nasso_users
 */
export type salary_pay$nasso_usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_users
   */
  select?: Prisma.nasso_usersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_users
   */
  omit?: Prisma.nasso_usersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_usersInclude<ExtArgs> | null
  where?: Prisma.nasso_usersWhereInput
}

/**
 * salary_pay without action
 */
export type salary_payDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salary_pay
   */
  select?: Prisma.salary_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the salary_pay
   */
  omit?: Prisma.salary_payOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.salary_payInclude<ExtArgs> | null
}
