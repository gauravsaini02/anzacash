
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_rates` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_rates
 * 
 */
export type tbl_ratesModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_ratesPayload>

export type AggregateTbl_rates = {
  _count: Tbl_ratesCountAggregateOutputType | null
  _avg: Tbl_ratesAvgAggregateOutputType | null
  _sum: Tbl_ratesSumAggregateOutputType | null
  _min: Tbl_ratesMinAggregateOutputType | null
  _max: Tbl_ratesMaxAggregateOutputType | null
}

export type Tbl_ratesAvgAggregateOutputType = {
  rt_Id: number | null
  rt_rate: number | null
}

export type Tbl_ratesSumAggregateOutputType = {
  rt_Id: number | null
  rt_rate: number | null
}

export type Tbl_ratesMinAggregateOutputType = {
  rt_Id: number | null
  rt_country: string | null
  rt_rate: number | null
  rt_symbol: string | null
}

export type Tbl_ratesMaxAggregateOutputType = {
  rt_Id: number | null
  rt_country: string | null
  rt_rate: number | null
  rt_symbol: string | null
}

export type Tbl_ratesCountAggregateOutputType = {
  rt_Id: number
  rt_country: number
  rt_rate: number
  rt_symbol: number
  _all: number
}


export type Tbl_ratesAvgAggregateInputType = {
  rt_Id?: true
  rt_rate?: true
}

export type Tbl_ratesSumAggregateInputType = {
  rt_Id?: true
  rt_rate?: true
}

export type Tbl_ratesMinAggregateInputType = {
  rt_Id?: true
  rt_country?: true
  rt_rate?: true
  rt_symbol?: true
}

export type Tbl_ratesMaxAggregateInputType = {
  rt_Id?: true
  rt_country?: true
  rt_rate?: true
  rt_symbol?: true
}

export type Tbl_ratesCountAggregateInputType = {
  rt_Id?: true
  rt_country?: true
  rt_rate?: true
  rt_symbol?: true
  _all?: true
}

export type Tbl_ratesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_rates to aggregate.
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_rates to fetch.
   */
  orderBy?: Prisma.tbl_ratesOrderByWithRelationInput | Prisma.tbl_ratesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_ratesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_rates
  **/
  _count?: true | Tbl_ratesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_ratesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_ratesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_ratesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_ratesMaxAggregateInputType
}

export type GetTbl_ratesAggregateType<T extends Tbl_ratesAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_rates]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_rates[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_rates[P]>
}




export type tbl_ratesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_ratesWhereInput
  orderBy?: Prisma.tbl_ratesOrderByWithAggregationInput | Prisma.tbl_ratesOrderByWithAggregationInput[]
  by: Prisma.Tbl_ratesScalarFieldEnum[] | Prisma.Tbl_ratesScalarFieldEnum
  having?: Prisma.tbl_ratesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_ratesCountAggregateInputType | true
  _avg?: Tbl_ratesAvgAggregateInputType
  _sum?: Tbl_ratesSumAggregateInputType
  _min?: Tbl_ratesMinAggregateInputType
  _max?: Tbl_ratesMaxAggregateInputType
}

export type Tbl_ratesGroupByOutputType = {
  rt_Id: number
  rt_country: string
  rt_rate: number
  rt_symbol: string | null
  _count: Tbl_ratesCountAggregateOutputType | null
  _avg: Tbl_ratesAvgAggregateOutputType | null
  _sum: Tbl_ratesSumAggregateOutputType | null
  _min: Tbl_ratesMinAggregateOutputType | null
  _max: Tbl_ratesMaxAggregateOutputType | null
}

type GetTbl_ratesGroupByPayload<T extends tbl_ratesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_ratesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_ratesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_ratesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_ratesGroupByOutputType[P]>
      }
    >
  >



export type tbl_ratesWhereInput = {
  AND?: Prisma.tbl_ratesWhereInput | Prisma.tbl_ratesWhereInput[]
  OR?: Prisma.tbl_ratesWhereInput[]
  NOT?: Prisma.tbl_ratesWhereInput | Prisma.tbl_ratesWhereInput[]
  rt_Id?: Prisma.IntFilter<"tbl_rates"> | number
  rt_country?: Prisma.StringFilter<"tbl_rates"> | string
  rt_rate?: Prisma.FloatFilter<"tbl_rates"> | number
  rt_symbol?: Prisma.StringNullableFilter<"tbl_rates"> | string | null
}

export type tbl_ratesOrderByWithRelationInput = {
  rt_Id?: Prisma.SortOrder
  rt_country?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
  rt_symbol?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_ratesOrderByRelevanceInput
}

export type tbl_ratesWhereUniqueInput = Prisma.AtLeast<{
  rt_Id?: number
  AND?: Prisma.tbl_ratesWhereInput | Prisma.tbl_ratesWhereInput[]
  OR?: Prisma.tbl_ratesWhereInput[]
  NOT?: Prisma.tbl_ratesWhereInput | Prisma.tbl_ratesWhereInput[]
  rt_country?: Prisma.StringFilter<"tbl_rates"> | string
  rt_rate?: Prisma.FloatFilter<"tbl_rates"> | number
  rt_symbol?: Prisma.StringNullableFilter<"tbl_rates"> | string | null
}, "rt_Id">

export type tbl_ratesOrderByWithAggregationInput = {
  rt_Id?: Prisma.SortOrder
  rt_country?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
  rt_symbol?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_ratesCountOrderByAggregateInput
  _avg?: Prisma.tbl_ratesAvgOrderByAggregateInput
  _max?: Prisma.tbl_ratesMaxOrderByAggregateInput
  _min?: Prisma.tbl_ratesMinOrderByAggregateInput
  _sum?: Prisma.tbl_ratesSumOrderByAggregateInput
}

export type tbl_ratesScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_ratesScalarWhereWithAggregatesInput | Prisma.tbl_ratesScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_ratesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_ratesScalarWhereWithAggregatesInput | Prisma.tbl_ratesScalarWhereWithAggregatesInput[]
  rt_Id?: Prisma.IntWithAggregatesFilter<"tbl_rates"> | number
  rt_country?: Prisma.StringWithAggregatesFilter<"tbl_rates"> | string
  rt_rate?: Prisma.FloatWithAggregatesFilter<"tbl_rates"> | number
  rt_symbol?: Prisma.StringNullableWithAggregatesFilter<"tbl_rates"> | string | null
}

export type tbl_ratesCreateInput = {
  rt_country: string
  rt_rate?: number
  rt_symbol?: string | null
}

export type tbl_ratesUncheckedCreateInput = {
  rt_Id?: number
  rt_country: string
  rt_rate?: number
  rt_symbol?: string | null
}

export type tbl_ratesUpdateInput = {
  rt_country?: Prisma.StringFieldUpdateOperationsInput | string
  rt_rate?: Prisma.FloatFieldUpdateOperationsInput | number
  rt_symbol?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_ratesUncheckedUpdateInput = {
  rt_Id?: Prisma.IntFieldUpdateOperationsInput | number
  rt_country?: Prisma.StringFieldUpdateOperationsInput | string
  rt_rate?: Prisma.FloatFieldUpdateOperationsInput | number
  rt_symbol?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_ratesCreateManyInput = {
  rt_Id?: number
  rt_country: string
  rt_rate?: number
  rt_symbol?: string | null
}

export type tbl_ratesUpdateManyMutationInput = {
  rt_country?: Prisma.StringFieldUpdateOperationsInput | string
  rt_rate?: Prisma.FloatFieldUpdateOperationsInput | number
  rt_symbol?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_ratesUncheckedUpdateManyInput = {
  rt_Id?: Prisma.IntFieldUpdateOperationsInput | number
  rt_country?: Prisma.StringFieldUpdateOperationsInput | string
  rt_rate?: Prisma.FloatFieldUpdateOperationsInput | number
  rt_symbol?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_ratesOrderByRelevanceInput = {
  fields: Prisma.tbl_ratesOrderByRelevanceFieldEnum | Prisma.tbl_ratesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_ratesCountOrderByAggregateInput = {
  rt_Id?: Prisma.SortOrder
  rt_country?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
  rt_symbol?: Prisma.SortOrder
}

export type tbl_ratesAvgOrderByAggregateInput = {
  rt_Id?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
}

export type tbl_ratesMaxOrderByAggregateInput = {
  rt_Id?: Prisma.SortOrder
  rt_country?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
  rt_symbol?: Prisma.SortOrder
}

export type tbl_ratesMinOrderByAggregateInput = {
  rt_Id?: Prisma.SortOrder
  rt_country?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
  rt_symbol?: Prisma.SortOrder
}

export type tbl_ratesSumOrderByAggregateInput = {
  rt_Id?: Prisma.SortOrder
  rt_rate?: Prisma.SortOrder
}



export type tbl_ratesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  rt_Id?: boolean
  rt_country?: boolean
  rt_rate?: boolean
  rt_symbol?: boolean
}, ExtArgs["result"]["tbl_rates"]>



export type tbl_ratesSelectScalar = {
  rt_Id?: boolean
  rt_country?: boolean
  rt_rate?: boolean
  rt_symbol?: boolean
}

export type tbl_ratesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"rt_Id" | "rt_country" | "rt_rate" | "rt_symbol", ExtArgs["result"]["tbl_rates"]>

export type $tbl_ratesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_rates"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    rt_Id: number
    rt_country: string
    rt_rate: number
    rt_symbol: string | null
  }, ExtArgs["result"]["tbl_rates"]>
  composites: {}
}

export type tbl_ratesGetPayload<S extends boolean | null | undefined | tbl_ratesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload, S>

export type tbl_ratesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_ratesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_ratesCountAggregateInputType | true
  }

export interface tbl_ratesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_rates'], meta: { name: 'tbl_rates' } }
  /**
   * Find zero or one Tbl_rates that matches the filter.
   * @param {tbl_ratesFindUniqueArgs} args - Arguments to find a Tbl_rates
   * @example
   * // Get one Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_ratesFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_ratesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_rates that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_ratesFindUniqueOrThrowArgs} args - Arguments to find a Tbl_rates
   * @example
   * // Get one Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_ratesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_ratesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_rates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesFindFirstArgs} args - Arguments to find a Tbl_rates
   * @example
   * // Get one Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_ratesFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_ratesFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_rates that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesFindFirstOrThrowArgs} args - Arguments to find a Tbl_rates
   * @example
   * // Get one Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_ratesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_ratesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_rates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findMany()
   * 
   * // Get first 10 Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.findMany({ take: 10 })
   * 
   * // Only select the `rt_Id`
   * const tbl_ratesWithRt_IdOnly = await prisma.tbl_rates.findMany({ select: { rt_Id: true } })
   * 
   */
  findMany<T extends tbl_ratesFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_ratesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_rates.
   * @param {tbl_ratesCreateArgs} args - Arguments to create a Tbl_rates.
   * @example
   * // Create one Tbl_rates
   * const Tbl_rates = await prisma.tbl_rates.create({
   *   data: {
   *     // ... data to create a Tbl_rates
   *   }
   * })
   * 
   */
  create<T extends tbl_ratesCreateArgs>(args: Prisma.SelectSubset<T, tbl_ratesCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_rates.
   * @param {tbl_ratesCreateManyArgs} args - Arguments to create many Tbl_rates.
   * @example
   * // Create many Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_ratesCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_ratesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_rates.
   * @param {tbl_ratesDeleteArgs} args - Arguments to delete one Tbl_rates.
   * @example
   * // Delete one Tbl_rates
   * const Tbl_rates = await prisma.tbl_rates.delete({
   *   where: {
   *     // ... filter to delete one Tbl_rates
   *   }
   * })
   * 
   */
  delete<T extends tbl_ratesDeleteArgs>(args: Prisma.SelectSubset<T, tbl_ratesDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_rates.
   * @param {tbl_ratesUpdateArgs} args - Arguments to update one Tbl_rates.
   * @example
   * // Update one Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_ratesUpdateArgs>(args: Prisma.SelectSubset<T, tbl_ratesUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_rates.
   * @param {tbl_ratesDeleteManyArgs} args - Arguments to filter Tbl_rates to delete.
   * @example
   * // Delete a few Tbl_rates
   * const { count } = await prisma.tbl_rates.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_ratesDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_ratesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_ratesUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_ratesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_rates.
   * @param {tbl_ratesUpsertArgs} args - Arguments to update or create a Tbl_rates.
   * @example
   * // Update or create a Tbl_rates
   * const tbl_rates = await prisma.tbl_rates.upsert({
   *   create: {
   *     // ... data to create a Tbl_rates
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_rates we want to update
   *   }
   * })
   */
  upsert<T extends tbl_ratesUpsertArgs>(args: Prisma.SelectSubset<T, tbl_ratesUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_ratesClient<runtime.Types.Result.GetResult<Prisma.$tbl_ratesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesCountArgs} args - Arguments to filter Tbl_rates to count.
   * @example
   * // Count the number of Tbl_rates
   * const count = await prisma.tbl_rates.count({
   *   where: {
   *     // ... the filter for the Tbl_rates we want to count
   *   }
   * })
  **/
  count<T extends tbl_ratesCountArgs>(
    args?: Prisma.Subset<T, tbl_ratesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_ratesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_ratesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_ratesAggregateArgs>(args: Prisma.Subset<T, Tbl_ratesAggregateArgs>): Prisma.PrismaPromise<GetTbl_ratesAggregateType<T>>

  /**
   * Group by Tbl_rates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_ratesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_ratesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_ratesGroupByArgs['orderBy'] }
      : { orderBy?: tbl_ratesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_ratesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_ratesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_rates model
 */
readonly fields: tbl_ratesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_rates.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_ratesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_rates model
 */
export interface tbl_ratesFieldRefs {
  readonly rt_Id: Prisma.FieldRef<"tbl_rates", 'Int'>
  readonly rt_country: Prisma.FieldRef<"tbl_rates", 'String'>
  readonly rt_rate: Prisma.FieldRef<"tbl_rates", 'Float'>
  readonly rt_symbol: Prisma.FieldRef<"tbl_rates", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_rates findUnique
 */
export type tbl_ratesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_rates to fetch.
   */
  where: Prisma.tbl_ratesWhereUniqueInput
}

/**
 * tbl_rates findUniqueOrThrow
 */
export type tbl_ratesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_rates to fetch.
   */
  where: Prisma.tbl_ratesWhereUniqueInput
}

/**
 * tbl_rates findFirst
 */
export type tbl_ratesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_rates to fetch.
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_rates to fetch.
   */
  orderBy?: Prisma.tbl_ratesOrderByWithRelationInput | Prisma.tbl_ratesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_rates.
   */
  cursor?: Prisma.tbl_ratesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_rates.
   */
  distinct?: Prisma.Tbl_ratesScalarFieldEnum | Prisma.Tbl_ratesScalarFieldEnum[]
}

/**
 * tbl_rates findFirstOrThrow
 */
export type tbl_ratesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_rates to fetch.
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_rates to fetch.
   */
  orderBy?: Prisma.tbl_ratesOrderByWithRelationInput | Prisma.tbl_ratesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_rates.
   */
  cursor?: Prisma.tbl_ratesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_rates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_rates.
   */
  distinct?: Prisma.Tbl_ratesScalarFieldEnum | Prisma.Tbl_ratesScalarFieldEnum[]
}

/**
 * tbl_rates findMany
 */
export type tbl_ratesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_rates to fetch.
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_rates to fetch.
   */
  orderBy?: Prisma.tbl_ratesOrderByWithRelationInput | Prisma.tbl_ratesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_rates.
   */
  cursor?: Prisma.tbl_ratesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_rates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_rates.
   */
  skip?: number
  distinct?: Prisma.Tbl_ratesScalarFieldEnum | Prisma.Tbl_ratesScalarFieldEnum[]
}

/**
 * tbl_rates create
 */
export type tbl_ratesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_rates.
   */
  data: Prisma.XOR<Prisma.tbl_ratesCreateInput, Prisma.tbl_ratesUncheckedCreateInput>
}

/**
 * tbl_rates createMany
 */
export type tbl_ratesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_rates.
   */
  data: Prisma.tbl_ratesCreateManyInput | Prisma.tbl_ratesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_rates update
 */
export type tbl_ratesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_rates.
   */
  data: Prisma.XOR<Prisma.tbl_ratesUpdateInput, Prisma.tbl_ratesUncheckedUpdateInput>
  /**
   * Choose, which tbl_rates to update.
   */
  where: Prisma.tbl_ratesWhereUniqueInput
}

/**
 * tbl_rates updateMany
 */
export type tbl_ratesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_rates.
   */
  data: Prisma.XOR<Prisma.tbl_ratesUpdateManyMutationInput, Prisma.tbl_ratesUncheckedUpdateManyInput>
  /**
   * Filter which tbl_rates to update
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * Limit how many tbl_rates to update.
   */
  limit?: number
}

/**
 * tbl_rates upsert
 */
export type tbl_ratesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_rates to update in case it exists.
   */
  where: Prisma.tbl_ratesWhereUniqueInput
  /**
   * In case the tbl_rates found by the `where` argument doesn't exist, create a new tbl_rates with this data.
   */
  create: Prisma.XOR<Prisma.tbl_ratesCreateInput, Prisma.tbl_ratesUncheckedCreateInput>
  /**
   * In case the tbl_rates was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_ratesUpdateInput, Prisma.tbl_ratesUncheckedUpdateInput>
}

/**
 * tbl_rates delete
 */
export type tbl_ratesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
  /**
   * Filter which tbl_rates to delete.
   */
  where: Prisma.tbl_ratesWhereUniqueInput
}

/**
 * tbl_rates deleteMany
 */
export type tbl_ratesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_rates to delete
   */
  where?: Prisma.tbl_ratesWhereInput
  /**
   * Limit how many tbl_rates to delete.
   */
  limit?: number
}

/**
 * tbl_rates without action
 */
export type tbl_ratesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_rates
   */
  select?: Prisma.tbl_ratesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_rates
   */
  omit?: Prisma.tbl_ratesOmit<ExtArgs> | null
}
