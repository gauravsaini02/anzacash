
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_seller` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_seller
 * 
 */
export type tbl_sellerModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_sellerPayload>

export type AggregateTbl_seller = {
  _count: Tbl_sellerCountAggregateOutputType | null
  _avg: Tbl_sellerAvgAggregateOutputType | null
  _sum: Tbl_sellerSumAggregateOutputType | null
  _min: Tbl_sellerMinAggregateOutputType | null
  _max: Tbl_sellerMaxAggregateOutputType | null
}

export type Tbl_sellerAvgAggregateOutputType = {
  seller_ID: number | null
}

export type Tbl_sellerSumAggregateOutputType = {
  seller_ID: number | null
}

export type Tbl_sellerMinAggregateOutputType = {
  seller_ID: number | null
  seller_name: string | null
}

export type Tbl_sellerMaxAggregateOutputType = {
  seller_ID: number | null
  seller_name: string | null
}

export type Tbl_sellerCountAggregateOutputType = {
  seller_ID: number
  seller_name: number
  _all: number
}


export type Tbl_sellerAvgAggregateInputType = {
  seller_ID?: true
}

export type Tbl_sellerSumAggregateInputType = {
  seller_ID?: true
}

export type Tbl_sellerMinAggregateInputType = {
  seller_ID?: true
  seller_name?: true
}

export type Tbl_sellerMaxAggregateInputType = {
  seller_ID?: true
  seller_name?: true
}

export type Tbl_sellerCountAggregateInputType = {
  seller_ID?: true
  seller_name?: true
  _all?: true
}

export type Tbl_sellerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_seller to aggregate.
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_sellers to fetch.
   */
  orderBy?: Prisma.tbl_sellerOrderByWithRelationInput | Prisma.tbl_sellerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_sellerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_sellers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_sellers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_sellers
  **/
  _count?: true | Tbl_sellerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_sellerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_sellerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_sellerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_sellerMaxAggregateInputType
}

export type GetTbl_sellerAggregateType<T extends Tbl_sellerAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_seller]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_seller[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_seller[P]>
}




export type tbl_sellerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_sellerWhereInput
  orderBy?: Prisma.tbl_sellerOrderByWithAggregationInput | Prisma.tbl_sellerOrderByWithAggregationInput[]
  by: Prisma.Tbl_sellerScalarFieldEnum[] | Prisma.Tbl_sellerScalarFieldEnum
  having?: Prisma.tbl_sellerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_sellerCountAggregateInputType | true
  _avg?: Tbl_sellerAvgAggregateInputType
  _sum?: Tbl_sellerSumAggregateInputType
  _min?: Tbl_sellerMinAggregateInputType
  _max?: Tbl_sellerMaxAggregateInputType
}

export type Tbl_sellerGroupByOutputType = {
  seller_ID: number
  seller_name: string
  _count: Tbl_sellerCountAggregateOutputType | null
  _avg: Tbl_sellerAvgAggregateOutputType | null
  _sum: Tbl_sellerSumAggregateOutputType | null
  _min: Tbl_sellerMinAggregateOutputType | null
  _max: Tbl_sellerMaxAggregateOutputType | null
}

type GetTbl_sellerGroupByPayload<T extends tbl_sellerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_sellerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_sellerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_sellerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_sellerGroupByOutputType[P]>
      }
    >
  >



export type tbl_sellerWhereInput = {
  AND?: Prisma.tbl_sellerWhereInput | Prisma.tbl_sellerWhereInput[]
  OR?: Prisma.tbl_sellerWhereInput[]
  NOT?: Prisma.tbl_sellerWhereInput | Prisma.tbl_sellerWhereInput[]
  seller_ID?: Prisma.IntFilter<"tbl_seller"> | number
  seller_name?: Prisma.StringFilter<"tbl_seller"> | string
}

export type tbl_sellerOrderByWithRelationInput = {
  seller_ID?: Prisma.SortOrder
  seller_name?: Prisma.SortOrder
  _relevance?: Prisma.tbl_sellerOrderByRelevanceInput
}

export type tbl_sellerWhereUniqueInput = Prisma.AtLeast<{
  seller_ID?: number
  AND?: Prisma.tbl_sellerWhereInput | Prisma.tbl_sellerWhereInput[]
  OR?: Prisma.tbl_sellerWhereInput[]
  NOT?: Prisma.tbl_sellerWhereInput | Prisma.tbl_sellerWhereInput[]
  seller_name?: Prisma.StringFilter<"tbl_seller"> | string
}, "seller_ID">

export type tbl_sellerOrderByWithAggregationInput = {
  seller_ID?: Prisma.SortOrder
  seller_name?: Prisma.SortOrder
  _count?: Prisma.tbl_sellerCountOrderByAggregateInput
  _avg?: Prisma.tbl_sellerAvgOrderByAggregateInput
  _max?: Prisma.tbl_sellerMaxOrderByAggregateInput
  _min?: Prisma.tbl_sellerMinOrderByAggregateInput
  _sum?: Prisma.tbl_sellerSumOrderByAggregateInput
}

export type tbl_sellerScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_sellerScalarWhereWithAggregatesInput | Prisma.tbl_sellerScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_sellerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_sellerScalarWhereWithAggregatesInput | Prisma.tbl_sellerScalarWhereWithAggregatesInput[]
  seller_ID?: Prisma.IntWithAggregatesFilter<"tbl_seller"> | number
  seller_name?: Prisma.StringWithAggregatesFilter<"tbl_seller"> | string
}

export type tbl_sellerCreateInput = {
  seller_name: string
}

export type tbl_sellerUncheckedCreateInput = {
  seller_ID?: number
  seller_name: string
}

export type tbl_sellerUpdateInput = {
  seller_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_sellerUncheckedUpdateInput = {
  seller_ID?: Prisma.IntFieldUpdateOperationsInput | number
  seller_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_sellerCreateManyInput = {
  seller_ID?: number
  seller_name: string
}

export type tbl_sellerUpdateManyMutationInput = {
  seller_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_sellerUncheckedUpdateManyInput = {
  seller_ID?: Prisma.IntFieldUpdateOperationsInput | number
  seller_name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_sellerOrderByRelevanceInput = {
  fields: Prisma.tbl_sellerOrderByRelevanceFieldEnum | Prisma.tbl_sellerOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_sellerCountOrderByAggregateInput = {
  seller_ID?: Prisma.SortOrder
  seller_name?: Prisma.SortOrder
}

export type tbl_sellerAvgOrderByAggregateInput = {
  seller_ID?: Prisma.SortOrder
}

export type tbl_sellerMaxOrderByAggregateInput = {
  seller_ID?: Prisma.SortOrder
  seller_name?: Prisma.SortOrder
}

export type tbl_sellerMinOrderByAggregateInput = {
  seller_ID?: Prisma.SortOrder
  seller_name?: Prisma.SortOrder
}

export type tbl_sellerSumOrderByAggregateInput = {
  seller_ID?: Prisma.SortOrder
}



export type tbl_sellerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  seller_ID?: boolean
  seller_name?: boolean
}, ExtArgs["result"]["tbl_seller"]>



export type tbl_sellerSelectScalar = {
  seller_ID?: boolean
  seller_name?: boolean
}

export type tbl_sellerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"seller_ID" | "seller_name", ExtArgs["result"]["tbl_seller"]>

export type $tbl_sellerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_seller"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    seller_ID: number
    seller_name: string
  }, ExtArgs["result"]["tbl_seller"]>
  composites: {}
}

export type tbl_sellerGetPayload<S extends boolean | null | undefined | tbl_sellerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload, S>

export type tbl_sellerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_sellerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_sellerCountAggregateInputType | true
  }

export interface tbl_sellerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_seller'], meta: { name: 'tbl_seller' } }
  /**
   * Find zero or one Tbl_seller that matches the filter.
   * @param {tbl_sellerFindUniqueArgs} args - Arguments to find a Tbl_seller
   * @example
   * // Get one Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_sellerFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_sellerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_seller that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_sellerFindUniqueOrThrowArgs} args - Arguments to find a Tbl_seller
   * @example
   * // Get one Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_sellerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_sellerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_seller that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerFindFirstArgs} args - Arguments to find a Tbl_seller
   * @example
   * // Get one Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_sellerFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_sellerFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_seller that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerFindFirstOrThrowArgs} args - Arguments to find a Tbl_seller
   * @example
   * // Get one Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_sellerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_sellerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_sellers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_sellers
   * const tbl_sellers = await prisma.tbl_seller.findMany()
   * 
   * // Get first 10 Tbl_sellers
   * const tbl_sellers = await prisma.tbl_seller.findMany({ take: 10 })
   * 
   * // Only select the `seller_ID`
   * const tbl_sellerWithSeller_IDOnly = await prisma.tbl_seller.findMany({ select: { seller_ID: true } })
   * 
   */
  findMany<T extends tbl_sellerFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_sellerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_seller.
   * @param {tbl_sellerCreateArgs} args - Arguments to create a Tbl_seller.
   * @example
   * // Create one Tbl_seller
   * const Tbl_seller = await prisma.tbl_seller.create({
   *   data: {
   *     // ... data to create a Tbl_seller
   *   }
   * })
   * 
   */
  create<T extends tbl_sellerCreateArgs>(args: Prisma.SelectSubset<T, tbl_sellerCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_sellers.
   * @param {tbl_sellerCreateManyArgs} args - Arguments to create many Tbl_sellers.
   * @example
   * // Create many Tbl_sellers
   * const tbl_seller = await prisma.tbl_seller.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_sellerCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_sellerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_seller.
   * @param {tbl_sellerDeleteArgs} args - Arguments to delete one Tbl_seller.
   * @example
   * // Delete one Tbl_seller
   * const Tbl_seller = await prisma.tbl_seller.delete({
   *   where: {
   *     // ... filter to delete one Tbl_seller
   *   }
   * })
   * 
   */
  delete<T extends tbl_sellerDeleteArgs>(args: Prisma.SelectSubset<T, tbl_sellerDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_seller.
   * @param {tbl_sellerUpdateArgs} args - Arguments to update one Tbl_seller.
   * @example
   * // Update one Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_sellerUpdateArgs>(args: Prisma.SelectSubset<T, tbl_sellerUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_sellers.
   * @param {tbl_sellerDeleteManyArgs} args - Arguments to filter Tbl_sellers to delete.
   * @example
   * // Delete a few Tbl_sellers
   * const { count } = await prisma.tbl_seller.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_sellerDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_sellerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_sellers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_sellers
   * const tbl_seller = await prisma.tbl_seller.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_sellerUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_sellerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_seller.
   * @param {tbl_sellerUpsertArgs} args - Arguments to update or create a Tbl_seller.
   * @example
   * // Update or create a Tbl_seller
   * const tbl_seller = await prisma.tbl_seller.upsert({
   *   create: {
   *     // ... data to create a Tbl_seller
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_seller we want to update
   *   }
   * })
   */
  upsert<T extends tbl_sellerUpsertArgs>(args: Prisma.SelectSubset<T, tbl_sellerUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_sellerClient<runtime.Types.Result.GetResult<Prisma.$tbl_sellerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_sellers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerCountArgs} args - Arguments to filter Tbl_sellers to count.
   * @example
   * // Count the number of Tbl_sellers
   * const count = await prisma.tbl_seller.count({
   *   where: {
   *     // ... the filter for the Tbl_sellers we want to count
   *   }
   * })
  **/
  count<T extends tbl_sellerCountArgs>(
    args?: Prisma.Subset<T, tbl_sellerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_sellerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_seller.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_sellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_sellerAggregateArgs>(args: Prisma.Subset<T, Tbl_sellerAggregateArgs>): Prisma.PrismaPromise<GetTbl_sellerAggregateType<T>>

  /**
   * Group by Tbl_seller.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_sellerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_sellerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_sellerGroupByArgs['orderBy'] }
      : { orderBy?: tbl_sellerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_sellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_sellerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_seller model
 */
readonly fields: tbl_sellerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_seller.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_sellerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_seller model
 */
export interface tbl_sellerFieldRefs {
  readonly seller_ID: Prisma.FieldRef<"tbl_seller", 'Int'>
  readonly seller_name: Prisma.FieldRef<"tbl_seller", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_seller findUnique
 */
export type tbl_sellerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter, which tbl_seller to fetch.
   */
  where: Prisma.tbl_sellerWhereUniqueInput
}

/**
 * tbl_seller findUniqueOrThrow
 */
export type tbl_sellerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter, which tbl_seller to fetch.
   */
  where: Prisma.tbl_sellerWhereUniqueInput
}

/**
 * tbl_seller findFirst
 */
export type tbl_sellerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter, which tbl_seller to fetch.
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_sellers to fetch.
   */
  orderBy?: Prisma.tbl_sellerOrderByWithRelationInput | Prisma.tbl_sellerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_sellers.
   */
  cursor?: Prisma.tbl_sellerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_sellers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_sellers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_sellers.
   */
  distinct?: Prisma.Tbl_sellerScalarFieldEnum | Prisma.Tbl_sellerScalarFieldEnum[]
}

/**
 * tbl_seller findFirstOrThrow
 */
export type tbl_sellerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter, which tbl_seller to fetch.
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_sellers to fetch.
   */
  orderBy?: Prisma.tbl_sellerOrderByWithRelationInput | Prisma.tbl_sellerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_sellers.
   */
  cursor?: Prisma.tbl_sellerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_sellers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_sellers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_sellers.
   */
  distinct?: Prisma.Tbl_sellerScalarFieldEnum | Prisma.Tbl_sellerScalarFieldEnum[]
}

/**
 * tbl_seller findMany
 */
export type tbl_sellerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter, which tbl_sellers to fetch.
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_sellers to fetch.
   */
  orderBy?: Prisma.tbl_sellerOrderByWithRelationInput | Prisma.tbl_sellerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_sellers.
   */
  cursor?: Prisma.tbl_sellerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_sellers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_sellers.
   */
  skip?: number
  distinct?: Prisma.Tbl_sellerScalarFieldEnum | Prisma.Tbl_sellerScalarFieldEnum[]
}

/**
 * tbl_seller create
 */
export type tbl_sellerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_seller.
   */
  data: Prisma.XOR<Prisma.tbl_sellerCreateInput, Prisma.tbl_sellerUncheckedCreateInput>
}

/**
 * tbl_seller createMany
 */
export type tbl_sellerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_sellers.
   */
  data: Prisma.tbl_sellerCreateManyInput | Prisma.tbl_sellerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_seller update
 */
export type tbl_sellerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_seller.
   */
  data: Prisma.XOR<Prisma.tbl_sellerUpdateInput, Prisma.tbl_sellerUncheckedUpdateInput>
  /**
   * Choose, which tbl_seller to update.
   */
  where: Prisma.tbl_sellerWhereUniqueInput
}

/**
 * tbl_seller updateMany
 */
export type tbl_sellerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_sellers.
   */
  data: Prisma.XOR<Prisma.tbl_sellerUpdateManyMutationInput, Prisma.tbl_sellerUncheckedUpdateManyInput>
  /**
   * Filter which tbl_sellers to update
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * Limit how many tbl_sellers to update.
   */
  limit?: number
}

/**
 * tbl_seller upsert
 */
export type tbl_sellerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_seller to update in case it exists.
   */
  where: Prisma.tbl_sellerWhereUniqueInput
  /**
   * In case the tbl_seller found by the `where` argument doesn't exist, create a new tbl_seller with this data.
   */
  create: Prisma.XOR<Prisma.tbl_sellerCreateInput, Prisma.tbl_sellerUncheckedCreateInput>
  /**
   * In case the tbl_seller was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_sellerUpdateInput, Prisma.tbl_sellerUncheckedUpdateInput>
}

/**
 * tbl_seller delete
 */
export type tbl_sellerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
  /**
   * Filter which tbl_seller to delete.
   */
  where: Prisma.tbl_sellerWhereUniqueInput
}

/**
 * tbl_seller deleteMany
 */
export type tbl_sellerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_sellers to delete
   */
  where?: Prisma.tbl_sellerWhereInput
  /**
   * Limit how many tbl_sellers to delete.
   */
  limit?: number
}

/**
 * tbl_seller without action
 */
export type tbl_sellerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_seller
   */
  select?: Prisma.tbl_sellerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_seller
   */
  omit?: Prisma.tbl_sellerOmit<ExtArgs> | null
}
