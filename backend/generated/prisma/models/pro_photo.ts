
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `pro_photo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model pro_photo
 * 
 */
export type pro_photoModel = runtime.Types.Result.DefaultSelection<Prisma.$pro_photoPayload>

export type AggregatePro_photo = {
  _count: Pro_photoCountAggregateOutputType | null
  _avg: Pro_photoAvgAggregateOutputType | null
  _sum: Pro_photoSumAggregateOutputType | null
  _min: Pro_photoMinAggregateOutputType | null
  _max: Pro_photoMaxAggregateOutputType | null
}

export type Pro_photoAvgAggregateOutputType = {
  p_ID: number | null
  pro_ID: number | null
  user_Id: number | null
}

export type Pro_photoSumAggregateOutputType = {
  p_ID: number | null
  pro_ID: number | null
  user_Id: number | null
}

export type Pro_photoMinAggregateOutputType = {
  p_ID: number | null
  pro_ID: number | null
  p_path: string | null
  user_Id: number | null
}

export type Pro_photoMaxAggregateOutputType = {
  p_ID: number | null
  pro_ID: number | null
  p_path: string | null
  user_Id: number | null
}

export type Pro_photoCountAggregateOutputType = {
  p_ID: number
  pro_ID: number
  p_path: number
  user_Id: number
  _all: number
}


export type Pro_photoAvgAggregateInputType = {
  p_ID?: true
  pro_ID?: true
  user_Id?: true
}

export type Pro_photoSumAggregateInputType = {
  p_ID?: true
  pro_ID?: true
  user_Id?: true
}

export type Pro_photoMinAggregateInputType = {
  p_ID?: true
  pro_ID?: true
  p_path?: true
  user_Id?: true
}

export type Pro_photoMaxAggregateInputType = {
  p_ID?: true
  pro_ID?: true
  p_path?: true
  user_Id?: true
}

export type Pro_photoCountAggregateInputType = {
  p_ID?: true
  pro_ID?: true
  p_path?: true
  user_Id?: true
  _all?: true
}

export type Pro_photoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which pro_photo to aggregate.
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of pro_photos to fetch.
   */
  orderBy?: Prisma.pro_photoOrderByWithRelationInput | Prisma.pro_photoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.pro_photoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` pro_photos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` pro_photos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned pro_photos
  **/
  _count?: true | Pro_photoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Pro_photoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Pro_photoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Pro_photoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Pro_photoMaxAggregateInputType
}

export type GetPro_photoAggregateType<T extends Pro_photoAggregateArgs> = {
      [P in keyof T & keyof AggregatePro_photo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePro_photo[P]>
    : Prisma.GetScalarType<T[P], AggregatePro_photo[P]>
}




export type pro_photoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.pro_photoWhereInput
  orderBy?: Prisma.pro_photoOrderByWithAggregationInput | Prisma.pro_photoOrderByWithAggregationInput[]
  by: Prisma.Pro_photoScalarFieldEnum[] | Prisma.Pro_photoScalarFieldEnum
  having?: Prisma.pro_photoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Pro_photoCountAggregateInputType | true
  _avg?: Pro_photoAvgAggregateInputType
  _sum?: Pro_photoSumAggregateInputType
  _min?: Pro_photoMinAggregateInputType
  _max?: Pro_photoMaxAggregateInputType
}

export type Pro_photoGroupByOutputType = {
  p_ID: number
  pro_ID: number | null
  p_path: string | null
  user_Id: number | null
  _count: Pro_photoCountAggregateOutputType | null
  _avg: Pro_photoAvgAggregateOutputType | null
  _sum: Pro_photoSumAggregateOutputType | null
  _min: Pro_photoMinAggregateOutputType | null
  _max: Pro_photoMaxAggregateOutputType | null
}

type GetPro_photoGroupByPayload<T extends pro_photoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Pro_photoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Pro_photoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Pro_photoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Pro_photoGroupByOutputType[P]>
      }
    >
  >



export type pro_photoWhereInput = {
  AND?: Prisma.pro_photoWhereInput | Prisma.pro_photoWhereInput[]
  OR?: Prisma.pro_photoWhereInput[]
  NOT?: Prisma.pro_photoWhereInput | Prisma.pro_photoWhereInput[]
  p_ID?: Prisma.IntFilter<"pro_photo"> | number
  pro_ID?: Prisma.IntNullableFilter<"pro_photo"> | number | null
  p_path?: Prisma.StringNullableFilter<"pro_photo"> | string | null
  user_Id?: Prisma.IntNullableFilter<"pro_photo"> | number | null
  tbl_products?: Prisma.XOR<Prisma.Tbl_productsNullableScalarRelationFilter, Prisma.tbl_productsWhereInput> | null
}

export type pro_photoOrderByWithRelationInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  p_path?: Prisma.SortOrderInput | Prisma.SortOrder
  user_Id?: Prisma.SortOrderInput | Prisma.SortOrder
  tbl_products?: Prisma.tbl_productsOrderByWithRelationInput
  _relevance?: Prisma.pro_photoOrderByRelevanceInput
}

export type pro_photoWhereUniqueInput = Prisma.AtLeast<{
  p_ID?: number
  AND?: Prisma.pro_photoWhereInput | Prisma.pro_photoWhereInput[]
  OR?: Prisma.pro_photoWhereInput[]
  NOT?: Prisma.pro_photoWhereInput | Prisma.pro_photoWhereInput[]
  pro_ID?: Prisma.IntNullableFilter<"pro_photo"> | number | null
  p_path?: Prisma.StringNullableFilter<"pro_photo"> | string | null
  user_Id?: Prisma.IntNullableFilter<"pro_photo"> | number | null
  tbl_products?: Prisma.XOR<Prisma.Tbl_productsNullableScalarRelationFilter, Prisma.tbl_productsWhereInput> | null
}, "p_ID">

export type pro_photoOrderByWithAggregationInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  p_path?: Prisma.SortOrderInput | Prisma.SortOrder
  user_Id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.pro_photoCountOrderByAggregateInput
  _avg?: Prisma.pro_photoAvgOrderByAggregateInput
  _max?: Prisma.pro_photoMaxOrderByAggregateInput
  _min?: Prisma.pro_photoMinOrderByAggregateInput
  _sum?: Prisma.pro_photoSumOrderByAggregateInput
}

export type pro_photoScalarWhereWithAggregatesInput = {
  AND?: Prisma.pro_photoScalarWhereWithAggregatesInput | Prisma.pro_photoScalarWhereWithAggregatesInput[]
  OR?: Prisma.pro_photoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.pro_photoScalarWhereWithAggregatesInput | Prisma.pro_photoScalarWhereWithAggregatesInput[]
  p_ID?: Prisma.IntWithAggregatesFilter<"pro_photo"> | number
  pro_ID?: Prisma.IntNullableWithAggregatesFilter<"pro_photo"> | number | null
  p_path?: Prisma.StringNullableWithAggregatesFilter<"pro_photo"> | string | null
  user_Id?: Prisma.IntNullableWithAggregatesFilter<"pro_photo"> | number | null
}

export type pro_photoCreateInput = {
  p_path?: string | null
  user_Id?: number | null
  tbl_products?: Prisma.tbl_productsCreateNestedOneWithoutPro_photoInput
}

export type pro_photoUncheckedCreateInput = {
  p_ID?: number
  pro_ID?: number | null
  p_path?: string | null
  user_Id?: number | null
}

export type pro_photoUpdateInput = {
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  tbl_products?: Prisma.tbl_productsUpdateOneWithoutPro_photoNestedInput
}

export type pro_photoUncheckedUpdateInput = {
  p_ID?: Prisma.IntFieldUpdateOperationsInput | number
  pro_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type pro_photoCreateManyInput = {
  p_ID?: number
  pro_ID?: number | null
  p_path?: string | null
  user_Id?: number | null
}

export type pro_photoUpdateManyMutationInput = {
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type pro_photoUncheckedUpdateManyInput = {
  p_ID?: Prisma.IntFieldUpdateOperationsInput | number
  pro_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type pro_photoOrderByRelevanceInput = {
  fields: Prisma.pro_photoOrderByRelevanceFieldEnum | Prisma.pro_photoOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type pro_photoCountOrderByAggregateInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrder
  p_path?: Prisma.SortOrder
  user_Id?: Prisma.SortOrder
}

export type pro_photoAvgOrderByAggregateInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrder
  user_Id?: Prisma.SortOrder
}

export type pro_photoMaxOrderByAggregateInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrder
  p_path?: Prisma.SortOrder
  user_Id?: Prisma.SortOrder
}

export type pro_photoMinOrderByAggregateInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrder
  p_path?: Prisma.SortOrder
  user_Id?: Prisma.SortOrder
}

export type pro_photoSumOrderByAggregateInput = {
  p_ID?: Prisma.SortOrder
  pro_ID?: Prisma.SortOrder
  user_Id?: Prisma.SortOrder
}

export type Pro_photoListRelationFilter = {
  every?: Prisma.pro_photoWhereInput
  some?: Prisma.pro_photoWhereInput
  none?: Prisma.pro_photoWhereInput
}

export type pro_photoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type pro_photoCreateNestedManyWithoutTbl_productsInput = {
  create?: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput> | Prisma.pro_photoCreateWithoutTbl_productsInput[] | Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput[]
  connectOrCreate?: Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput | Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput[]
  createMany?: Prisma.pro_photoCreateManyTbl_productsInputEnvelope
  connect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
}

export type pro_photoUncheckedCreateNestedManyWithoutTbl_productsInput = {
  create?: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput> | Prisma.pro_photoCreateWithoutTbl_productsInput[] | Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput[]
  connectOrCreate?: Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput | Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput[]
  createMany?: Prisma.pro_photoCreateManyTbl_productsInputEnvelope
  connect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
}

export type pro_photoUpdateManyWithoutTbl_productsNestedInput = {
  create?: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput> | Prisma.pro_photoCreateWithoutTbl_productsInput[] | Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput[]
  connectOrCreate?: Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput | Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput[]
  upsert?: Prisma.pro_photoUpsertWithWhereUniqueWithoutTbl_productsInput | Prisma.pro_photoUpsertWithWhereUniqueWithoutTbl_productsInput[]
  createMany?: Prisma.pro_photoCreateManyTbl_productsInputEnvelope
  set?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  disconnect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  delete?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  connect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  update?: Prisma.pro_photoUpdateWithWhereUniqueWithoutTbl_productsInput | Prisma.pro_photoUpdateWithWhereUniqueWithoutTbl_productsInput[]
  updateMany?: Prisma.pro_photoUpdateManyWithWhereWithoutTbl_productsInput | Prisma.pro_photoUpdateManyWithWhereWithoutTbl_productsInput[]
  deleteMany?: Prisma.pro_photoScalarWhereInput | Prisma.pro_photoScalarWhereInput[]
}

export type pro_photoUncheckedUpdateManyWithoutTbl_productsNestedInput = {
  create?: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput> | Prisma.pro_photoCreateWithoutTbl_productsInput[] | Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput[]
  connectOrCreate?: Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput | Prisma.pro_photoCreateOrConnectWithoutTbl_productsInput[]
  upsert?: Prisma.pro_photoUpsertWithWhereUniqueWithoutTbl_productsInput | Prisma.pro_photoUpsertWithWhereUniqueWithoutTbl_productsInput[]
  createMany?: Prisma.pro_photoCreateManyTbl_productsInputEnvelope
  set?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  disconnect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  delete?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  connect?: Prisma.pro_photoWhereUniqueInput | Prisma.pro_photoWhereUniqueInput[]
  update?: Prisma.pro_photoUpdateWithWhereUniqueWithoutTbl_productsInput | Prisma.pro_photoUpdateWithWhereUniqueWithoutTbl_productsInput[]
  updateMany?: Prisma.pro_photoUpdateManyWithWhereWithoutTbl_productsInput | Prisma.pro_photoUpdateManyWithWhereWithoutTbl_productsInput[]
  deleteMany?: Prisma.pro_photoScalarWhereInput | Prisma.pro_photoScalarWhereInput[]
}

export type pro_photoCreateWithoutTbl_productsInput = {
  p_path?: string | null
  user_Id?: number | null
}

export type pro_photoUncheckedCreateWithoutTbl_productsInput = {
  p_ID?: number
  p_path?: string | null
  user_Id?: number | null
}

export type pro_photoCreateOrConnectWithoutTbl_productsInput = {
  where: Prisma.pro_photoWhereUniqueInput
  create: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput>
}

export type pro_photoCreateManyTbl_productsInputEnvelope = {
  data: Prisma.pro_photoCreateManyTbl_productsInput | Prisma.pro_photoCreateManyTbl_productsInput[]
  skipDuplicates?: boolean
}

export type pro_photoUpsertWithWhereUniqueWithoutTbl_productsInput = {
  where: Prisma.pro_photoWhereUniqueInput
  update: Prisma.XOR<Prisma.pro_photoUpdateWithoutTbl_productsInput, Prisma.pro_photoUncheckedUpdateWithoutTbl_productsInput>
  create: Prisma.XOR<Prisma.pro_photoCreateWithoutTbl_productsInput, Prisma.pro_photoUncheckedCreateWithoutTbl_productsInput>
}

export type pro_photoUpdateWithWhereUniqueWithoutTbl_productsInput = {
  where: Prisma.pro_photoWhereUniqueInput
  data: Prisma.XOR<Prisma.pro_photoUpdateWithoutTbl_productsInput, Prisma.pro_photoUncheckedUpdateWithoutTbl_productsInput>
}

export type pro_photoUpdateManyWithWhereWithoutTbl_productsInput = {
  where: Prisma.pro_photoScalarWhereInput
  data: Prisma.XOR<Prisma.pro_photoUpdateManyMutationInput, Prisma.pro_photoUncheckedUpdateManyWithoutTbl_productsInput>
}

export type pro_photoScalarWhereInput = {
  AND?: Prisma.pro_photoScalarWhereInput | Prisma.pro_photoScalarWhereInput[]
  OR?: Prisma.pro_photoScalarWhereInput[]
  NOT?: Prisma.pro_photoScalarWhereInput | Prisma.pro_photoScalarWhereInput[]
  p_ID?: Prisma.IntFilter<"pro_photo"> | number
  pro_ID?: Prisma.IntNullableFilter<"pro_photo"> | number | null
  p_path?: Prisma.StringNullableFilter<"pro_photo"> | string | null
  user_Id?: Prisma.IntNullableFilter<"pro_photo"> | number | null
}

export type pro_photoCreateManyTbl_productsInput = {
  p_ID?: number
  p_path?: string | null
  user_Id?: number | null
}

export type pro_photoUpdateWithoutTbl_productsInput = {
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type pro_photoUncheckedUpdateWithoutTbl_productsInput = {
  p_ID?: Prisma.IntFieldUpdateOperationsInput | number
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type pro_photoUncheckedUpdateManyWithoutTbl_productsInput = {
  p_ID?: Prisma.IntFieldUpdateOperationsInput | number
  p_path?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type pro_photoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  p_ID?: boolean
  pro_ID?: boolean
  p_path?: boolean
  user_Id?: boolean
  tbl_products?: boolean | Prisma.pro_photo$tbl_productsArgs<ExtArgs>
}, ExtArgs["result"]["pro_photo"]>



export type pro_photoSelectScalar = {
  p_ID?: boolean
  pro_ID?: boolean
  p_path?: boolean
  user_Id?: boolean
}

export type pro_photoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"p_ID" | "pro_ID" | "p_path" | "user_Id", ExtArgs["result"]["pro_photo"]>
export type pro_photoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tbl_products?: boolean | Prisma.pro_photo$tbl_productsArgs<ExtArgs>
}

export type $pro_photoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "pro_photo"
  objects: {
    tbl_products: Prisma.$tbl_productsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    p_ID: number
    pro_ID: number | null
    p_path: string | null
    user_Id: number | null
  }, ExtArgs["result"]["pro_photo"]>
  composites: {}
}

export type pro_photoGetPayload<S extends boolean | null | undefined | pro_photoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$pro_photoPayload, S>

export type pro_photoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<pro_photoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Pro_photoCountAggregateInputType | true
  }

export interface pro_photoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pro_photo'], meta: { name: 'pro_photo' } }
  /**
   * Find zero or one Pro_photo that matches the filter.
   * @param {pro_photoFindUniqueArgs} args - Arguments to find a Pro_photo
   * @example
   * // Get one Pro_photo
   * const pro_photo = await prisma.pro_photo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends pro_photoFindUniqueArgs>(args: Prisma.SelectSubset<T, pro_photoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Pro_photo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {pro_photoFindUniqueOrThrowArgs} args - Arguments to find a Pro_photo
   * @example
   * // Get one Pro_photo
   * const pro_photo = await prisma.pro_photo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends pro_photoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, pro_photoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pro_photo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoFindFirstArgs} args - Arguments to find a Pro_photo
   * @example
   * // Get one Pro_photo
   * const pro_photo = await prisma.pro_photo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends pro_photoFindFirstArgs>(args?: Prisma.SelectSubset<T, pro_photoFindFirstArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pro_photo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoFindFirstOrThrowArgs} args - Arguments to find a Pro_photo
   * @example
   * // Get one Pro_photo
   * const pro_photo = await prisma.pro_photo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends pro_photoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, pro_photoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pro_photos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pro_photos
   * const pro_photos = await prisma.pro_photo.findMany()
   * 
   * // Get first 10 Pro_photos
   * const pro_photos = await prisma.pro_photo.findMany({ take: 10 })
   * 
   * // Only select the `p_ID`
   * const pro_photoWithP_IDOnly = await prisma.pro_photo.findMany({ select: { p_ID: true } })
   * 
   */
  findMany<T extends pro_photoFindManyArgs>(args?: Prisma.SelectSubset<T, pro_photoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Pro_photo.
   * @param {pro_photoCreateArgs} args - Arguments to create a Pro_photo.
   * @example
   * // Create one Pro_photo
   * const Pro_photo = await prisma.pro_photo.create({
   *   data: {
   *     // ... data to create a Pro_photo
   *   }
   * })
   * 
   */
  create<T extends pro_photoCreateArgs>(args: Prisma.SelectSubset<T, pro_photoCreateArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Pro_photos.
   * @param {pro_photoCreateManyArgs} args - Arguments to create many Pro_photos.
   * @example
   * // Create many Pro_photos
   * const pro_photo = await prisma.pro_photo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends pro_photoCreateManyArgs>(args?: Prisma.SelectSubset<T, pro_photoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Pro_photo.
   * @param {pro_photoDeleteArgs} args - Arguments to delete one Pro_photo.
   * @example
   * // Delete one Pro_photo
   * const Pro_photo = await prisma.pro_photo.delete({
   *   where: {
   *     // ... filter to delete one Pro_photo
   *   }
   * })
   * 
   */
  delete<T extends pro_photoDeleteArgs>(args: Prisma.SelectSubset<T, pro_photoDeleteArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Pro_photo.
   * @param {pro_photoUpdateArgs} args - Arguments to update one Pro_photo.
   * @example
   * // Update one Pro_photo
   * const pro_photo = await prisma.pro_photo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends pro_photoUpdateArgs>(args: Prisma.SelectSubset<T, pro_photoUpdateArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Pro_photos.
   * @param {pro_photoDeleteManyArgs} args - Arguments to filter Pro_photos to delete.
   * @example
   * // Delete a few Pro_photos
   * const { count } = await prisma.pro_photo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends pro_photoDeleteManyArgs>(args?: Prisma.SelectSubset<T, pro_photoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pro_photos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pro_photos
   * const pro_photo = await prisma.pro_photo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends pro_photoUpdateManyArgs>(args: Prisma.SelectSubset<T, pro_photoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Pro_photo.
   * @param {pro_photoUpsertArgs} args - Arguments to update or create a Pro_photo.
   * @example
   * // Update or create a Pro_photo
   * const pro_photo = await prisma.pro_photo.upsert({
   *   create: {
   *     // ... data to create a Pro_photo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Pro_photo we want to update
   *   }
   * })
   */
  upsert<T extends pro_photoUpsertArgs>(args: Prisma.SelectSubset<T, pro_photoUpsertArgs<ExtArgs>>): Prisma.Prisma__pro_photoClient<runtime.Types.Result.GetResult<Prisma.$pro_photoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Pro_photos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoCountArgs} args - Arguments to filter Pro_photos to count.
   * @example
   * // Count the number of Pro_photos
   * const count = await prisma.pro_photo.count({
   *   where: {
   *     // ... the filter for the Pro_photos we want to count
   *   }
   * })
  **/
  count<T extends pro_photoCountArgs>(
    args?: Prisma.Subset<T, pro_photoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Pro_photoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Pro_photo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Pro_photoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Pro_photoAggregateArgs>(args: Prisma.Subset<T, Pro_photoAggregateArgs>): Prisma.PrismaPromise<GetPro_photoAggregateType<T>>

  /**
   * Group by Pro_photo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {pro_photoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends pro_photoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: pro_photoGroupByArgs['orderBy'] }
      : { orderBy?: pro_photoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, pro_photoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPro_photoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the pro_photo model
 */
readonly fields: pro_photoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for pro_photo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__pro_photoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tbl_products<T extends Prisma.pro_photo$tbl_productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.pro_photo$tbl_productsArgs<ExtArgs>>): Prisma.Prisma__tbl_productsClient<runtime.Types.Result.GetResult<Prisma.$tbl_productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the pro_photo model
 */
export interface pro_photoFieldRefs {
  readonly p_ID: Prisma.FieldRef<"pro_photo", 'Int'>
  readonly pro_ID: Prisma.FieldRef<"pro_photo", 'Int'>
  readonly p_path: Prisma.FieldRef<"pro_photo", 'String'>
  readonly user_Id: Prisma.FieldRef<"pro_photo", 'Int'>
}
    

// Custom InputTypes
/**
 * pro_photo findUnique
 */
export type pro_photoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter, which pro_photo to fetch.
   */
  where: Prisma.pro_photoWhereUniqueInput
}

/**
 * pro_photo findUniqueOrThrow
 */
export type pro_photoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter, which pro_photo to fetch.
   */
  where: Prisma.pro_photoWhereUniqueInput
}

/**
 * pro_photo findFirst
 */
export type pro_photoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter, which pro_photo to fetch.
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of pro_photos to fetch.
   */
  orderBy?: Prisma.pro_photoOrderByWithRelationInput | Prisma.pro_photoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for pro_photos.
   */
  cursor?: Prisma.pro_photoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` pro_photos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` pro_photos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of pro_photos.
   */
  distinct?: Prisma.Pro_photoScalarFieldEnum | Prisma.Pro_photoScalarFieldEnum[]
}

/**
 * pro_photo findFirstOrThrow
 */
export type pro_photoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter, which pro_photo to fetch.
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of pro_photos to fetch.
   */
  orderBy?: Prisma.pro_photoOrderByWithRelationInput | Prisma.pro_photoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for pro_photos.
   */
  cursor?: Prisma.pro_photoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` pro_photos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` pro_photos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of pro_photos.
   */
  distinct?: Prisma.Pro_photoScalarFieldEnum | Prisma.Pro_photoScalarFieldEnum[]
}

/**
 * pro_photo findMany
 */
export type pro_photoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter, which pro_photos to fetch.
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of pro_photos to fetch.
   */
  orderBy?: Prisma.pro_photoOrderByWithRelationInput | Prisma.pro_photoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing pro_photos.
   */
  cursor?: Prisma.pro_photoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` pro_photos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` pro_photos.
   */
  skip?: number
  distinct?: Prisma.Pro_photoScalarFieldEnum | Prisma.Pro_photoScalarFieldEnum[]
}

/**
 * pro_photo create
 */
export type pro_photoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * The data needed to create a pro_photo.
   */
  data?: Prisma.XOR<Prisma.pro_photoCreateInput, Prisma.pro_photoUncheckedCreateInput>
}

/**
 * pro_photo createMany
 */
export type pro_photoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many pro_photos.
   */
  data: Prisma.pro_photoCreateManyInput | Prisma.pro_photoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * pro_photo update
 */
export type pro_photoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * The data needed to update a pro_photo.
   */
  data: Prisma.XOR<Prisma.pro_photoUpdateInput, Prisma.pro_photoUncheckedUpdateInput>
  /**
   * Choose, which pro_photo to update.
   */
  where: Prisma.pro_photoWhereUniqueInput
}

/**
 * pro_photo updateMany
 */
export type pro_photoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update pro_photos.
   */
  data: Prisma.XOR<Prisma.pro_photoUpdateManyMutationInput, Prisma.pro_photoUncheckedUpdateManyInput>
  /**
   * Filter which pro_photos to update
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * Limit how many pro_photos to update.
   */
  limit?: number
}

/**
 * pro_photo upsert
 */
export type pro_photoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * The filter to search for the pro_photo to update in case it exists.
   */
  where: Prisma.pro_photoWhereUniqueInput
  /**
   * In case the pro_photo found by the `where` argument doesn't exist, create a new pro_photo with this data.
   */
  create: Prisma.XOR<Prisma.pro_photoCreateInput, Prisma.pro_photoUncheckedCreateInput>
  /**
   * In case the pro_photo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.pro_photoUpdateInput, Prisma.pro_photoUncheckedUpdateInput>
}

/**
 * pro_photo delete
 */
export type pro_photoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
  /**
   * Filter which pro_photo to delete.
   */
  where: Prisma.pro_photoWhereUniqueInput
}

/**
 * pro_photo deleteMany
 */
export type pro_photoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which pro_photos to delete
   */
  where?: Prisma.pro_photoWhereInput
  /**
   * Limit how many pro_photos to delete.
   */
  limit?: number
}

/**
 * pro_photo.tbl_products
 */
export type pro_photo$tbl_productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_products
   */
  select?: Prisma.tbl_productsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_products
   */
  omit?: Prisma.tbl_productsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_productsInclude<ExtArgs> | null
  where?: Prisma.tbl_productsWhereInput
}

/**
 * pro_photo without action
 */
export type pro_photoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the pro_photo
   */
  select?: Prisma.pro_photoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the pro_photo
   */
  omit?: Prisma.pro_photoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.pro_photoInclude<ExtArgs> | null
}
