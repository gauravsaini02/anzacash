
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_paymethod` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_paymethod
 * 
 */
export type tbl_paymethodModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_paymethodPayload>

export type AggregateTbl_paymethod = {
  _count: Tbl_paymethodCountAggregateOutputType | null
  _avg: Tbl_paymethodAvgAggregateOutputType | null
  _sum: Tbl_paymethodSumAggregateOutputType | null
  _min: Tbl_paymethodMinAggregateOutputType | null
  _max: Tbl_paymethodMaxAggregateOutputType | null
}

export type Tbl_paymethodAvgAggregateOutputType = {
  md_ID: number | null
}

export type Tbl_paymethodSumAggregateOutputType = {
  md_ID: number | null
}

export type Tbl_paymethodMinAggregateOutputType = {
  md_ID: number | null
  md_country: string | null
  md_methods: string | null
}

export type Tbl_paymethodMaxAggregateOutputType = {
  md_ID: number | null
  md_country: string | null
  md_methods: string | null
}

export type Tbl_paymethodCountAggregateOutputType = {
  md_ID: number
  md_country: number
  md_methods: number
  _all: number
}


export type Tbl_paymethodAvgAggregateInputType = {
  md_ID?: true
}

export type Tbl_paymethodSumAggregateInputType = {
  md_ID?: true
}

export type Tbl_paymethodMinAggregateInputType = {
  md_ID?: true
  md_country?: true
  md_methods?: true
}

export type Tbl_paymethodMaxAggregateInputType = {
  md_ID?: true
  md_country?: true
  md_methods?: true
}

export type Tbl_paymethodCountAggregateInputType = {
  md_ID?: true
  md_country?: true
  md_methods?: true
  _all?: true
}

export type Tbl_paymethodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_paymethod to aggregate.
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_paymethods to fetch.
   */
  orderBy?: Prisma.tbl_paymethodOrderByWithRelationInput | Prisma.tbl_paymethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_paymethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_paymethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_paymethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_paymethods
  **/
  _count?: true | Tbl_paymethodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_paymethodAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_paymethodSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_paymethodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_paymethodMaxAggregateInputType
}

export type GetTbl_paymethodAggregateType<T extends Tbl_paymethodAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_paymethod]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_paymethod[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_paymethod[P]>
}




export type tbl_paymethodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_paymethodWhereInput
  orderBy?: Prisma.tbl_paymethodOrderByWithAggregationInput | Prisma.tbl_paymethodOrderByWithAggregationInput[]
  by: Prisma.Tbl_paymethodScalarFieldEnum[] | Prisma.Tbl_paymethodScalarFieldEnum
  having?: Prisma.tbl_paymethodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_paymethodCountAggregateInputType | true
  _avg?: Tbl_paymethodAvgAggregateInputType
  _sum?: Tbl_paymethodSumAggregateInputType
  _min?: Tbl_paymethodMinAggregateInputType
  _max?: Tbl_paymethodMaxAggregateInputType
}

export type Tbl_paymethodGroupByOutputType = {
  md_ID: number
  md_country: string | null
  md_methods: string | null
  _count: Tbl_paymethodCountAggregateOutputType | null
  _avg: Tbl_paymethodAvgAggregateOutputType | null
  _sum: Tbl_paymethodSumAggregateOutputType | null
  _min: Tbl_paymethodMinAggregateOutputType | null
  _max: Tbl_paymethodMaxAggregateOutputType | null
}

type GetTbl_paymethodGroupByPayload<T extends tbl_paymethodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_paymethodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_paymethodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_paymethodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_paymethodGroupByOutputType[P]>
      }
    >
  >



export type tbl_paymethodWhereInput = {
  AND?: Prisma.tbl_paymethodWhereInput | Prisma.tbl_paymethodWhereInput[]
  OR?: Prisma.tbl_paymethodWhereInput[]
  NOT?: Prisma.tbl_paymethodWhereInput | Prisma.tbl_paymethodWhereInput[]
  md_ID?: Prisma.IntFilter<"tbl_paymethod"> | number
  md_country?: Prisma.StringNullableFilter<"tbl_paymethod"> | string | null
  md_methods?: Prisma.StringNullableFilter<"tbl_paymethod"> | string | null
}

export type tbl_paymethodOrderByWithRelationInput = {
  md_ID?: Prisma.SortOrder
  md_country?: Prisma.SortOrderInput | Prisma.SortOrder
  md_methods?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_paymethodOrderByRelevanceInput
}

export type tbl_paymethodWhereUniqueInput = Prisma.AtLeast<{
  md_ID?: number
  AND?: Prisma.tbl_paymethodWhereInput | Prisma.tbl_paymethodWhereInput[]
  OR?: Prisma.tbl_paymethodWhereInput[]
  NOT?: Prisma.tbl_paymethodWhereInput | Prisma.tbl_paymethodWhereInput[]
  md_country?: Prisma.StringNullableFilter<"tbl_paymethod"> | string | null
  md_methods?: Prisma.StringNullableFilter<"tbl_paymethod"> | string | null
}, "md_ID">

export type tbl_paymethodOrderByWithAggregationInput = {
  md_ID?: Prisma.SortOrder
  md_country?: Prisma.SortOrderInput | Prisma.SortOrder
  md_methods?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_paymethodCountOrderByAggregateInput
  _avg?: Prisma.tbl_paymethodAvgOrderByAggregateInput
  _max?: Prisma.tbl_paymethodMaxOrderByAggregateInput
  _min?: Prisma.tbl_paymethodMinOrderByAggregateInput
  _sum?: Prisma.tbl_paymethodSumOrderByAggregateInput
}

export type tbl_paymethodScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_paymethodScalarWhereWithAggregatesInput | Prisma.tbl_paymethodScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_paymethodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_paymethodScalarWhereWithAggregatesInput | Prisma.tbl_paymethodScalarWhereWithAggregatesInput[]
  md_ID?: Prisma.IntWithAggregatesFilter<"tbl_paymethod"> | number
  md_country?: Prisma.StringNullableWithAggregatesFilter<"tbl_paymethod"> | string | null
  md_methods?: Prisma.StringNullableWithAggregatesFilter<"tbl_paymethod"> | string | null
}

export type tbl_paymethodCreateInput = {
  md_country?: string | null
  md_methods?: string | null
}

export type tbl_paymethodUncheckedCreateInput = {
  md_ID?: number
  md_country?: string | null
  md_methods?: string | null
}

export type tbl_paymethodUpdateInput = {
  md_country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  md_methods?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_paymethodUncheckedUpdateInput = {
  md_ID?: Prisma.IntFieldUpdateOperationsInput | number
  md_country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  md_methods?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_paymethodCreateManyInput = {
  md_ID?: number
  md_country?: string | null
  md_methods?: string | null
}

export type tbl_paymethodUpdateManyMutationInput = {
  md_country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  md_methods?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_paymethodUncheckedUpdateManyInput = {
  md_ID?: Prisma.IntFieldUpdateOperationsInput | number
  md_country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  md_methods?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_paymethodOrderByRelevanceInput = {
  fields: Prisma.tbl_paymethodOrderByRelevanceFieldEnum | Prisma.tbl_paymethodOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_paymethodCountOrderByAggregateInput = {
  md_ID?: Prisma.SortOrder
  md_country?: Prisma.SortOrder
  md_methods?: Prisma.SortOrder
}

export type tbl_paymethodAvgOrderByAggregateInput = {
  md_ID?: Prisma.SortOrder
}

export type tbl_paymethodMaxOrderByAggregateInput = {
  md_ID?: Prisma.SortOrder
  md_country?: Prisma.SortOrder
  md_methods?: Prisma.SortOrder
}

export type tbl_paymethodMinOrderByAggregateInput = {
  md_ID?: Prisma.SortOrder
  md_country?: Prisma.SortOrder
  md_methods?: Prisma.SortOrder
}

export type tbl_paymethodSumOrderByAggregateInput = {
  md_ID?: Prisma.SortOrder
}



export type tbl_paymethodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  md_ID?: boolean
  md_country?: boolean
  md_methods?: boolean
}, ExtArgs["result"]["tbl_paymethod"]>



export type tbl_paymethodSelectScalar = {
  md_ID?: boolean
  md_country?: boolean
  md_methods?: boolean
}

export type tbl_paymethodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"md_ID" | "md_country" | "md_methods", ExtArgs["result"]["tbl_paymethod"]>

export type $tbl_paymethodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_paymethod"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    md_ID: number
    md_country: string | null
    md_methods: string | null
  }, ExtArgs["result"]["tbl_paymethod"]>
  composites: {}
}

export type tbl_paymethodGetPayload<S extends boolean | null | undefined | tbl_paymethodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload, S>

export type tbl_paymethodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_paymethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_paymethodCountAggregateInputType | true
  }

export interface tbl_paymethodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_paymethod'], meta: { name: 'tbl_paymethod' } }
  /**
   * Find zero or one Tbl_paymethod that matches the filter.
   * @param {tbl_paymethodFindUniqueArgs} args - Arguments to find a Tbl_paymethod
   * @example
   * // Get one Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_paymethodFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_paymethodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_paymethod that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_paymethodFindUniqueOrThrowArgs} args - Arguments to find a Tbl_paymethod
   * @example
   * // Get one Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_paymethodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_paymethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_paymethod that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodFindFirstArgs} args - Arguments to find a Tbl_paymethod
   * @example
   * // Get one Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_paymethodFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_paymethodFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_paymethod that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodFindFirstOrThrowArgs} args - Arguments to find a Tbl_paymethod
   * @example
   * // Get one Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_paymethodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_paymethodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_paymethods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_paymethods
   * const tbl_paymethods = await prisma.tbl_paymethod.findMany()
   * 
   * // Get first 10 Tbl_paymethods
   * const tbl_paymethods = await prisma.tbl_paymethod.findMany({ take: 10 })
   * 
   * // Only select the `md_ID`
   * const tbl_paymethodWithMd_IDOnly = await prisma.tbl_paymethod.findMany({ select: { md_ID: true } })
   * 
   */
  findMany<T extends tbl_paymethodFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_paymethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_paymethod.
   * @param {tbl_paymethodCreateArgs} args - Arguments to create a Tbl_paymethod.
   * @example
   * // Create one Tbl_paymethod
   * const Tbl_paymethod = await prisma.tbl_paymethod.create({
   *   data: {
   *     // ... data to create a Tbl_paymethod
   *   }
   * })
   * 
   */
  create<T extends tbl_paymethodCreateArgs>(args: Prisma.SelectSubset<T, tbl_paymethodCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_paymethods.
   * @param {tbl_paymethodCreateManyArgs} args - Arguments to create many Tbl_paymethods.
   * @example
   * // Create many Tbl_paymethods
   * const tbl_paymethod = await prisma.tbl_paymethod.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_paymethodCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_paymethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_paymethod.
   * @param {tbl_paymethodDeleteArgs} args - Arguments to delete one Tbl_paymethod.
   * @example
   * // Delete one Tbl_paymethod
   * const Tbl_paymethod = await prisma.tbl_paymethod.delete({
   *   where: {
   *     // ... filter to delete one Tbl_paymethod
   *   }
   * })
   * 
   */
  delete<T extends tbl_paymethodDeleteArgs>(args: Prisma.SelectSubset<T, tbl_paymethodDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_paymethod.
   * @param {tbl_paymethodUpdateArgs} args - Arguments to update one Tbl_paymethod.
   * @example
   * // Update one Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_paymethodUpdateArgs>(args: Prisma.SelectSubset<T, tbl_paymethodUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_paymethods.
   * @param {tbl_paymethodDeleteManyArgs} args - Arguments to filter Tbl_paymethods to delete.
   * @example
   * // Delete a few Tbl_paymethods
   * const { count } = await prisma.tbl_paymethod.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_paymethodDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_paymethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_paymethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_paymethods
   * const tbl_paymethod = await prisma.tbl_paymethod.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_paymethodUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_paymethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_paymethod.
   * @param {tbl_paymethodUpsertArgs} args - Arguments to update or create a Tbl_paymethod.
   * @example
   * // Update or create a Tbl_paymethod
   * const tbl_paymethod = await prisma.tbl_paymethod.upsert({
   *   create: {
   *     // ... data to create a Tbl_paymethod
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_paymethod we want to update
   *   }
   * })
   */
  upsert<T extends tbl_paymethodUpsertArgs>(args: Prisma.SelectSubset<T, tbl_paymethodUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_paymethodClient<runtime.Types.Result.GetResult<Prisma.$tbl_paymethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_paymethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodCountArgs} args - Arguments to filter Tbl_paymethods to count.
   * @example
   * // Count the number of Tbl_paymethods
   * const count = await prisma.tbl_paymethod.count({
   *   where: {
   *     // ... the filter for the Tbl_paymethods we want to count
   *   }
   * })
  **/
  count<T extends tbl_paymethodCountArgs>(
    args?: Prisma.Subset<T, tbl_paymethodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_paymethodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_paymethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_paymethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_paymethodAggregateArgs>(args: Prisma.Subset<T, Tbl_paymethodAggregateArgs>): Prisma.PrismaPromise<GetTbl_paymethodAggregateType<T>>

  /**
   * Group by Tbl_paymethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_paymethodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_paymethodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_paymethodGroupByArgs['orderBy'] }
      : { orderBy?: tbl_paymethodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_paymethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_paymethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_paymethod model
 */
readonly fields: tbl_paymethodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_paymethod.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_paymethodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_paymethod model
 */
export interface tbl_paymethodFieldRefs {
  readonly md_ID: Prisma.FieldRef<"tbl_paymethod", 'Int'>
  readonly md_country: Prisma.FieldRef<"tbl_paymethod", 'String'>
  readonly md_methods: Prisma.FieldRef<"tbl_paymethod", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_paymethod findUnique
 */
export type tbl_paymethodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter, which tbl_paymethod to fetch.
   */
  where: Prisma.tbl_paymethodWhereUniqueInput
}

/**
 * tbl_paymethod findUniqueOrThrow
 */
export type tbl_paymethodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter, which tbl_paymethod to fetch.
   */
  where: Prisma.tbl_paymethodWhereUniqueInput
}

/**
 * tbl_paymethod findFirst
 */
export type tbl_paymethodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter, which tbl_paymethod to fetch.
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_paymethods to fetch.
   */
  orderBy?: Prisma.tbl_paymethodOrderByWithRelationInput | Prisma.tbl_paymethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_paymethods.
   */
  cursor?: Prisma.tbl_paymethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_paymethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_paymethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_paymethods.
   */
  distinct?: Prisma.Tbl_paymethodScalarFieldEnum | Prisma.Tbl_paymethodScalarFieldEnum[]
}

/**
 * tbl_paymethod findFirstOrThrow
 */
export type tbl_paymethodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter, which tbl_paymethod to fetch.
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_paymethods to fetch.
   */
  orderBy?: Prisma.tbl_paymethodOrderByWithRelationInput | Prisma.tbl_paymethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_paymethods.
   */
  cursor?: Prisma.tbl_paymethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_paymethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_paymethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_paymethods.
   */
  distinct?: Prisma.Tbl_paymethodScalarFieldEnum | Prisma.Tbl_paymethodScalarFieldEnum[]
}

/**
 * tbl_paymethod findMany
 */
export type tbl_paymethodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter, which tbl_paymethods to fetch.
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_paymethods to fetch.
   */
  orderBy?: Prisma.tbl_paymethodOrderByWithRelationInput | Prisma.tbl_paymethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_paymethods.
   */
  cursor?: Prisma.tbl_paymethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_paymethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_paymethods.
   */
  skip?: number
  distinct?: Prisma.Tbl_paymethodScalarFieldEnum | Prisma.Tbl_paymethodScalarFieldEnum[]
}

/**
 * tbl_paymethod create
 */
export type tbl_paymethodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_paymethod.
   */
  data?: Prisma.XOR<Prisma.tbl_paymethodCreateInput, Prisma.tbl_paymethodUncheckedCreateInput>
}

/**
 * tbl_paymethod createMany
 */
export type tbl_paymethodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_paymethods.
   */
  data: Prisma.tbl_paymethodCreateManyInput | Prisma.tbl_paymethodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_paymethod update
 */
export type tbl_paymethodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_paymethod.
   */
  data: Prisma.XOR<Prisma.tbl_paymethodUpdateInput, Prisma.tbl_paymethodUncheckedUpdateInput>
  /**
   * Choose, which tbl_paymethod to update.
   */
  where: Prisma.tbl_paymethodWhereUniqueInput
}

/**
 * tbl_paymethod updateMany
 */
export type tbl_paymethodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_paymethods.
   */
  data: Prisma.XOR<Prisma.tbl_paymethodUpdateManyMutationInput, Prisma.tbl_paymethodUncheckedUpdateManyInput>
  /**
   * Filter which tbl_paymethods to update
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * Limit how many tbl_paymethods to update.
   */
  limit?: number
}

/**
 * tbl_paymethod upsert
 */
export type tbl_paymethodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_paymethod to update in case it exists.
   */
  where: Prisma.tbl_paymethodWhereUniqueInput
  /**
   * In case the tbl_paymethod found by the `where` argument doesn't exist, create a new tbl_paymethod with this data.
   */
  create: Prisma.XOR<Prisma.tbl_paymethodCreateInput, Prisma.tbl_paymethodUncheckedCreateInput>
  /**
   * In case the tbl_paymethod was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_paymethodUpdateInput, Prisma.tbl_paymethodUncheckedUpdateInput>
}

/**
 * tbl_paymethod delete
 */
export type tbl_paymethodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
  /**
   * Filter which tbl_paymethod to delete.
   */
  where: Prisma.tbl_paymethodWhereUniqueInput
}

/**
 * tbl_paymethod deleteMany
 */
export type tbl_paymethodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_paymethods to delete
   */
  where?: Prisma.tbl_paymethodWhereInput
  /**
   * Limit how many tbl_paymethods to delete.
   */
  limit?: number
}

/**
 * tbl_paymethod without action
 */
export type tbl_paymethodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_paymethod
   */
  select?: Prisma.tbl_paymethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_paymethod
   */
  omit?: Prisma.tbl_paymethodOmit<ExtArgs> | null
}
