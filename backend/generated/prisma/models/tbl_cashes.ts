
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_cashes` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_cashes
 * 
 */
export type tbl_cashesModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_cashesPayload>

export type AggregateTbl_cashes = {
  _count: Tbl_cashesCountAggregateOutputType | null
  _avg: Tbl_cashesAvgAggregateOutputType | null
  _sum: Tbl_cashesSumAggregateOutputType | null
  _min: Tbl_cashesMinAggregateOutputType | null
  _max: Tbl_cashesMaxAggregateOutputType | null
}

export type Tbl_cashesAvgAggregateOutputType = {
  c_Id: number | null
  data_ID: number | null
  c_amount: number | null
}

export type Tbl_cashesSumAggregateOutputType = {
  c_Id: number | null
  data_ID: number | null
  c_amount: number | null
}

export type Tbl_cashesMinAggregateOutputType = {
  c_Id: number | null
  c_type: string | null
  data_ID: number | null
  c_amount: number | null
  c_uza: string | null
  c_status: string | null
}

export type Tbl_cashesMaxAggregateOutputType = {
  c_Id: number | null
  c_type: string | null
  data_ID: number | null
  c_amount: number | null
  c_uza: string | null
  c_status: string | null
}

export type Tbl_cashesCountAggregateOutputType = {
  c_Id: number
  c_type: number
  data_ID: number
  c_amount: number
  c_uza: number
  c_status: number
  _all: number
}


export type Tbl_cashesAvgAggregateInputType = {
  c_Id?: true
  data_ID?: true
  c_amount?: true
}

export type Tbl_cashesSumAggregateInputType = {
  c_Id?: true
  data_ID?: true
  c_amount?: true
}

export type Tbl_cashesMinAggregateInputType = {
  c_Id?: true
  c_type?: true
  data_ID?: true
  c_amount?: true
  c_uza?: true
  c_status?: true
}

export type Tbl_cashesMaxAggregateInputType = {
  c_Id?: true
  c_type?: true
  data_ID?: true
  c_amount?: true
  c_uza?: true
  c_status?: true
}

export type Tbl_cashesCountAggregateInputType = {
  c_Id?: true
  c_type?: true
  data_ID?: true
  c_amount?: true
  c_uza?: true
  c_status?: true
  _all?: true
}

export type Tbl_cashesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_cashes to aggregate.
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_cashes to fetch.
   */
  orderBy?: Prisma.tbl_cashesOrderByWithRelationInput | Prisma.tbl_cashesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_cashesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_cashes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_cashes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_cashes
  **/
  _count?: true | Tbl_cashesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_cashesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_cashesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_cashesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_cashesMaxAggregateInputType
}

export type GetTbl_cashesAggregateType<T extends Tbl_cashesAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_cashes]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_cashes[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_cashes[P]>
}




export type tbl_cashesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_cashesWhereInput
  orderBy?: Prisma.tbl_cashesOrderByWithAggregationInput | Prisma.tbl_cashesOrderByWithAggregationInput[]
  by: Prisma.Tbl_cashesScalarFieldEnum[] | Prisma.Tbl_cashesScalarFieldEnum
  having?: Prisma.tbl_cashesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_cashesCountAggregateInputType | true
  _avg?: Tbl_cashesAvgAggregateInputType
  _sum?: Tbl_cashesSumAggregateInputType
  _min?: Tbl_cashesMinAggregateInputType
  _max?: Tbl_cashesMaxAggregateInputType
}

export type Tbl_cashesGroupByOutputType = {
  c_Id: number
  c_type: string | null
  data_ID: number | null
  c_amount: number | null
  c_uza: string | null
  c_status: string | null
  _count: Tbl_cashesCountAggregateOutputType | null
  _avg: Tbl_cashesAvgAggregateOutputType | null
  _sum: Tbl_cashesSumAggregateOutputType | null
  _min: Tbl_cashesMinAggregateOutputType | null
  _max: Tbl_cashesMaxAggregateOutputType | null
}

type GetTbl_cashesGroupByPayload<T extends tbl_cashesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_cashesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_cashesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_cashesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_cashesGroupByOutputType[P]>
      }
    >
  >



export type tbl_cashesWhereInput = {
  AND?: Prisma.tbl_cashesWhereInput | Prisma.tbl_cashesWhereInput[]
  OR?: Prisma.tbl_cashesWhereInput[]
  NOT?: Prisma.tbl_cashesWhereInput | Prisma.tbl_cashesWhereInput[]
  c_Id?: Prisma.IntFilter<"tbl_cashes"> | number
  c_type?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
  data_ID?: Prisma.IntNullableFilter<"tbl_cashes"> | number | null
  c_amount?: Prisma.FloatNullableFilter<"tbl_cashes"> | number | null
  c_uza?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
  c_status?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
}

export type tbl_cashesOrderByWithRelationInput = {
  c_Id?: Prisma.SortOrder
  c_type?: Prisma.SortOrderInput | Prisma.SortOrder
  data_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  c_amount?: Prisma.SortOrderInput | Prisma.SortOrder
  c_uza?: Prisma.SortOrderInput | Prisma.SortOrder
  c_status?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_cashesOrderByRelevanceInput
}

export type tbl_cashesWhereUniqueInput = Prisma.AtLeast<{
  c_Id?: number
  AND?: Prisma.tbl_cashesWhereInput | Prisma.tbl_cashesWhereInput[]
  OR?: Prisma.tbl_cashesWhereInput[]
  NOT?: Prisma.tbl_cashesWhereInput | Prisma.tbl_cashesWhereInput[]
  c_type?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
  data_ID?: Prisma.IntNullableFilter<"tbl_cashes"> | number | null
  c_amount?: Prisma.FloatNullableFilter<"tbl_cashes"> | number | null
  c_uza?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
  c_status?: Prisma.StringNullableFilter<"tbl_cashes"> | string | null
}, "c_Id">

export type tbl_cashesOrderByWithAggregationInput = {
  c_Id?: Prisma.SortOrder
  c_type?: Prisma.SortOrderInput | Prisma.SortOrder
  data_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  c_amount?: Prisma.SortOrderInput | Prisma.SortOrder
  c_uza?: Prisma.SortOrderInput | Prisma.SortOrder
  c_status?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_cashesCountOrderByAggregateInput
  _avg?: Prisma.tbl_cashesAvgOrderByAggregateInput
  _max?: Prisma.tbl_cashesMaxOrderByAggregateInput
  _min?: Prisma.tbl_cashesMinOrderByAggregateInput
  _sum?: Prisma.tbl_cashesSumOrderByAggregateInput
}

export type tbl_cashesScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_cashesScalarWhereWithAggregatesInput | Prisma.tbl_cashesScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_cashesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_cashesScalarWhereWithAggregatesInput | Prisma.tbl_cashesScalarWhereWithAggregatesInput[]
  c_Id?: Prisma.IntWithAggregatesFilter<"tbl_cashes"> | number
  c_type?: Prisma.StringNullableWithAggregatesFilter<"tbl_cashes"> | string | null
  data_ID?: Prisma.IntNullableWithAggregatesFilter<"tbl_cashes"> | number | null
  c_amount?: Prisma.FloatNullableWithAggregatesFilter<"tbl_cashes"> | number | null
  c_uza?: Prisma.StringNullableWithAggregatesFilter<"tbl_cashes"> | string | null
  c_status?: Prisma.StringNullableWithAggregatesFilter<"tbl_cashes"> | string | null
}

export type tbl_cashesCreateInput = {
  c_type?: string | null
  data_ID?: number | null
  c_amount?: number | null
  c_uza?: string | null
  c_status?: string | null
}

export type tbl_cashesUncheckedCreateInput = {
  c_Id?: number
  c_type?: string | null
  data_ID?: number | null
  c_amount?: number | null
  c_uza?: string | null
  c_status?: string | null
}

export type tbl_cashesUpdateInput = {
  c_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  c_uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_cashesUncheckedUpdateInput = {
  c_Id?: Prisma.IntFieldUpdateOperationsInput | number
  c_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  c_uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_cashesCreateManyInput = {
  c_Id?: number
  c_type?: string | null
  data_ID?: number | null
  c_amount?: number | null
  c_uza?: string | null
  c_status?: string | null
}

export type tbl_cashesUpdateManyMutationInput = {
  c_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  c_uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_cashesUncheckedUpdateManyInput = {
  c_Id?: Prisma.IntFieldUpdateOperationsInput | number
  c_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  c_uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_cashesOrderByRelevanceInput = {
  fields: Prisma.tbl_cashesOrderByRelevanceFieldEnum | Prisma.tbl_cashesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_cashesCountOrderByAggregateInput = {
  c_Id?: Prisma.SortOrder
  c_type?: Prisma.SortOrder
  data_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_uza?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type tbl_cashesAvgOrderByAggregateInput = {
  c_Id?: Prisma.SortOrder
  data_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
}

export type tbl_cashesMaxOrderByAggregateInput = {
  c_Id?: Prisma.SortOrder
  c_type?: Prisma.SortOrder
  data_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_uza?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type tbl_cashesMinOrderByAggregateInput = {
  c_Id?: Prisma.SortOrder
  c_type?: Prisma.SortOrder
  data_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_uza?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type tbl_cashesSumOrderByAggregateInput = {
  c_Id?: Prisma.SortOrder
  data_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
}



export type tbl_cashesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  c_Id?: boolean
  c_type?: boolean
  data_ID?: boolean
  c_amount?: boolean
  c_uza?: boolean
  c_status?: boolean
}, ExtArgs["result"]["tbl_cashes"]>



export type tbl_cashesSelectScalar = {
  c_Id?: boolean
  c_type?: boolean
  data_ID?: boolean
  c_amount?: boolean
  c_uza?: boolean
  c_status?: boolean
}

export type tbl_cashesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"c_Id" | "c_type" | "data_ID" | "c_amount" | "c_uza" | "c_status", ExtArgs["result"]["tbl_cashes"]>

export type $tbl_cashesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_cashes"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    c_Id: number
    c_type: string | null
    data_ID: number | null
    c_amount: number | null
    c_uza: string | null
    c_status: string | null
  }, ExtArgs["result"]["tbl_cashes"]>
  composites: {}
}

export type tbl_cashesGetPayload<S extends boolean | null | undefined | tbl_cashesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload, S>

export type tbl_cashesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_cashesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_cashesCountAggregateInputType | true
  }

export interface tbl_cashesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_cashes'], meta: { name: 'tbl_cashes' } }
  /**
   * Find zero or one Tbl_cashes that matches the filter.
   * @param {tbl_cashesFindUniqueArgs} args - Arguments to find a Tbl_cashes
   * @example
   * // Get one Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_cashesFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_cashesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_cashes that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_cashesFindUniqueOrThrowArgs} args - Arguments to find a Tbl_cashes
   * @example
   * // Get one Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_cashesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_cashesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_cashes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesFindFirstArgs} args - Arguments to find a Tbl_cashes
   * @example
   * // Get one Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_cashesFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_cashesFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_cashes that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesFindFirstOrThrowArgs} args - Arguments to find a Tbl_cashes
   * @example
   * // Get one Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_cashesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_cashesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_cashes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findMany()
   * 
   * // Get first 10 Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.findMany({ take: 10 })
   * 
   * // Only select the `c_Id`
   * const tbl_cashesWithC_IdOnly = await prisma.tbl_cashes.findMany({ select: { c_Id: true } })
   * 
   */
  findMany<T extends tbl_cashesFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_cashesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_cashes.
   * @param {tbl_cashesCreateArgs} args - Arguments to create a Tbl_cashes.
   * @example
   * // Create one Tbl_cashes
   * const Tbl_cashes = await prisma.tbl_cashes.create({
   *   data: {
   *     // ... data to create a Tbl_cashes
   *   }
   * })
   * 
   */
  create<T extends tbl_cashesCreateArgs>(args: Prisma.SelectSubset<T, tbl_cashesCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_cashes.
   * @param {tbl_cashesCreateManyArgs} args - Arguments to create many Tbl_cashes.
   * @example
   * // Create many Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_cashesCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_cashesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_cashes.
   * @param {tbl_cashesDeleteArgs} args - Arguments to delete one Tbl_cashes.
   * @example
   * // Delete one Tbl_cashes
   * const Tbl_cashes = await prisma.tbl_cashes.delete({
   *   where: {
   *     // ... filter to delete one Tbl_cashes
   *   }
   * })
   * 
   */
  delete<T extends tbl_cashesDeleteArgs>(args: Prisma.SelectSubset<T, tbl_cashesDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_cashes.
   * @param {tbl_cashesUpdateArgs} args - Arguments to update one Tbl_cashes.
   * @example
   * // Update one Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_cashesUpdateArgs>(args: Prisma.SelectSubset<T, tbl_cashesUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_cashes.
   * @param {tbl_cashesDeleteManyArgs} args - Arguments to filter Tbl_cashes to delete.
   * @example
   * // Delete a few Tbl_cashes
   * const { count } = await prisma.tbl_cashes.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_cashesDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_cashesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_cashes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_cashesUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_cashesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_cashes.
   * @param {tbl_cashesUpsertArgs} args - Arguments to update or create a Tbl_cashes.
   * @example
   * // Update or create a Tbl_cashes
   * const tbl_cashes = await prisma.tbl_cashes.upsert({
   *   create: {
   *     // ... data to create a Tbl_cashes
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_cashes we want to update
   *   }
   * })
   */
  upsert<T extends tbl_cashesUpsertArgs>(args: Prisma.SelectSubset<T, tbl_cashesUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_cashesClient<runtime.Types.Result.GetResult<Prisma.$tbl_cashesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_cashes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesCountArgs} args - Arguments to filter Tbl_cashes to count.
   * @example
   * // Count the number of Tbl_cashes
   * const count = await prisma.tbl_cashes.count({
   *   where: {
   *     // ... the filter for the Tbl_cashes we want to count
   *   }
   * })
  **/
  count<T extends tbl_cashesCountArgs>(
    args?: Prisma.Subset<T, tbl_cashesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_cashesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_cashes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_cashesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_cashesAggregateArgs>(args: Prisma.Subset<T, Tbl_cashesAggregateArgs>): Prisma.PrismaPromise<GetTbl_cashesAggregateType<T>>

  /**
   * Group by Tbl_cashes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_cashesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_cashesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_cashesGroupByArgs['orderBy'] }
      : { orderBy?: tbl_cashesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_cashesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_cashesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_cashes model
 */
readonly fields: tbl_cashesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_cashes.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_cashesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_cashes model
 */
export interface tbl_cashesFieldRefs {
  readonly c_Id: Prisma.FieldRef<"tbl_cashes", 'Int'>
  readonly c_type: Prisma.FieldRef<"tbl_cashes", 'String'>
  readonly data_ID: Prisma.FieldRef<"tbl_cashes", 'Int'>
  readonly c_amount: Prisma.FieldRef<"tbl_cashes", 'Float'>
  readonly c_uza: Prisma.FieldRef<"tbl_cashes", 'String'>
  readonly c_status: Prisma.FieldRef<"tbl_cashes", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_cashes findUnique
 */
export type tbl_cashesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_cashes to fetch.
   */
  where: Prisma.tbl_cashesWhereUniqueInput
}

/**
 * tbl_cashes findUniqueOrThrow
 */
export type tbl_cashesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_cashes to fetch.
   */
  where: Prisma.tbl_cashesWhereUniqueInput
}

/**
 * tbl_cashes findFirst
 */
export type tbl_cashesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_cashes to fetch.
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_cashes to fetch.
   */
  orderBy?: Prisma.tbl_cashesOrderByWithRelationInput | Prisma.tbl_cashesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_cashes.
   */
  cursor?: Prisma.tbl_cashesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_cashes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_cashes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_cashes.
   */
  distinct?: Prisma.Tbl_cashesScalarFieldEnum | Prisma.Tbl_cashesScalarFieldEnum[]
}

/**
 * tbl_cashes findFirstOrThrow
 */
export type tbl_cashesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_cashes to fetch.
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_cashes to fetch.
   */
  orderBy?: Prisma.tbl_cashesOrderByWithRelationInput | Prisma.tbl_cashesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_cashes.
   */
  cursor?: Prisma.tbl_cashesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_cashes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_cashes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_cashes.
   */
  distinct?: Prisma.Tbl_cashesScalarFieldEnum | Prisma.Tbl_cashesScalarFieldEnum[]
}

/**
 * tbl_cashes findMany
 */
export type tbl_cashesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_cashes to fetch.
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_cashes to fetch.
   */
  orderBy?: Prisma.tbl_cashesOrderByWithRelationInput | Prisma.tbl_cashesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_cashes.
   */
  cursor?: Prisma.tbl_cashesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_cashes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_cashes.
   */
  skip?: number
  distinct?: Prisma.Tbl_cashesScalarFieldEnum | Prisma.Tbl_cashesScalarFieldEnum[]
}

/**
 * tbl_cashes create
 */
export type tbl_cashesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_cashes.
   */
  data?: Prisma.XOR<Prisma.tbl_cashesCreateInput, Prisma.tbl_cashesUncheckedCreateInput>
}

/**
 * tbl_cashes createMany
 */
export type tbl_cashesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_cashes.
   */
  data: Prisma.tbl_cashesCreateManyInput | Prisma.tbl_cashesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_cashes update
 */
export type tbl_cashesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_cashes.
   */
  data: Prisma.XOR<Prisma.tbl_cashesUpdateInput, Prisma.tbl_cashesUncheckedUpdateInput>
  /**
   * Choose, which tbl_cashes to update.
   */
  where: Prisma.tbl_cashesWhereUniqueInput
}

/**
 * tbl_cashes updateMany
 */
export type tbl_cashesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_cashes.
   */
  data: Prisma.XOR<Prisma.tbl_cashesUpdateManyMutationInput, Prisma.tbl_cashesUncheckedUpdateManyInput>
  /**
   * Filter which tbl_cashes to update
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * Limit how many tbl_cashes to update.
   */
  limit?: number
}

/**
 * tbl_cashes upsert
 */
export type tbl_cashesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_cashes to update in case it exists.
   */
  where: Prisma.tbl_cashesWhereUniqueInput
  /**
   * In case the tbl_cashes found by the `where` argument doesn't exist, create a new tbl_cashes with this data.
   */
  create: Prisma.XOR<Prisma.tbl_cashesCreateInput, Prisma.tbl_cashesUncheckedCreateInput>
  /**
   * In case the tbl_cashes was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_cashesUpdateInput, Prisma.tbl_cashesUncheckedUpdateInput>
}

/**
 * tbl_cashes delete
 */
export type tbl_cashesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
  /**
   * Filter which tbl_cashes to delete.
   */
  where: Prisma.tbl_cashesWhereUniqueInput
}

/**
 * tbl_cashes deleteMany
 */
export type tbl_cashesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_cashes to delete
   */
  where?: Prisma.tbl_cashesWhereInput
  /**
   * Limit how many tbl_cashes to delete.
   */
  limit?: number
}

/**
 * tbl_cashes without action
 */
export type tbl_cashesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_cashes
   */
  select?: Prisma.tbl_cashesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_cashes
   */
  omit?: Prisma.tbl_cashesOmit<ExtArgs> | null
}
