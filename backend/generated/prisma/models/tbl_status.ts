
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_status` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_status
 * 
 */
export type tbl_statusModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_statusPayload>

export type AggregateTbl_status = {
  _count: Tbl_statusCountAggregateOutputType | null
  _avg: Tbl_statusAvgAggregateOutputType | null
  _sum: Tbl_statusSumAggregateOutputType | null
  _min: Tbl_statusMinAggregateOutputType | null
  _max: Tbl_statusMaxAggregateOutputType | null
}

export type Tbl_statusAvgAggregateOutputType = {
  st_Id: number | null
}

export type Tbl_statusSumAggregateOutputType = {
  st_Id: number | null
}

export type Tbl_statusMinAggregateOutputType = {
  st_Id: number | null
  st_link: string | null
  st_del_date: string | null
  money_go: string | null
}

export type Tbl_statusMaxAggregateOutputType = {
  st_Id: number | null
  st_link: string | null
  st_del_date: string | null
  money_go: string | null
}

export type Tbl_statusCountAggregateOutputType = {
  st_Id: number
  st_link: number
  st_del_date: number
  money_go: number
  _all: number
}


export type Tbl_statusAvgAggregateInputType = {
  st_Id?: true
}

export type Tbl_statusSumAggregateInputType = {
  st_Id?: true
}

export type Tbl_statusMinAggregateInputType = {
  st_Id?: true
  st_link?: true
  st_del_date?: true
  money_go?: true
}

export type Tbl_statusMaxAggregateInputType = {
  st_Id?: true
  st_link?: true
  st_del_date?: true
  money_go?: true
}

export type Tbl_statusCountAggregateInputType = {
  st_Id?: true
  st_link?: true
  st_del_date?: true
  money_go?: true
  _all?: true
}

export type Tbl_statusAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_status to aggregate.
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_statuses to fetch.
   */
  orderBy?: Prisma.tbl_statusOrderByWithRelationInput | Prisma.tbl_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_statuses
  **/
  _count?: true | Tbl_statusCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_statusAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_statusSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_statusMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_statusMaxAggregateInputType
}

export type GetTbl_statusAggregateType<T extends Tbl_statusAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_status]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_status[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_status[P]>
}




export type tbl_statusGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_statusWhereInput
  orderBy?: Prisma.tbl_statusOrderByWithAggregationInput | Prisma.tbl_statusOrderByWithAggregationInput[]
  by: Prisma.Tbl_statusScalarFieldEnum[] | Prisma.Tbl_statusScalarFieldEnum
  having?: Prisma.tbl_statusScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_statusCountAggregateInputType | true
  _avg?: Tbl_statusAvgAggregateInputType
  _sum?: Tbl_statusSumAggregateInputType
  _min?: Tbl_statusMinAggregateInputType
  _max?: Tbl_statusMaxAggregateInputType
}

export type Tbl_statusGroupByOutputType = {
  st_Id: number
  st_link: string
  st_del_date: string
  money_go: string
  _count: Tbl_statusCountAggregateOutputType | null
  _avg: Tbl_statusAvgAggregateOutputType | null
  _sum: Tbl_statusSumAggregateOutputType | null
  _min: Tbl_statusMinAggregateOutputType | null
  _max: Tbl_statusMaxAggregateOutputType | null
}

type GetTbl_statusGroupByPayload<T extends tbl_statusGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_statusGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_statusGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_statusGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_statusGroupByOutputType[P]>
      }
    >
  >



export type tbl_statusWhereInput = {
  AND?: Prisma.tbl_statusWhereInput | Prisma.tbl_statusWhereInput[]
  OR?: Prisma.tbl_statusWhereInput[]
  NOT?: Prisma.tbl_statusWhereInput | Prisma.tbl_statusWhereInput[]
  st_Id?: Prisma.IntFilter<"tbl_status"> | number
  st_link?: Prisma.StringFilter<"tbl_status"> | string
  st_del_date?: Prisma.StringFilter<"tbl_status"> | string
  money_go?: Prisma.StringFilter<"tbl_status"> | string
  uza_status?: Prisma.Uza_statusListRelationFilter
}

export type tbl_statusOrderByWithRelationInput = {
  st_Id?: Prisma.SortOrder
  st_link?: Prisma.SortOrder
  st_del_date?: Prisma.SortOrder
  money_go?: Prisma.SortOrder
  uza_status?: Prisma.uza_statusOrderByRelationAggregateInput
  _relevance?: Prisma.tbl_statusOrderByRelevanceInput
}

export type tbl_statusWhereUniqueInput = Prisma.AtLeast<{
  st_Id?: number
  AND?: Prisma.tbl_statusWhereInput | Prisma.tbl_statusWhereInput[]
  OR?: Prisma.tbl_statusWhereInput[]
  NOT?: Prisma.tbl_statusWhereInput | Prisma.tbl_statusWhereInput[]
  st_link?: Prisma.StringFilter<"tbl_status"> | string
  st_del_date?: Prisma.StringFilter<"tbl_status"> | string
  money_go?: Prisma.StringFilter<"tbl_status"> | string
  uza_status?: Prisma.Uza_statusListRelationFilter
}, "st_Id">

export type tbl_statusOrderByWithAggregationInput = {
  st_Id?: Prisma.SortOrder
  st_link?: Prisma.SortOrder
  st_del_date?: Prisma.SortOrder
  money_go?: Prisma.SortOrder
  _count?: Prisma.tbl_statusCountOrderByAggregateInput
  _avg?: Prisma.tbl_statusAvgOrderByAggregateInput
  _max?: Prisma.tbl_statusMaxOrderByAggregateInput
  _min?: Prisma.tbl_statusMinOrderByAggregateInput
  _sum?: Prisma.tbl_statusSumOrderByAggregateInput
}

export type tbl_statusScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_statusScalarWhereWithAggregatesInput | Prisma.tbl_statusScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_statusScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_statusScalarWhereWithAggregatesInput | Prisma.tbl_statusScalarWhereWithAggregatesInput[]
  st_Id?: Prisma.IntWithAggregatesFilter<"tbl_status"> | number
  st_link?: Prisma.StringWithAggregatesFilter<"tbl_status"> | string
  st_del_date?: Prisma.StringWithAggregatesFilter<"tbl_status"> | string
  money_go?: Prisma.StringWithAggregatesFilter<"tbl_status"> | string
}

export type tbl_statusCreateInput = {
  st_link?: string
  st_del_date?: string
  money_go?: string
  uza_status?: Prisma.uza_statusCreateNestedManyWithoutTbl_statusInput
}

export type tbl_statusUncheckedCreateInput = {
  st_Id?: number
  st_link?: string
  st_del_date?: string
  money_go?: string
  uza_status?: Prisma.uza_statusUncheckedCreateNestedManyWithoutTbl_statusInput
}

export type tbl_statusUpdateInput = {
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
  uza_status?: Prisma.uza_statusUpdateManyWithoutTbl_statusNestedInput
}

export type tbl_statusUncheckedUpdateInput = {
  st_Id?: Prisma.IntFieldUpdateOperationsInput | number
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
  uza_status?: Prisma.uza_statusUncheckedUpdateManyWithoutTbl_statusNestedInput
}

export type tbl_statusCreateManyInput = {
  st_Id?: number
  st_link?: string
  st_del_date?: string
  money_go?: string
}

export type tbl_statusUpdateManyMutationInput = {
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_statusUncheckedUpdateManyInput = {
  st_Id?: Prisma.IntFieldUpdateOperationsInput | number
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_statusOrderByRelevanceInput = {
  fields: Prisma.tbl_statusOrderByRelevanceFieldEnum | Prisma.tbl_statusOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_statusCountOrderByAggregateInput = {
  st_Id?: Prisma.SortOrder
  st_link?: Prisma.SortOrder
  st_del_date?: Prisma.SortOrder
  money_go?: Prisma.SortOrder
}

export type tbl_statusAvgOrderByAggregateInput = {
  st_Id?: Prisma.SortOrder
}

export type tbl_statusMaxOrderByAggregateInput = {
  st_Id?: Prisma.SortOrder
  st_link?: Prisma.SortOrder
  st_del_date?: Prisma.SortOrder
  money_go?: Prisma.SortOrder
}

export type tbl_statusMinOrderByAggregateInput = {
  st_Id?: Prisma.SortOrder
  st_link?: Prisma.SortOrder
  st_del_date?: Prisma.SortOrder
  money_go?: Prisma.SortOrder
}

export type tbl_statusSumOrderByAggregateInput = {
  st_Id?: Prisma.SortOrder
}

export type Tbl_statusNullableScalarRelationFilter = {
  is?: Prisma.tbl_statusWhereInput | null
  isNot?: Prisma.tbl_statusWhereInput | null
}

export type tbl_statusCreateNestedOneWithoutUza_statusInput = {
  create?: Prisma.XOR<Prisma.tbl_statusCreateWithoutUza_statusInput, Prisma.tbl_statusUncheckedCreateWithoutUza_statusInput>
  connectOrCreate?: Prisma.tbl_statusCreateOrConnectWithoutUza_statusInput
  connect?: Prisma.tbl_statusWhereUniqueInput
}

export type tbl_statusUpdateOneWithoutUza_statusNestedInput = {
  create?: Prisma.XOR<Prisma.tbl_statusCreateWithoutUza_statusInput, Prisma.tbl_statusUncheckedCreateWithoutUza_statusInput>
  connectOrCreate?: Prisma.tbl_statusCreateOrConnectWithoutUza_statusInput
  upsert?: Prisma.tbl_statusUpsertWithoutUza_statusInput
  disconnect?: Prisma.tbl_statusWhereInput | boolean
  delete?: Prisma.tbl_statusWhereInput | boolean
  connect?: Prisma.tbl_statusWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.tbl_statusUpdateToOneWithWhereWithoutUza_statusInput, Prisma.tbl_statusUpdateWithoutUza_statusInput>, Prisma.tbl_statusUncheckedUpdateWithoutUza_statusInput>
}

export type tbl_statusCreateWithoutUza_statusInput = {
  st_link?: string
  st_del_date?: string
  money_go?: string
}

export type tbl_statusUncheckedCreateWithoutUza_statusInput = {
  st_Id?: number
  st_link?: string
  st_del_date?: string
  money_go?: string
}

export type tbl_statusCreateOrConnectWithoutUza_statusInput = {
  where: Prisma.tbl_statusWhereUniqueInput
  create: Prisma.XOR<Prisma.tbl_statusCreateWithoutUza_statusInput, Prisma.tbl_statusUncheckedCreateWithoutUza_statusInput>
}

export type tbl_statusUpsertWithoutUza_statusInput = {
  update: Prisma.XOR<Prisma.tbl_statusUpdateWithoutUza_statusInput, Prisma.tbl_statusUncheckedUpdateWithoutUza_statusInput>
  create: Prisma.XOR<Prisma.tbl_statusCreateWithoutUza_statusInput, Prisma.tbl_statusUncheckedCreateWithoutUza_statusInput>
  where?: Prisma.tbl_statusWhereInput
}

export type tbl_statusUpdateToOneWithWhereWithoutUza_statusInput = {
  where?: Prisma.tbl_statusWhereInput
  data: Prisma.XOR<Prisma.tbl_statusUpdateWithoutUza_statusInput, Prisma.tbl_statusUncheckedUpdateWithoutUza_statusInput>
}

export type tbl_statusUpdateWithoutUza_statusInput = {
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tbl_statusUncheckedUpdateWithoutUza_statusInput = {
  st_Id?: Prisma.IntFieldUpdateOperationsInput | number
  st_link?: Prisma.StringFieldUpdateOperationsInput | string
  st_del_date?: Prisma.StringFieldUpdateOperationsInput | string
  money_go?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type Tbl_statusCountOutputType
 */

export type Tbl_statusCountOutputType = {
  uza_status: number
}

export type Tbl_statusCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  uza_status?: boolean | Tbl_statusCountOutputTypeCountUza_statusArgs
}

/**
 * Tbl_statusCountOutputType without action
 */
export type Tbl_statusCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tbl_statusCountOutputType
   */
  select?: Prisma.Tbl_statusCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Tbl_statusCountOutputType without action
 */
export type Tbl_statusCountOutputTypeCountUza_statusArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.uza_statusWhereInput
}


export type tbl_statusSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  st_Id?: boolean
  st_link?: boolean
  st_del_date?: boolean
  money_go?: boolean
  uza_status?: boolean | Prisma.tbl_status$uza_statusArgs<ExtArgs>
  _count?: boolean | Prisma.Tbl_statusCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tbl_status"]>



export type tbl_statusSelectScalar = {
  st_Id?: boolean
  st_link?: boolean
  st_del_date?: boolean
  money_go?: boolean
}

export type tbl_statusOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"st_Id" | "st_link" | "st_del_date" | "money_go", ExtArgs["result"]["tbl_status"]>
export type tbl_statusInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  uza_status?: boolean | Prisma.tbl_status$uza_statusArgs<ExtArgs>
  _count?: boolean | Prisma.Tbl_statusCountOutputTypeDefaultArgs<ExtArgs>
}

export type $tbl_statusPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_status"
  objects: {
    uza_status: Prisma.$uza_statusPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    st_Id: number
    st_link: string
    st_del_date: string
    money_go: string
  }, ExtArgs["result"]["tbl_status"]>
  composites: {}
}

export type tbl_statusGetPayload<S extends boolean | null | undefined | tbl_statusDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload, S>

export type tbl_statusCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_statusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_statusCountAggregateInputType | true
  }

export interface tbl_statusDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_status'], meta: { name: 'tbl_status' } }
  /**
   * Find zero or one Tbl_status that matches the filter.
   * @param {tbl_statusFindUniqueArgs} args - Arguments to find a Tbl_status
   * @example
   * // Get one Tbl_status
   * const tbl_status = await prisma.tbl_status.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_statusFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_statusFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_status that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_statusFindUniqueOrThrowArgs} args - Arguments to find a Tbl_status
   * @example
   * // Get one Tbl_status
   * const tbl_status = await prisma.tbl_status.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_statusFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_statusFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_status that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusFindFirstArgs} args - Arguments to find a Tbl_status
   * @example
   * // Get one Tbl_status
   * const tbl_status = await prisma.tbl_status.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_statusFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_statusFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_status that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusFindFirstOrThrowArgs} args - Arguments to find a Tbl_status
   * @example
   * // Get one Tbl_status
   * const tbl_status = await prisma.tbl_status.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_statusFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_statusFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_statuses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_statuses
   * const tbl_statuses = await prisma.tbl_status.findMany()
   * 
   * // Get first 10 Tbl_statuses
   * const tbl_statuses = await prisma.tbl_status.findMany({ take: 10 })
   * 
   * // Only select the `st_Id`
   * const tbl_statusWithSt_IdOnly = await prisma.tbl_status.findMany({ select: { st_Id: true } })
   * 
   */
  findMany<T extends tbl_statusFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_statusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_status.
   * @param {tbl_statusCreateArgs} args - Arguments to create a Tbl_status.
   * @example
   * // Create one Tbl_status
   * const Tbl_status = await prisma.tbl_status.create({
   *   data: {
   *     // ... data to create a Tbl_status
   *   }
   * })
   * 
   */
  create<T extends tbl_statusCreateArgs>(args: Prisma.SelectSubset<T, tbl_statusCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_statuses.
   * @param {tbl_statusCreateManyArgs} args - Arguments to create many Tbl_statuses.
   * @example
   * // Create many Tbl_statuses
   * const tbl_status = await prisma.tbl_status.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_statusCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_statusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_status.
   * @param {tbl_statusDeleteArgs} args - Arguments to delete one Tbl_status.
   * @example
   * // Delete one Tbl_status
   * const Tbl_status = await prisma.tbl_status.delete({
   *   where: {
   *     // ... filter to delete one Tbl_status
   *   }
   * })
   * 
   */
  delete<T extends tbl_statusDeleteArgs>(args: Prisma.SelectSubset<T, tbl_statusDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_status.
   * @param {tbl_statusUpdateArgs} args - Arguments to update one Tbl_status.
   * @example
   * // Update one Tbl_status
   * const tbl_status = await prisma.tbl_status.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_statusUpdateArgs>(args: Prisma.SelectSubset<T, tbl_statusUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_statuses.
   * @param {tbl_statusDeleteManyArgs} args - Arguments to filter Tbl_statuses to delete.
   * @example
   * // Delete a few Tbl_statuses
   * const { count } = await prisma.tbl_status.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_statusDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_statusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_statuses
   * const tbl_status = await prisma.tbl_status.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_statusUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_statusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_status.
   * @param {tbl_statusUpsertArgs} args - Arguments to update or create a Tbl_status.
   * @example
   * // Update or create a Tbl_status
   * const tbl_status = await prisma.tbl_status.upsert({
   *   create: {
   *     // ... data to create a Tbl_status
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_status we want to update
   *   }
   * })
   */
  upsert<T extends tbl_statusUpsertArgs>(args: Prisma.SelectSubset<T, tbl_statusUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusCountArgs} args - Arguments to filter Tbl_statuses to count.
   * @example
   * // Count the number of Tbl_statuses
   * const count = await prisma.tbl_status.count({
   *   where: {
   *     // ... the filter for the Tbl_statuses we want to count
   *   }
   * })
  **/
  count<T extends tbl_statusCountArgs>(
    args?: Prisma.Subset<T, tbl_statusCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_statusCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_statusAggregateArgs>(args: Prisma.Subset<T, Tbl_statusAggregateArgs>): Prisma.PrismaPromise<GetTbl_statusAggregateType<T>>

  /**
   * Group by Tbl_status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_statusGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_statusGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_statusGroupByArgs['orderBy'] }
      : { orderBy?: tbl_statusGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_statusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_status model
 */
readonly fields: tbl_statusFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_status.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_statusClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  uza_status<T extends Prisma.tbl_status$uza_statusArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tbl_status$uza_statusArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_status model
 */
export interface tbl_statusFieldRefs {
  readonly st_Id: Prisma.FieldRef<"tbl_status", 'Int'>
  readonly st_link: Prisma.FieldRef<"tbl_status", 'String'>
  readonly st_del_date: Prisma.FieldRef<"tbl_status", 'String'>
  readonly money_go: Prisma.FieldRef<"tbl_status", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_status findUnique
 */
export type tbl_statusFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter, which tbl_status to fetch.
   */
  where: Prisma.tbl_statusWhereUniqueInput
}

/**
 * tbl_status findUniqueOrThrow
 */
export type tbl_statusFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter, which tbl_status to fetch.
   */
  where: Prisma.tbl_statusWhereUniqueInput
}

/**
 * tbl_status findFirst
 */
export type tbl_statusFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter, which tbl_status to fetch.
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_statuses to fetch.
   */
  orderBy?: Prisma.tbl_statusOrderByWithRelationInput | Prisma.tbl_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_statuses.
   */
  cursor?: Prisma.tbl_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_statuses.
   */
  distinct?: Prisma.Tbl_statusScalarFieldEnum | Prisma.Tbl_statusScalarFieldEnum[]
}

/**
 * tbl_status findFirstOrThrow
 */
export type tbl_statusFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter, which tbl_status to fetch.
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_statuses to fetch.
   */
  orderBy?: Prisma.tbl_statusOrderByWithRelationInput | Prisma.tbl_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_statuses.
   */
  cursor?: Prisma.tbl_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_statuses.
   */
  distinct?: Prisma.Tbl_statusScalarFieldEnum | Prisma.Tbl_statusScalarFieldEnum[]
}

/**
 * tbl_status findMany
 */
export type tbl_statusFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter, which tbl_statuses to fetch.
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_statuses to fetch.
   */
  orderBy?: Prisma.tbl_statusOrderByWithRelationInput | Prisma.tbl_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_statuses.
   */
  cursor?: Prisma.tbl_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_statuses.
   */
  skip?: number
  distinct?: Prisma.Tbl_statusScalarFieldEnum | Prisma.Tbl_statusScalarFieldEnum[]
}

/**
 * tbl_status create
 */
export type tbl_statusCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * The data needed to create a tbl_status.
   */
  data?: Prisma.XOR<Prisma.tbl_statusCreateInput, Prisma.tbl_statusUncheckedCreateInput>
}

/**
 * tbl_status createMany
 */
export type tbl_statusCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_statuses.
   */
  data: Prisma.tbl_statusCreateManyInput | Prisma.tbl_statusCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_status update
 */
export type tbl_statusUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * The data needed to update a tbl_status.
   */
  data: Prisma.XOR<Prisma.tbl_statusUpdateInput, Prisma.tbl_statusUncheckedUpdateInput>
  /**
   * Choose, which tbl_status to update.
   */
  where: Prisma.tbl_statusWhereUniqueInput
}

/**
 * tbl_status updateMany
 */
export type tbl_statusUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_statuses.
   */
  data: Prisma.XOR<Prisma.tbl_statusUpdateManyMutationInput, Prisma.tbl_statusUncheckedUpdateManyInput>
  /**
   * Filter which tbl_statuses to update
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * Limit how many tbl_statuses to update.
   */
  limit?: number
}

/**
 * tbl_status upsert
 */
export type tbl_statusUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * The filter to search for the tbl_status to update in case it exists.
   */
  where: Prisma.tbl_statusWhereUniqueInput
  /**
   * In case the tbl_status found by the `where` argument doesn't exist, create a new tbl_status with this data.
   */
  create: Prisma.XOR<Prisma.tbl_statusCreateInput, Prisma.tbl_statusUncheckedCreateInput>
  /**
   * In case the tbl_status was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_statusUpdateInput, Prisma.tbl_statusUncheckedUpdateInput>
}

/**
 * tbl_status delete
 */
export type tbl_statusDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  /**
   * Filter which tbl_status to delete.
   */
  where: Prisma.tbl_statusWhereUniqueInput
}

/**
 * tbl_status deleteMany
 */
export type tbl_statusDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_statuses to delete
   */
  where?: Prisma.tbl_statusWhereInput
  /**
   * Limit how many tbl_statuses to delete.
   */
  limit?: number
}

/**
 * tbl_status.uza_status
 */
export type tbl_status$uza_statusArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  where?: Prisma.uza_statusWhereInput
  orderBy?: Prisma.uza_statusOrderByWithRelationInput | Prisma.uza_statusOrderByWithRelationInput[]
  cursor?: Prisma.uza_statusWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Uza_statusScalarFieldEnum | Prisma.Uza_statusScalarFieldEnum[]
}

/**
 * tbl_status without action
 */
export type tbl_statusDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
}
