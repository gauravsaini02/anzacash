
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `uza_status` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model uza_status
 * 
 */
export type uza_statusModel = runtime.Types.Result.DefaultSelection<Prisma.$uza_statusPayload>

export type AggregateUza_status = {
  _count: Uza_statusCountAggregateOutputType | null
  _avg: Uza_statusAvgAggregateOutputType | null
  _sum: Uza_statusSumAggregateOutputType | null
  _min: Uza_statusMinAggregateOutputType | null
  _max: Uza_statusMaxAggregateOutputType | null
}

export type Uza_statusAvgAggregateOutputType = {
  status_ID: number | null
  status_data_Id: number | null
}

export type Uza_statusSumAggregateOutputType = {
  status_ID: number | null
  status_data_Id: number | null
}

export type Uza_statusMinAggregateOutputType = {
  status_ID: number | null
  status_uza: string | null
  status_data_Id: number | null
  status_link: string | null
}

export type Uza_statusMaxAggregateOutputType = {
  status_ID: number | null
  status_uza: string | null
  status_data_Id: number | null
  status_link: string | null
}

export type Uza_statusCountAggregateOutputType = {
  status_ID: number
  status_uza: number
  status_data_Id: number
  status_link: number
  _all: number
}


export type Uza_statusAvgAggregateInputType = {
  status_ID?: true
  status_data_Id?: true
}

export type Uza_statusSumAggregateInputType = {
  status_ID?: true
  status_data_Id?: true
}

export type Uza_statusMinAggregateInputType = {
  status_ID?: true
  status_uza?: true
  status_data_Id?: true
  status_link?: true
}

export type Uza_statusMaxAggregateInputType = {
  status_ID?: true
  status_uza?: true
  status_data_Id?: true
  status_link?: true
}

export type Uza_statusCountAggregateInputType = {
  status_ID?: true
  status_uza?: true
  status_data_Id?: true
  status_link?: true
  _all?: true
}

export type Uza_statusAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which uza_status to aggregate.
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_statuses to fetch.
   */
  orderBy?: Prisma.uza_statusOrderByWithRelationInput | Prisma.uza_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.uza_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned uza_statuses
  **/
  _count?: true | Uza_statusCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Uza_statusAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Uza_statusSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Uza_statusMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Uza_statusMaxAggregateInputType
}

export type GetUza_statusAggregateType<T extends Uza_statusAggregateArgs> = {
      [P in keyof T & keyof AggregateUza_status]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUza_status[P]>
    : Prisma.GetScalarType<T[P], AggregateUza_status[P]>
}




export type uza_statusGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.uza_statusWhereInput
  orderBy?: Prisma.uza_statusOrderByWithAggregationInput | Prisma.uza_statusOrderByWithAggregationInput[]
  by: Prisma.Uza_statusScalarFieldEnum[] | Prisma.Uza_statusScalarFieldEnum
  having?: Prisma.uza_statusScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Uza_statusCountAggregateInputType | true
  _avg?: Uza_statusAvgAggregateInputType
  _sum?: Uza_statusSumAggregateInputType
  _min?: Uza_statusMinAggregateInputType
  _max?: Uza_statusMaxAggregateInputType
}

export type Uza_statusGroupByOutputType = {
  status_ID: number
  status_uza: string
  status_data_Id: number | null
  status_link: string | null
  _count: Uza_statusCountAggregateOutputType | null
  _avg: Uza_statusAvgAggregateOutputType | null
  _sum: Uza_statusSumAggregateOutputType | null
  _min: Uza_statusMinAggregateOutputType | null
  _max: Uza_statusMaxAggregateOutputType | null
}

type GetUza_statusGroupByPayload<T extends uza_statusGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Uza_statusGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Uza_statusGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Uza_statusGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Uza_statusGroupByOutputType[P]>
      }
    >
  >



export type uza_statusWhereInput = {
  AND?: Prisma.uza_statusWhereInput | Prisma.uza_statusWhereInput[]
  OR?: Prisma.uza_statusWhereInput[]
  NOT?: Prisma.uza_statusWhereInput | Prisma.uza_statusWhereInput[]
  status_ID?: Prisma.IntFilter<"uza_status"> | number
  status_uza?: Prisma.StringFilter<"uza_status"> | string
  status_data_Id?: Prisma.IntNullableFilter<"uza_status"> | number | null
  status_link?: Prisma.StringNullableFilter<"uza_status"> | string | null
  tbl_status?: Prisma.XOR<Prisma.Tbl_statusNullableScalarRelationFilter, Prisma.tbl_statusWhereInput> | null
}

export type uza_statusOrderByWithRelationInput = {
  status_ID?: Prisma.SortOrder
  status_uza?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrderInput | Prisma.SortOrder
  status_link?: Prisma.SortOrderInput | Prisma.SortOrder
  tbl_status?: Prisma.tbl_statusOrderByWithRelationInput
  _relevance?: Prisma.uza_statusOrderByRelevanceInput
}

export type uza_statusWhereUniqueInput = Prisma.AtLeast<{
  status_ID?: number
  AND?: Prisma.uza_statusWhereInput | Prisma.uza_statusWhereInput[]
  OR?: Prisma.uza_statusWhereInput[]
  NOT?: Prisma.uza_statusWhereInput | Prisma.uza_statusWhereInput[]
  status_uza?: Prisma.StringFilter<"uza_status"> | string
  status_data_Id?: Prisma.IntNullableFilter<"uza_status"> | number | null
  status_link?: Prisma.StringNullableFilter<"uza_status"> | string | null
  tbl_status?: Prisma.XOR<Prisma.Tbl_statusNullableScalarRelationFilter, Prisma.tbl_statusWhereInput> | null
}, "status_ID">

export type uza_statusOrderByWithAggregationInput = {
  status_ID?: Prisma.SortOrder
  status_uza?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrderInput | Prisma.SortOrder
  status_link?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.uza_statusCountOrderByAggregateInput
  _avg?: Prisma.uza_statusAvgOrderByAggregateInput
  _max?: Prisma.uza_statusMaxOrderByAggregateInput
  _min?: Prisma.uza_statusMinOrderByAggregateInput
  _sum?: Prisma.uza_statusSumOrderByAggregateInput
}

export type uza_statusScalarWhereWithAggregatesInput = {
  AND?: Prisma.uza_statusScalarWhereWithAggregatesInput | Prisma.uza_statusScalarWhereWithAggregatesInput[]
  OR?: Prisma.uza_statusScalarWhereWithAggregatesInput[]
  NOT?: Prisma.uza_statusScalarWhereWithAggregatesInput | Prisma.uza_statusScalarWhereWithAggregatesInput[]
  status_ID?: Prisma.IntWithAggregatesFilter<"uza_status"> | number
  status_uza?: Prisma.StringWithAggregatesFilter<"uza_status"> | string
  status_data_Id?: Prisma.IntNullableWithAggregatesFilter<"uza_status"> | number | null
  status_link?: Prisma.StringNullableWithAggregatesFilter<"uza_status"> | string | null
}

export type uza_statusCreateInput = {
  status_uza?: string
  status_link?: string | null
  tbl_status?: Prisma.tbl_statusCreateNestedOneWithoutUza_statusInput
}

export type uza_statusUncheckedCreateInput = {
  status_ID?: number
  status_uza?: string
  status_data_Id?: number | null
  status_link?: string | null
}

export type uza_statusUpdateInput = {
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tbl_status?: Prisma.tbl_statusUpdateOneWithoutUza_statusNestedInput
}

export type uza_statusUncheckedUpdateInput = {
  status_ID?: Prisma.IntFieldUpdateOperationsInput | number
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_data_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_statusCreateManyInput = {
  status_ID?: number
  status_uza?: string
  status_data_Id?: number | null
  status_link?: string | null
}

export type uza_statusUpdateManyMutationInput = {
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_statusUncheckedUpdateManyInput = {
  status_ID?: Prisma.IntFieldUpdateOperationsInput | number
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_data_Id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type Uza_statusListRelationFilter = {
  every?: Prisma.uza_statusWhereInput
  some?: Prisma.uza_statusWhereInput
  none?: Prisma.uza_statusWhereInput
}

export type uza_statusOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type uza_statusOrderByRelevanceInput = {
  fields: Prisma.uza_statusOrderByRelevanceFieldEnum | Prisma.uza_statusOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type uza_statusCountOrderByAggregateInput = {
  status_ID?: Prisma.SortOrder
  status_uza?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrder
  status_link?: Prisma.SortOrder
}

export type uza_statusAvgOrderByAggregateInput = {
  status_ID?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrder
}

export type uza_statusMaxOrderByAggregateInput = {
  status_ID?: Prisma.SortOrder
  status_uza?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrder
  status_link?: Prisma.SortOrder
}

export type uza_statusMinOrderByAggregateInput = {
  status_ID?: Prisma.SortOrder
  status_uza?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrder
  status_link?: Prisma.SortOrder
}

export type uza_statusSumOrderByAggregateInput = {
  status_ID?: Prisma.SortOrder
  status_data_Id?: Prisma.SortOrder
}

export type uza_statusCreateNestedManyWithoutTbl_statusInput = {
  create?: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput> | Prisma.uza_statusCreateWithoutTbl_statusInput[] | Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput[]
  connectOrCreate?: Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput | Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput[]
  createMany?: Prisma.uza_statusCreateManyTbl_statusInputEnvelope
  connect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
}

export type uza_statusUncheckedCreateNestedManyWithoutTbl_statusInput = {
  create?: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput> | Prisma.uza_statusCreateWithoutTbl_statusInput[] | Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput[]
  connectOrCreate?: Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput | Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput[]
  createMany?: Prisma.uza_statusCreateManyTbl_statusInputEnvelope
  connect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
}

export type uza_statusUpdateManyWithoutTbl_statusNestedInput = {
  create?: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput> | Prisma.uza_statusCreateWithoutTbl_statusInput[] | Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput[]
  connectOrCreate?: Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput | Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput[]
  upsert?: Prisma.uza_statusUpsertWithWhereUniqueWithoutTbl_statusInput | Prisma.uza_statusUpsertWithWhereUniqueWithoutTbl_statusInput[]
  createMany?: Prisma.uza_statusCreateManyTbl_statusInputEnvelope
  set?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  disconnect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  delete?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  connect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  update?: Prisma.uza_statusUpdateWithWhereUniqueWithoutTbl_statusInput | Prisma.uza_statusUpdateWithWhereUniqueWithoutTbl_statusInput[]
  updateMany?: Prisma.uza_statusUpdateManyWithWhereWithoutTbl_statusInput | Prisma.uza_statusUpdateManyWithWhereWithoutTbl_statusInput[]
  deleteMany?: Prisma.uza_statusScalarWhereInput | Prisma.uza_statusScalarWhereInput[]
}

export type uza_statusUncheckedUpdateManyWithoutTbl_statusNestedInput = {
  create?: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput> | Prisma.uza_statusCreateWithoutTbl_statusInput[] | Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput[]
  connectOrCreate?: Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput | Prisma.uza_statusCreateOrConnectWithoutTbl_statusInput[]
  upsert?: Prisma.uza_statusUpsertWithWhereUniqueWithoutTbl_statusInput | Prisma.uza_statusUpsertWithWhereUniqueWithoutTbl_statusInput[]
  createMany?: Prisma.uza_statusCreateManyTbl_statusInputEnvelope
  set?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  disconnect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  delete?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  connect?: Prisma.uza_statusWhereUniqueInput | Prisma.uza_statusWhereUniqueInput[]
  update?: Prisma.uza_statusUpdateWithWhereUniqueWithoutTbl_statusInput | Prisma.uza_statusUpdateWithWhereUniqueWithoutTbl_statusInput[]
  updateMany?: Prisma.uza_statusUpdateManyWithWhereWithoutTbl_statusInput | Prisma.uza_statusUpdateManyWithWhereWithoutTbl_statusInput[]
  deleteMany?: Prisma.uza_statusScalarWhereInput | Prisma.uza_statusScalarWhereInput[]
}

export type uza_statusCreateWithoutTbl_statusInput = {
  status_uza?: string
  status_link?: string | null
}

export type uza_statusUncheckedCreateWithoutTbl_statusInput = {
  status_ID?: number
  status_uza?: string
  status_link?: string | null
}

export type uza_statusCreateOrConnectWithoutTbl_statusInput = {
  where: Prisma.uza_statusWhereUniqueInput
  create: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput>
}

export type uza_statusCreateManyTbl_statusInputEnvelope = {
  data: Prisma.uza_statusCreateManyTbl_statusInput | Prisma.uza_statusCreateManyTbl_statusInput[]
  skipDuplicates?: boolean
}

export type uza_statusUpsertWithWhereUniqueWithoutTbl_statusInput = {
  where: Prisma.uza_statusWhereUniqueInput
  update: Prisma.XOR<Prisma.uza_statusUpdateWithoutTbl_statusInput, Prisma.uza_statusUncheckedUpdateWithoutTbl_statusInput>
  create: Prisma.XOR<Prisma.uza_statusCreateWithoutTbl_statusInput, Prisma.uza_statusUncheckedCreateWithoutTbl_statusInput>
}

export type uza_statusUpdateWithWhereUniqueWithoutTbl_statusInput = {
  where: Prisma.uza_statusWhereUniqueInput
  data: Prisma.XOR<Prisma.uza_statusUpdateWithoutTbl_statusInput, Prisma.uza_statusUncheckedUpdateWithoutTbl_statusInput>
}

export type uza_statusUpdateManyWithWhereWithoutTbl_statusInput = {
  where: Prisma.uza_statusScalarWhereInput
  data: Prisma.XOR<Prisma.uza_statusUpdateManyMutationInput, Prisma.uza_statusUncheckedUpdateManyWithoutTbl_statusInput>
}

export type uza_statusScalarWhereInput = {
  AND?: Prisma.uza_statusScalarWhereInput | Prisma.uza_statusScalarWhereInput[]
  OR?: Prisma.uza_statusScalarWhereInput[]
  NOT?: Prisma.uza_statusScalarWhereInput | Prisma.uza_statusScalarWhereInput[]
  status_ID?: Prisma.IntFilter<"uza_status"> | number
  status_uza?: Prisma.StringFilter<"uza_status"> | string
  status_data_Id?: Prisma.IntNullableFilter<"uza_status"> | number | null
  status_link?: Prisma.StringNullableFilter<"uza_status"> | string | null
}

export type uza_statusCreateManyTbl_statusInput = {
  status_ID?: number
  status_uza?: string
  status_link?: string | null
}

export type uza_statusUpdateWithoutTbl_statusInput = {
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_statusUncheckedUpdateWithoutTbl_statusInput = {
  status_ID?: Prisma.IntFieldUpdateOperationsInput | number
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_statusUncheckedUpdateManyWithoutTbl_statusInput = {
  status_ID?: Prisma.IntFieldUpdateOperationsInput | number
  status_uza?: Prisma.StringFieldUpdateOperationsInput | string
  status_link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type uza_statusSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  status_ID?: boolean
  status_uza?: boolean
  status_data_Id?: boolean
  status_link?: boolean
  tbl_status?: boolean | Prisma.uza_status$tbl_statusArgs<ExtArgs>
}, ExtArgs["result"]["uza_status"]>



export type uza_statusSelectScalar = {
  status_ID?: boolean
  status_uza?: boolean
  status_data_Id?: boolean
  status_link?: boolean
}

export type uza_statusOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"status_ID" | "status_uza" | "status_data_Id" | "status_link", ExtArgs["result"]["uza_status"]>
export type uza_statusInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tbl_status?: boolean | Prisma.uza_status$tbl_statusArgs<ExtArgs>
}

export type $uza_statusPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "uza_status"
  objects: {
    tbl_status: Prisma.$tbl_statusPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    status_ID: number
    status_uza: string
    status_data_Id: number | null
    status_link: string | null
  }, ExtArgs["result"]["uza_status"]>
  composites: {}
}

export type uza_statusGetPayload<S extends boolean | null | undefined | uza_statusDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$uza_statusPayload, S>

export type uza_statusCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<uza_statusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Uza_statusCountAggregateInputType | true
  }

export interface uza_statusDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['uza_status'], meta: { name: 'uza_status' } }
  /**
   * Find zero or one Uza_status that matches the filter.
   * @param {uza_statusFindUniqueArgs} args - Arguments to find a Uza_status
   * @example
   * // Get one Uza_status
   * const uza_status = await prisma.uza_status.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends uza_statusFindUniqueArgs>(args: Prisma.SelectSubset<T, uza_statusFindUniqueArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Uza_status that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {uza_statusFindUniqueOrThrowArgs} args - Arguments to find a Uza_status
   * @example
   * // Get one Uza_status
   * const uza_status = await prisma.uza_status.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends uza_statusFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, uza_statusFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Uza_status that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusFindFirstArgs} args - Arguments to find a Uza_status
   * @example
   * // Get one Uza_status
   * const uza_status = await prisma.uza_status.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends uza_statusFindFirstArgs>(args?: Prisma.SelectSubset<T, uza_statusFindFirstArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Uza_status that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusFindFirstOrThrowArgs} args - Arguments to find a Uza_status
   * @example
   * // Get one Uza_status
   * const uza_status = await prisma.uza_status.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends uza_statusFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, uza_statusFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Uza_statuses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Uza_statuses
   * const uza_statuses = await prisma.uza_status.findMany()
   * 
   * // Get first 10 Uza_statuses
   * const uza_statuses = await prisma.uza_status.findMany({ take: 10 })
   * 
   * // Only select the `status_ID`
   * const uza_statusWithStatus_IDOnly = await prisma.uza_status.findMany({ select: { status_ID: true } })
   * 
   */
  findMany<T extends uza_statusFindManyArgs>(args?: Prisma.SelectSubset<T, uza_statusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Uza_status.
   * @param {uza_statusCreateArgs} args - Arguments to create a Uza_status.
   * @example
   * // Create one Uza_status
   * const Uza_status = await prisma.uza_status.create({
   *   data: {
   *     // ... data to create a Uza_status
   *   }
   * })
   * 
   */
  create<T extends uza_statusCreateArgs>(args: Prisma.SelectSubset<T, uza_statusCreateArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Uza_statuses.
   * @param {uza_statusCreateManyArgs} args - Arguments to create many Uza_statuses.
   * @example
   * // Create many Uza_statuses
   * const uza_status = await prisma.uza_status.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends uza_statusCreateManyArgs>(args?: Prisma.SelectSubset<T, uza_statusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Uza_status.
   * @param {uza_statusDeleteArgs} args - Arguments to delete one Uza_status.
   * @example
   * // Delete one Uza_status
   * const Uza_status = await prisma.uza_status.delete({
   *   where: {
   *     // ... filter to delete one Uza_status
   *   }
   * })
   * 
   */
  delete<T extends uza_statusDeleteArgs>(args: Prisma.SelectSubset<T, uza_statusDeleteArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Uza_status.
   * @param {uza_statusUpdateArgs} args - Arguments to update one Uza_status.
   * @example
   * // Update one Uza_status
   * const uza_status = await prisma.uza_status.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends uza_statusUpdateArgs>(args: Prisma.SelectSubset<T, uza_statusUpdateArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Uza_statuses.
   * @param {uza_statusDeleteManyArgs} args - Arguments to filter Uza_statuses to delete.
   * @example
   * // Delete a few Uza_statuses
   * const { count } = await prisma.uza_status.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends uza_statusDeleteManyArgs>(args?: Prisma.SelectSubset<T, uza_statusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Uza_statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Uza_statuses
   * const uza_status = await prisma.uza_status.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends uza_statusUpdateManyArgs>(args: Prisma.SelectSubset<T, uza_statusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Uza_status.
   * @param {uza_statusUpsertArgs} args - Arguments to update or create a Uza_status.
   * @example
   * // Update or create a Uza_status
   * const uza_status = await prisma.uza_status.upsert({
   *   create: {
   *     // ... data to create a Uza_status
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Uza_status we want to update
   *   }
   * })
   */
  upsert<T extends uza_statusUpsertArgs>(args: Prisma.SelectSubset<T, uza_statusUpsertArgs<ExtArgs>>): Prisma.Prisma__uza_statusClient<runtime.Types.Result.GetResult<Prisma.$uza_statusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Uza_statuses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusCountArgs} args - Arguments to filter Uza_statuses to count.
   * @example
   * // Count the number of Uza_statuses
   * const count = await prisma.uza_status.count({
   *   where: {
   *     // ... the filter for the Uza_statuses we want to count
   *   }
   * })
  **/
  count<T extends uza_statusCountArgs>(
    args?: Prisma.Subset<T, uza_statusCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Uza_statusCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Uza_status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Uza_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Uza_statusAggregateArgs>(args: Prisma.Subset<T, Uza_statusAggregateArgs>): Prisma.PrismaPromise<GetUza_statusAggregateType<T>>

  /**
   * Group by Uza_status.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_statusGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends uza_statusGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: uza_statusGroupByArgs['orderBy'] }
      : { orderBy?: uza_statusGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, uza_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUza_statusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the uza_status model
 */
readonly fields: uza_statusFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for uza_status.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__uza_statusClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tbl_status<T extends Prisma.uza_status$tbl_statusArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.uza_status$tbl_statusArgs<ExtArgs>>): Prisma.Prisma__tbl_statusClient<runtime.Types.Result.GetResult<Prisma.$tbl_statusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the uza_status model
 */
export interface uza_statusFieldRefs {
  readonly status_ID: Prisma.FieldRef<"uza_status", 'Int'>
  readonly status_uza: Prisma.FieldRef<"uza_status", 'String'>
  readonly status_data_Id: Prisma.FieldRef<"uza_status", 'Int'>
  readonly status_link: Prisma.FieldRef<"uza_status", 'String'>
}
    

// Custom InputTypes
/**
 * uza_status findUnique
 */
export type uza_statusFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter, which uza_status to fetch.
   */
  where: Prisma.uza_statusWhereUniqueInput
}

/**
 * uza_status findUniqueOrThrow
 */
export type uza_statusFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter, which uza_status to fetch.
   */
  where: Prisma.uza_statusWhereUniqueInput
}

/**
 * uza_status findFirst
 */
export type uza_statusFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter, which uza_status to fetch.
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_statuses to fetch.
   */
  orderBy?: Prisma.uza_statusOrderByWithRelationInput | Prisma.uza_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for uza_statuses.
   */
  cursor?: Prisma.uza_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of uza_statuses.
   */
  distinct?: Prisma.Uza_statusScalarFieldEnum | Prisma.Uza_statusScalarFieldEnum[]
}

/**
 * uza_status findFirstOrThrow
 */
export type uza_statusFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter, which uza_status to fetch.
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_statuses to fetch.
   */
  orderBy?: Prisma.uza_statusOrderByWithRelationInput | Prisma.uza_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for uza_statuses.
   */
  cursor?: Prisma.uza_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_statuses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of uza_statuses.
   */
  distinct?: Prisma.Uza_statusScalarFieldEnum | Prisma.Uza_statusScalarFieldEnum[]
}

/**
 * uza_status findMany
 */
export type uza_statusFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter, which uza_statuses to fetch.
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_statuses to fetch.
   */
  orderBy?: Prisma.uza_statusOrderByWithRelationInput | Prisma.uza_statusOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing uza_statuses.
   */
  cursor?: Prisma.uza_statusWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_statuses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_statuses.
   */
  skip?: number
  distinct?: Prisma.Uza_statusScalarFieldEnum | Prisma.Uza_statusScalarFieldEnum[]
}

/**
 * uza_status create
 */
export type uza_statusCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * The data needed to create a uza_status.
   */
  data?: Prisma.XOR<Prisma.uza_statusCreateInput, Prisma.uza_statusUncheckedCreateInput>
}

/**
 * uza_status createMany
 */
export type uza_statusCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many uza_statuses.
   */
  data: Prisma.uza_statusCreateManyInput | Prisma.uza_statusCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * uza_status update
 */
export type uza_statusUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * The data needed to update a uza_status.
   */
  data: Prisma.XOR<Prisma.uza_statusUpdateInput, Prisma.uza_statusUncheckedUpdateInput>
  /**
   * Choose, which uza_status to update.
   */
  where: Prisma.uza_statusWhereUniqueInput
}

/**
 * uza_status updateMany
 */
export type uza_statusUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update uza_statuses.
   */
  data: Prisma.XOR<Prisma.uza_statusUpdateManyMutationInput, Prisma.uza_statusUncheckedUpdateManyInput>
  /**
   * Filter which uza_statuses to update
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * Limit how many uza_statuses to update.
   */
  limit?: number
}

/**
 * uza_status upsert
 */
export type uza_statusUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * The filter to search for the uza_status to update in case it exists.
   */
  where: Prisma.uza_statusWhereUniqueInput
  /**
   * In case the uza_status found by the `where` argument doesn't exist, create a new uza_status with this data.
   */
  create: Prisma.XOR<Prisma.uza_statusCreateInput, Prisma.uza_statusUncheckedCreateInput>
  /**
   * In case the uza_status was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.uza_statusUpdateInput, Prisma.uza_statusUncheckedUpdateInput>
}

/**
 * uza_status delete
 */
export type uza_statusDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
  /**
   * Filter which uza_status to delete.
   */
  where: Prisma.uza_statusWhereUniqueInput
}

/**
 * uza_status deleteMany
 */
export type uza_statusDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which uza_statuses to delete
   */
  where?: Prisma.uza_statusWhereInput
  /**
   * Limit how many uza_statuses to delete.
   */
  limit?: number
}

/**
 * uza_status.tbl_status
 */
export type uza_status$tbl_statusArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_status
   */
  select?: Prisma.tbl_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_status
   */
  omit?: Prisma.tbl_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tbl_statusInclude<ExtArgs> | null
  where?: Prisma.tbl_statusWhereInput
}

/**
 * uza_status without action
 */
export type uza_statusDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_status
   */
  select?: Prisma.uza_statusSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_status
   */
  omit?: Prisma.uza_statusOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_statusInclude<ExtArgs> | null
}
