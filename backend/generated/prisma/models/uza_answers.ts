
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `uza_answers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model uza_answers
 * 
 */
export type uza_answersModel = runtime.Types.Result.DefaultSelection<Prisma.$uza_answersPayload>

export type AggregateUza_answers = {
  _count: Uza_answersCountAggregateOutputType | null
  _avg: Uza_answersAvgAggregateOutputType | null
  _sum: Uza_answersSumAggregateOutputType | null
  _min: Uza_answersMinAggregateOutputType | null
  _max: Uza_answersMaxAggregateOutputType | null
}

export type Uza_answersAvgAggregateOutputType = {
  a_ID: number | null
  qns_ID: number | null
}

export type Uza_answersSumAggregateOutputType = {
  a_ID: number | null
  qns_ID: number | null
}

export type Uza_answersMinAggregateOutputType = {
  a_ID: number | null
  uza_ID: string | null
  qns_ID: number | null
  ans_ID: string | null
  a_status: string | null
  uza_paid: string | null
}

export type Uza_answersMaxAggregateOutputType = {
  a_ID: number | null
  uza_ID: string | null
  qns_ID: number | null
  ans_ID: string | null
  a_status: string | null
  uza_paid: string | null
}

export type Uza_answersCountAggregateOutputType = {
  a_ID: number
  uza_ID: number
  qns_ID: number
  ans_ID: number
  a_status: number
  uza_paid: number
  _all: number
}


export type Uza_answersAvgAggregateInputType = {
  a_ID?: true
  qns_ID?: true
}

export type Uza_answersSumAggregateInputType = {
  a_ID?: true
  qns_ID?: true
}

export type Uza_answersMinAggregateInputType = {
  a_ID?: true
  uza_ID?: true
  qns_ID?: true
  ans_ID?: true
  a_status?: true
  uza_paid?: true
}

export type Uza_answersMaxAggregateInputType = {
  a_ID?: true
  uza_ID?: true
  qns_ID?: true
  ans_ID?: true
  a_status?: true
  uza_paid?: true
}

export type Uza_answersCountAggregateInputType = {
  a_ID?: true
  uza_ID?: true
  qns_ID?: true
  ans_ID?: true
  a_status?: true
  uza_paid?: true
  _all?: true
}

export type Uza_answersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which uza_answers to aggregate.
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_answers to fetch.
   */
  orderBy?: Prisma.uza_answersOrderByWithRelationInput | Prisma.uza_answersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.uza_answersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned uza_answers
  **/
  _count?: true | Uza_answersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Uza_answersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Uza_answersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Uza_answersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Uza_answersMaxAggregateInputType
}

export type GetUza_answersAggregateType<T extends Uza_answersAggregateArgs> = {
      [P in keyof T & keyof AggregateUza_answers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUza_answers[P]>
    : Prisma.GetScalarType<T[P], AggregateUza_answers[P]>
}




export type uza_answersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.uza_answersWhereInput
  orderBy?: Prisma.uza_answersOrderByWithAggregationInput | Prisma.uza_answersOrderByWithAggregationInput[]
  by: Prisma.Uza_answersScalarFieldEnum[] | Prisma.Uza_answersScalarFieldEnum
  having?: Prisma.uza_answersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Uza_answersCountAggregateInputType | true
  _avg?: Uza_answersAvgAggregateInputType
  _sum?: Uza_answersSumAggregateInputType
  _min?: Uza_answersMinAggregateInputType
  _max?: Uza_answersMaxAggregateInputType
}

export type Uza_answersGroupByOutputType = {
  a_ID: number
  uza_ID: string | null
  qns_ID: number | null
  ans_ID: string | null
  a_status: string | null
  uza_paid: string | null
  _count: Uza_answersCountAggregateOutputType | null
  _avg: Uza_answersAvgAggregateOutputType | null
  _sum: Uza_answersSumAggregateOutputType | null
  _min: Uza_answersMinAggregateOutputType | null
  _max: Uza_answersMaxAggregateOutputType | null
}

type GetUza_answersGroupByPayload<T extends uza_answersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Uza_answersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Uza_answersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Uza_answersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Uza_answersGroupByOutputType[P]>
      }
    >
  >



export type uza_answersWhereInput = {
  AND?: Prisma.uza_answersWhereInput | Prisma.uza_answersWhereInput[]
  OR?: Prisma.uza_answersWhereInput[]
  NOT?: Prisma.uza_answersWhereInput | Prisma.uza_answersWhereInput[]
  a_ID?: Prisma.IntFilter<"uza_answers"> | number
  uza_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  qns_ID?: Prisma.IntNullableFilter<"uza_answers"> | number | null
  ans_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  a_status?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  uza_paid?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  nasso_qns?: Prisma.XOR<Prisma.Nasso_qnsNullableScalarRelationFilter, Prisma.nasso_qnsWhereInput> | null
}

export type uza_answersOrderByWithRelationInput = {
  a_ID?: Prisma.SortOrder
  uza_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  qns_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  a_status?: Prisma.SortOrderInput | Prisma.SortOrder
  uza_paid?: Prisma.SortOrderInput | Prisma.SortOrder
  nasso_qns?: Prisma.nasso_qnsOrderByWithRelationInput
  _relevance?: Prisma.uza_answersOrderByRelevanceInput
}

export type uza_answersWhereUniqueInput = Prisma.AtLeast<{
  a_ID?: number
  AND?: Prisma.uza_answersWhereInput | Prisma.uza_answersWhereInput[]
  OR?: Prisma.uza_answersWhereInput[]
  NOT?: Prisma.uza_answersWhereInput | Prisma.uza_answersWhereInput[]
  uza_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  qns_ID?: Prisma.IntNullableFilter<"uza_answers"> | number | null
  ans_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  a_status?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  uza_paid?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  nasso_qns?: Prisma.XOR<Prisma.Nasso_qnsNullableScalarRelationFilter, Prisma.nasso_qnsWhereInput> | null
}, "a_ID">

export type uza_answersOrderByWithAggregationInput = {
  a_ID?: Prisma.SortOrder
  uza_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  qns_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  a_status?: Prisma.SortOrderInput | Prisma.SortOrder
  uza_paid?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.uza_answersCountOrderByAggregateInput
  _avg?: Prisma.uza_answersAvgOrderByAggregateInput
  _max?: Prisma.uza_answersMaxOrderByAggregateInput
  _min?: Prisma.uza_answersMinOrderByAggregateInput
  _sum?: Prisma.uza_answersSumOrderByAggregateInput
}

export type uza_answersScalarWhereWithAggregatesInput = {
  AND?: Prisma.uza_answersScalarWhereWithAggregatesInput | Prisma.uza_answersScalarWhereWithAggregatesInput[]
  OR?: Prisma.uza_answersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.uza_answersScalarWhereWithAggregatesInput | Prisma.uza_answersScalarWhereWithAggregatesInput[]
  a_ID?: Prisma.IntWithAggregatesFilter<"uza_answers"> | number
  uza_ID?: Prisma.StringNullableWithAggregatesFilter<"uza_answers"> | string | null
  qns_ID?: Prisma.IntNullableWithAggregatesFilter<"uza_answers"> | number | null
  ans_ID?: Prisma.StringNullableWithAggregatesFilter<"uza_answers"> | string | null
  a_status?: Prisma.StringNullableWithAggregatesFilter<"uza_answers"> | string | null
  uza_paid?: Prisma.StringNullableWithAggregatesFilter<"uza_answers"> | string | null
}

export type uza_answersCreateInput = {
  uza_ID?: string | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
  nasso_qns?: Prisma.nasso_qnsCreateNestedOneWithoutUza_answersInput
}

export type uza_answersUncheckedCreateInput = {
  a_ID?: number
  uza_ID?: string | null
  qns_ID?: number | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
}

export type uza_answersUpdateInput = {
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nasso_qns?: Prisma.nasso_qnsUpdateOneWithoutUza_answersNestedInput
}

export type uza_answersUncheckedUpdateInput = {
  a_ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  qns_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_answersCreateManyInput = {
  a_ID?: number
  uza_ID?: string | null
  qns_ID?: number | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
}

export type uza_answersUpdateManyMutationInput = {
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_answersUncheckedUpdateManyInput = {
  a_ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  qns_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type Uza_answersListRelationFilter = {
  every?: Prisma.uza_answersWhereInput
  some?: Prisma.uza_answersWhereInput
  none?: Prisma.uza_answersWhereInput
}

export type uza_answersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type uza_answersOrderByRelevanceInput = {
  fields: Prisma.uza_answersOrderByRelevanceFieldEnum | Prisma.uza_answersOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type uza_answersCountOrderByAggregateInput = {
  a_ID?: Prisma.SortOrder
  uza_ID?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  ans_ID?: Prisma.SortOrder
  a_status?: Prisma.SortOrder
  uza_paid?: Prisma.SortOrder
}

export type uza_answersAvgOrderByAggregateInput = {
  a_ID?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
}

export type uza_answersMaxOrderByAggregateInput = {
  a_ID?: Prisma.SortOrder
  uza_ID?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  ans_ID?: Prisma.SortOrder
  a_status?: Prisma.SortOrder
  uza_paid?: Prisma.SortOrder
}

export type uza_answersMinOrderByAggregateInput = {
  a_ID?: Prisma.SortOrder
  uza_ID?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  ans_ID?: Prisma.SortOrder
  a_status?: Prisma.SortOrder
  uza_paid?: Prisma.SortOrder
}

export type uza_answersSumOrderByAggregateInput = {
  a_ID?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
}

export type uza_answersCreateNestedManyWithoutNasso_qnsInput = {
  create?: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput> | Prisma.uza_answersCreateWithoutNasso_qnsInput[] | Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput | Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput[]
  createMany?: Prisma.uza_answersCreateManyNasso_qnsInputEnvelope
  connect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
}

export type uza_answersUncheckedCreateNestedManyWithoutNasso_qnsInput = {
  create?: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput> | Prisma.uza_answersCreateWithoutNasso_qnsInput[] | Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput | Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput[]
  createMany?: Prisma.uza_answersCreateManyNasso_qnsInputEnvelope
  connect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
}

export type uza_answersUpdateManyWithoutNasso_qnsNestedInput = {
  create?: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput> | Prisma.uza_answersCreateWithoutNasso_qnsInput[] | Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput | Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput[]
  upsert?: Prisma.uza_answersUpsertWithWhereUniqueWithoutNasso_qnsInput | Prisma.uza_answersUpsertWithWhereUniqueWithoutNasso_qnsInput[]
  createMany?: Prisma.uza_answersCreateManyNasso_qnsInputEnvelope
  set?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  disconnect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  delete?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  connect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  update?: Prisma.uza_answersUpdateWithWhereUniqueWithoutNasso_qnsInput | Prisma.uza_answersUpdateWithWhereUniqueWithoutNasso_qnsInput[]
  updateMany?: Prisma.uza_answersUpdateManyWithWhereWithoutNasso_qnsInput | Prisma.uza_answersUpdateManyWithWhereWithoutNasso_qnsInput[]
  deleteMany?: Prisma.uza_answersScalarWhereInput | Prisma.uza_answersScalarWhereInput[]
}

export type uza_answersUncheckedUpdateManyWithoutNasso_qnsNestedInput = {
  create?: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput> | Prisma.uza_answersCreateWithoutNasso_qnsInput[] | Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput | Prisma.uza_answersCreateOrConnectWithoutNasso_qnsInput[]
  upsert?: Prisma.uza_answersUpsertWithWhereUniqueWithoutNasso_qnsInput | Prisma.uza_answersUpsertWithWhereUniqueWithoutNasso_qnsInput[]
  createMany?: Prisma.uza_answersCreateManyNasso_qnsInputEnvelope
  set?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  disconnect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  delete?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  connect?: Prisma.uza_answersWhereUniqueInput | Prisma.uza_answersWhereUniqueInput[]
  update?: Prisma.uza_answersUpdateWithWhereUniqueWithoutNasso_qnsInput | Prisma.uza_answersUpdateWithWhereUniqueWithoutNasso_qnsInput[]
  updateMany?: Prisma.uza_answersUpdateManyWithWhereWithoutNasso_qnsInput | Prisma.uza_answersUpdateManyWithWhereWithoutNasso_qnsInput[]
  deleteMany?: Prisma.uza_answersScalarWhereInput | Prisma.uza_answersScalarWhereInput[]
}

export type uza_answersCreateWithoutNasso_qnsInput = {
  uza_ID?: string | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
}

export type uza_answersUncheckedCreateWithoutNasso_qnsInput = {
  a_ID?: number
  uza_ID?: string | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
}

export type uza_answersCreateOrConnectWithoutNasso_qnsInput = {
  where: Prisma.uza_answersWhereUniqueInput
  create: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput>
}

export type uza_answersCreateManyNasso_qnsInputEnvelope = {
  data: Prisma.uza_answersCreateManyNasso_qnsInput | Prisma.uza_answersCreateManyNasso_qnsInput[]
  skipDuplicates?: boolean
}

export type uza_answersUpsertWithWhereUniqueWithoutNasso_qnsInput = {
  where: Prisma.uza_answersWhereUniqueInput
  update: Prisma.XOR<Prisma.uza_answersUpdateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedUpdateWithoutNasso_qnsInput>
  create: Prisma.XOR<Prisma.uza_answersCreateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedCreateWithoutNasso_qnsInput>
}

export type uza_answersUpdateWithWhereUniqueWithoutNasso_qnsInput = {
  where: Prisma.uza_answersWhereUniqueInput
  data: Prisma.XOR<Prisma.uza_answersUpdateWithoutNasso_qnsInput, Prisma.uza_answersUncheckedUpdateWithoutNasso_qnsInput>
}

export type uza_answersUpdateManyWithWhereWithoutNasso_qnsInput = {
  where: Prisma.uza_answersScalarWhereInput
  data: Prisma.XOR<Prisma.uza_answersUpdateManyMutationInput, Prisma.uza_answersUncheckedUpdateManyWithoutNasso_qnsInput>
}

export type uza_answersScalarWhereInput = {
  AND?: Prisma.uza_answersScalarWhereInput | Prisma.uza_answersScalarWhereInput[]
  OR?: Prisma.uza_answersScalarWhereInput[]
  NOT?: Prisma.uza_answersScalarWhereInput | Prisma.uza_answersScalarWhereInput[]
  a_ID?: Prisma.IntFilter<"uza_answers"> | number
  uza_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  qns_ID?: Prisma.IntNullableFilter<"uza_answers"> | number | null
  ans_ID?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  a_status?: Prisma.StringNullableFilter<"uza_answers"> | string | null
  uza_paid?: Prisma.StringNullableFilter<"uza_answers"> | string | null
}

export type uza_answersCreateManyNasso_qnsInput = {
  a_ID?: number
  uza_ID?: string | null
  ans_ID?: string | null
  a_status?: string | null
  uza_paid?: string | null
}

export type uza_answersUpdateWithoutNasso_qnsInput = {
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_answersUncheckedUpdateWithoutNasso_qnsInput = {
  a_ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type uza_answersUncheckedUpdateManyWithoutNasso_qnsInput = {
  a_ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_ID?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  a_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  uza_paid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type uza_answersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  a_ID?: boolean
  uza_ID?: boolean
  qns_ID?: boolean
  ans_ID?: boolean
  a_status?: boolean
  uza_paid?: boolean
  nasso_qns?: boolean | Prisma.uza_answers$nasso_qnsArgs<ExtArgs>
}, ExtArgs["result"]["uza_answers"]>



export type uza_answersSelectScalar = {
  a_ID?: boolean
  uza_ID?: boolean
  qns_ID?: boolean
  ans_ID?: boolean
  a_status?: boolean
  uza_paid?: boolean
}

export type uza_answersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"a_ID" | "uza_ID" | "qns_ID" | "ans_ID" | "a_status" | "uza_paid", ExtArgs["result"]["uza_answers"]>
export type uza_answersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  nasso_qns?: boolean | Prisma.uza_answers$nasso_qnsArgs<ExtArgs>
}

export type $uza_answersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "uza_answers"
  objects: {
    nasso_qns: Prisma.$nasso_qnsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    a_ID: number
    uza_ID: string | null
    qns_ID: number | null
    ans_ID: string | null
    a_status: string | null
    uza_paid: string | null
  }, ExtArgs["result"]["uza_answers"]>
  composites: {}
}

export type uza_answersGetPayload<S extends boolean | null | undefined | uza_answersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$uza_answersPayload, S>

export type uza_answersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<uza_answersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Uza_answersCountAggregateInputType | true
  }

export interface uza_answersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['uza_answers'], meta: { name: 'uza_answers' } }
  /**
   * Find zero or one Uza_answers that matches the filter.
   * @param {uza_answersFindUniqueArgs} args - Arguments to find a Uza_answers
   * @example
   * // Get one Uza_answers
   * const uza_answers = await prisma.uza_answers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends uza_answersFindUniqueArgs>(args: Prisma.SelectSubset<T, uza_answersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Uza_answers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {uza_answersFindUniqueOrThrowArgs} args - Arguments to find a Uza_answers
   * @example
   * // Get one Uza_answers
   * const uza_answers = await prisma.uza_answers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends uza_answersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, uza_answersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Uza_answers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersFindFirstArgs} args - Arguments to find a Uza_answers
   * @example
   * // Get one Uza_answers
   * const uza_answers = await prisma.uza_answers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends uza_answersFindFirstArgs>(args?: Prisma.SelectSubset<T, uza_answersFindFirstArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Uza_answers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersFindFirstOrThrowArgs} args - Arguments to find a Uza_answers
   * @example
   * // Get one Uza_answers
   * const uza_answers = await prisma.uza_answers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends uza_answersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, uza_answersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Uza_answers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Uza_answers
   * const uza_answers = await prisma.uza_answers.findMany()
   * 
   * // Get first 10 Uza_answers
   * const uza_answers = await prisma.uza_answers.findMany({ take: 10 })
   * 
   * // Only select the `a_ID`
   * const uza_answersWithA_IDOnly = await prisma.uza_answers.findMany({ select: { a_ID: true } })
   * 
   */
  findMany<T extends uza_answersFindManyArgs>(args?: Prisma.SelectSubset<T, uza_answersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Uza_answers.
   * @param {uza_answersCreateArgs} args - Arguments to create a Uza_answers.
   * @example
   * // Create one Uza_answers
   * const Uza_answers = await prisma.uza_answers.create({
   *   data: {
   *     // ... data to create a Uza_answers
   *   }
   * })
   * 
   */
  create<T extends uza_answersCreateArgs>(args: Prisma.SelectSubset<T, uza_answersCreateArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Uza_answers.
   * @param {uza_answersCreateManyArgs} args - Arguments to create many Uza_answers.
   * @example
   * // Create many Uza_answers
   * const uza_answers = await prisma.uza_answers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends uza_answersCreateManyArgs>(args?: Prisma.SelectSubset<T, uza_answersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Uza_answers.
   * @param {uza_answersDeleteArgs} args - Arguments to delete one Uza_answers.
   * @example
   * // Delete one Uza_answers
   * const Uza_answers = await prisma.uza_answers.delete({
   *   where: {
   *     // ... filter to delete one Uza_answers
   *   }
   * })
   * 
   */
  delete<T extends uza_answersDeleteArgs>(args: Prisma.SelectSubset<T, uza_answersDeleteArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Uza_answers.
   * @param {uza_answersUpdateArgs} args - Arguments to update one Uza_answers.
   * @example
   * // Update one Uza_answers
   * const uza_answers = await prisma.uza_answers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends uza_answersUpdateArgs>(args: Prisma.SelectSubset<T, uza_answersUpdateArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Uza_answers.
   * @param {uza_answersDeleteManyArgs} args - Arguments to filter Uza_answers to delete.
   * @example
   * // Delete a few Uza_answers
   * const { count } = await prisma.uza_answers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends uza_answersDeleteManyArgs>(args?: Prisma.SelectSubset<T, uza_answersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Uza_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Uza_answers
   * const uza_answers = await prisma.uza_answers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends uza_answersUpdateManyArgs>(args: Prisma.SelectSubset<T, uza_answersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Uza_answers.
   * @param {uza_answersUpsertArgs} args - Arguments to update or create a Uza_answers.
   * @example
   * // Update or create a Uza_answers
   * const uza_answers = await prisma.uza_answers.upsert({
   *   create: {
   *     // ... data to create a Uza_answers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Uza_answers we want to update
   *   }
   * })
   */
  upsert<T extends uza_answersUpsertArgs>(args: Prisma.SelectSubset<T, uza_answersUpsertArgs<ExtArgs>>): Prisma.Prisma__uza_answersClient<runtime.Types.Result.GetResult<Prisma.$uza_answersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Uza_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersCountArgs} args - Arguments to filter Uza_answers to count.
   * @example
   * // Count the number of Uza_answers
   * const count = await prisma.uza_answers.count({
   *   where: {
   *     // ... the filter for the Uza_answers we want to count
   *   }
   * })
  **/
  count<T extends uza_answersCountArgs>(
    args?: Prisma.Subset<T, uza_answersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Uza_answersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Uza_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Uza_answersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Uza_answersAggregateArgs>(args: Prisma.Subset<T, Uza_answersAggregateArgs>): Prisma.PrismaPromise<GetUza_answersAggregateType<T>>

  /**
   * Group by Uza_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {uza_answersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends uza_answersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: uza_answersGroupByArgs['orderBy'] }
      : { orderBy?: uza_answersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, uza_answersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUza_answersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the uza_answers model
 */
readonly fields: uza_answersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for uza_answers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__uza_answersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  nasso_qns<T extends Prisma.uza_answers$nasso_qnsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.uza_answers$nasso_qnsArgs<ExtArgs>>): Prisma.Prisma__nasso_qnsClient<runtime.Types.Result.GetResult<Prisma.$nasso_qnsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the uza_answers model
 */
export interface uza_answersFieldRefs {
  readonly a_ID: Prisma.FieldRef<"uza_answers", 'Int'>
  readonly uza_ID: Prisma.FieldRef<"uza_answers", 'String'>
  readonly qns_ID: Prisma.FieldRef<"uza_answers", 'Int'>
  readonly ans_ID: Prisma.FieldRef<"uza_answers", 'String'>
  readonly a_status: Prisma.FieldRef<"uza_answers", 'String'>
  readonly uza_paid: Prisma.FieldRef<"uza_answers", 'String'>
}
    

// Custom InputTypes
/**
 * uza_answers findUnique
 */
export type uza_answersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter, which uza_answers to fetch.
   */
  where: Prisma.uza_answersWhereUniqueInput
}

/**
 * uza_answers findUniqueOrThrow
 */
export type uza_answersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter, which uza_answers to fetch.
   */
  where: Prisma.uza_answersWhereUniqueInput
}

/**
 * uza_answers findFirst
 */
export type uza_answersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter, which uza_answers to fetch.
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_answers to fetch.
   */
  orderBy?: Prisma.uza_answersOrderByWithRelationInput | Prisma.uza_answersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for uza_answers.
   */
  cursor?: Prisma.uza_answersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of uza_answers.
   */
  distinct?: Prisma.Uza_answersScalarFieldEnum | Prisma.Uza_answersScalarFieldEnum[]
}

/**
 * uza_answers findFirstOrThrow
 */
export type uza_answersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter, which uza_answers to fetch.
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_answers to fetch.
   */
  orderBy?: Prisma.uza_answersOrderByWithRelationInput | Prisma.uza_answersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for uza_answers.
   */
  cursor?: Prisma.uza_answersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of uza_answers.
   */
  distinct?: Prisma.Uza_answersScalarFieldEnum | Prisma.Uza_answersScalarFieldEnum[]
}

/**
 * uza_answers findMany
 */
export type uza_answersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter, which uza_answers to fetch.
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of uza_answers to fetch.
   */
  orderBy?: Prisma.uza_answersOrderByWithRelationInput | Prisma.uza_answersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing uza_answers.
   */
  cursor?: Prisma.uza_answersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` uza_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` uza_answers.
   */
  skip?: number
  distinct?: Prisma.Uza_answersScalarFieldEnum | Prisma.Uza_answersScalarFieldEnum[]
}

/**
 * uza_answers create
 */
export type uza_answersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * The data needed to create a uza_answers.
   */
  data?: Prisma.XOR<Prisma.uza_answersCreateInput, Prisma.uza_answersUncheckedCreateInput>
}

/**
 * uza_answers createMany
 */
export type uza_answersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many uza_answers.
   */
  data: Prisma.uza_answersCreateManyInput | Prisma.uza_answersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * uza_answers update
 */
export type uza_answersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * The data needed to update a uza_answers.
   */
  data: Prisma.XOR<Prisma.uza_answersUpdateInput, Prisma.uza_answersUncheckedUpdateInput>
  /**
   * Choose, which uza_answers to update.
   */
  where: Prisma.uza_answersWhereUniqueInput
}

/**
 * uza_answers updateMany
 */
export type uza_answersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update uza_answers.
   */
  data: Prisma.XOR<Prisma.uza_answersUpdateManyMutationInput, Prisma.uza_answersUncheckedUpdateManyInput>
  /**
   * Filter which uza_answers to update
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * Limit how many uza_answers to update.
   */
  limit?: number
}

/**
 * uza_answers upsert
 */
export type uza_answersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * The filter to search for the uza_answers to update in case it exists.
   */
  where: Prisma.uza_answersWhereUniqueInput
  /**
   * In case the uza_answers found by the `where` argument doesn't exist, create a new uza_answers with this data.
   */
  create: Prisma.XOR<Prisma.uza_answersCreateInput, Prisma.uza_answersUncheckedCreateInput>
  /**
   * In case the uza_answers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.uza_answersUpdateInput, Prisma.uza_answersUncheckedUpdateInput>
}

/**
 * uza_answers delete
 */
export type uza_answersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
  /**
   * Filter which uza_answers to delete.
   */
  where: Prisma.uza_answersWhereUniqueInput
}

/**
 * uza_answers deleteMany
 */
export type uza_answersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which uza_answers to delete
   */
  where?: Prisma.uza_answersWhereInput
  /**
   * Limit how many uza_answers to delete.
   */
  limit?: number
}

/**
 * uza_answers.nasso_qns
 */
export type uza_answers$nasso_qnsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_qns
   */
  select?: Prisma.nasso_qnsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_qns
   */
  omit?: Prisma.nasso_qnsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_qnsInclude<ExtArgs> | null
  where?: Prisma.nasso_qnsWhereInput
}

/**
 * uza_answers without action
 */
export type uza_answersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the uza_answers
   */
  select?: Prisma.uza_answersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the uza_answers
   */
  omit?: Prisma.uza_answersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.uza_answersInclude<ExtArgs> | null
}
