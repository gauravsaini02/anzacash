
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_jifunze` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_jifunze
 * 
 */
export type tbl_jifunzeModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_jifunzePayload>

export type AggregateTbl_jifunze = {
  _count: Tbl_jifunzeCountAggregateOutputType | null
  _avg: Tbl_jifunzeAvgAggregateOutputType | null
  _sum: Tbl_jifunzeSumAggregateOutputType | null
  _min: Tbl_jifunzeMinAggregateOutputType | null
  _max: Tbl_jifunzeMaxAggregateOutputType | null
}

export type Tbl_jifunzeAvgAggregateOutputType = {
  j_Id: number | null
}

export type Tbl_jifunzeSumAggregateOutputType = {
  j_Id: number | null
}

export type Tbl_jifunzeMinAggregateOutputType = {
  j_Id: number | null
  j_vaudio: string | null
}

export type Tbl_jifunzeMaxAggregateOutputType = {
  j_Id: number | null
  j_vaudio: string | null
}

export type Tbl_jifunzeCountAggregateOutputType = {
  j_Id: number
  j_vaudio: number
  _all: number
}


export type Tbl_jifunzeAvgAggregateInputType = {
  j_Id?: true
}

export type Tbl_jifunzeSumAggregateInputType = {
  j_Id?: true
}

export type Tbl_jifunzeMinAggregateInputType = {
  j_Id?: true
  j_vaudio?: true
}

export type Tbl_jifunzeMaxAggregateInputType = {
  j_Id?: true
  j_vaudio?: true
}

export type Tbl_jifunzeCountAggregateInputType = {
  j_Id?: true
  j_vaudio?: true
  _all?: true
}

export type Tbl_jifunzeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_jifunze to aggregate.
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_jifunzes to fetch.
   */
  orderBy?: Prisma.tbl_jifunzeOrderByWithRelationInput | Prisma.tbl_jifunzeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_jifunzeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_jifunzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_jifunzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_jifunzes
  **/
  _count?: true | Tbl_jifunzeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_jifunzeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_jifunzeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_jifunzeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_jifunzeMaxAggregateInputType
}

export type GetTbl_jifunzeAggregateType<T extends Tbl_jifunzeAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_jifunze]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_jifunze[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_jifunze[P]>
}




export type tbl_jifunzeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_jifunzeWhereInput
  orderBy?: Prisma.tbl_jifunzeOrderByWithAggregationInput | Prisma.tbl_jifunzeOrderByWithAggregationInput[]
  by: Prisma.Tbl_jifunzeScalarFieldEnum[] | Prisma.Tbl_jifunzeScalarFieldEnum
  having?: Prisma.tbl_jifunzeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_jifunzeCountAggregateInputType | true
  _avg?: Tbl_jifunzeAvgAggregateInputType
  _sum?: Tbl_jifunzeSumAggregateInputType
  _min?: Tbl_jifunzeMinAggregateInputType
  _max?: Tbl_jifunzeMaxAggregateInputType
}

export type Tbl_jifunzeGroupByOutputType = {
  j_Id: number
  j_vaudio: string | null
  _count: Tbl_jifunzeCountAggregateOutputType | null
  _avg: Tbl_jifunzeAvgAggregateOutputType | null
  _sum: Tbl_jifunzeSumAggregateOutputType | null
  _min: Tbl_jifunzeMinAggregateOutputType | null
  _max: Tbl_jifunzeMaxAggregateOutputType | null
}

type GetTbl_jifunzeGroupByPayload<T extends tbl_jifunzeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_jifunzeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_jifunzeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_jifunzeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_jifunzeGroupByOutputType[P]>
      }
    >
  >



export type tbl_jifunzeWhereInput = {
  AND?: Prisma.tbl_jifunzeWhereInput | Prisma.tbl_jifunzeWhereInput[]
  OR?: Prisma.tbl_jifunzeWhereInput[]
  NOT?: Prisma.tbl_jifunzeWhereInput | Prisma.tbl_jifunzeWhereInput[]
  j_Id?: Prisma.IntFilter<"tbl_jifunze"> | number
  j_vaudio?: Prisma.StringNullableFilter<"tbl_jifunze"> | string | null
}

export type tbl_jifunzeOrderByWithRelationInput = {
  j_Id?: Prisma.SortOrder
  j_vaudio?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_jifunzeOrderByRelevanceInput
}

export type tbl_jifunzeWhereUniqueInput = Prisma.AtLeast<{
  j_Id?: number
  AND?: Prisma.tbl_jifunzeWhereInput | Prisma.tbl_jifunzeWhereInput[]
  OR?: Prisma.tbl_jifunzeWhereInput[]
  NOT?: Prisma.tbl_jifunzeWhereInput | Prisma.tbl_jifunzeWhereInput[]
  j_vaudio?: Prisma.StringNullableFilter<"tbl_jifunze"> | string | null
}, "j_Id">

export type tbl_jifunzeOrderByWithAggregationInput = {
  j_Id?: Prisma.SortOrder
  j_vaudio?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_jifunzeCountOrderByAggregateInput
  _avg?: Prisma.tbl_jifunzeAvgOrderByAggregateInput
  _max?: Prisma.tbl_jifunzeMaxOrderByAggregateInput
  _min?: Prisma.tbl_jifunzeMinOrderByAggregateInput
  _sum?: Prisma.tbl_jifunzeSumOrderByAggregateInput
}

export type tbl_jifunzeScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_jifunzeScalarWhereWithAggregatesInput | Prisma.tbl_jifunzeScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_jifunzeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_jifunzeScalarWhereWithAggregatesInput | Prisma.tbl_jifunzeScalarWhereWithAggregatesInput[]
  j_Id?: Prisma.IntWithAggregatesFilter<"tbl_jifunze"> | number
  j_vaudio?: Prisma.StringNullableWithAggregatesFilter<"tbl_jifunze"> | string | null
}

export type tbl_jifunzeCreateInput = {
  j_vaudio?: string | null
}

export type tbl_jifunzeUncheckedCreateInput = {
  j_Id?: number
  j_vaudio?: string | null
}

export type tbl_jifunzeUpdateInput = {
  j_vaudio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_jifunzeUncheckedUpdateInput = {
  j_Id?: Prisma.IntFieldUpdateOperationsInput | number
  j_vaudio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_jifunzeCreateManyInput = {
  j_Id?: number
  j_vaudio?: string | null
}

export type tbl_jifunzeUpdateManyMutationInput = {
  j_vaudio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_jifunzeUncheckedUpdateManyInput = {
  j_Id?: Prisma.IntFieldUpdateOperationsInput | number
  j_vaudio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_jifunzeOrderByRelevanceInput = {
  fields: Prisma.tbl_jifunzeOrderByRelevanceFieldEnum | Prisma.tbl_jifunzeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_jifunzeCountOrderByAggregateInput = {
  j_Id?: Prisma.SortOrder
  j_vaudio?: Prisma.SortOrder
}

export type tbl_jifunzeAvgOrderByAggregateInput = {
  j_Id?: Prisma.SortOrder
}

export type tbl_jifunzeMaxOrderByAggregateInput = {
  j_Id?: Prisma.SortOrder
  j_vaudio?: Prisma.SortOrder
}

export type tbl_jifunzeMinOrderByAggregateInput = {
  j_Id?: Prisma.SortOrder
  j_vaudio?: Prisma.SortOrder
}

export type tbl_jifunzeSumOrderByAggregateInput = {
  j_Id?: Prisma.SortOrder
}



export type tbl_jifunzeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  j_Id?: boolean
  j_vaudio?: boolean
}, ExtArgs["result"]["tbl_jifunze"]>



export type tbl_jifunzeSelectScalar = {
  j_Id?: boolean
  j_vaudio?: boolean
}

export type tbl_jifunzeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"j_Id" | "j_vaudio", ExtArgs["result"]["tbl_jifunze"]>

export type $tbl_jifunzePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_jifunze"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    j_Id: number
    j_vaudio: string | null
  }, ExtArgs["result"]["tbl_jifunze"]>
  composites: {}
}

export type tbl_jifunzeGetPayload<S extends boolean | null | undefined | tbl_jifunzeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload, S>

export type tbl_jifunzeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_jifunzeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_jifunzeCountAggregateInputType | true
  }

export interface tbl_jifunzeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_jifunze'], meta: { name: 'tbl_jifunze' } }
  /**
   * Find zero or one Tbl_jifunze that matches the filter.
   * @param {tbl_jifunzeFindUniqueArgs} args - Arguments to find a Tbl_jifunze
   * @example
   * // Get one Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_jifunzeFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_jifunze that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_jifunzeFindUniqueOrThrowArgs} args - Arguments to find a Tbl_jifunze
   * @example
   * // Get one Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_jifunzeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_jifunze that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeFindFirstArgs} args - Arguments to find a Tbl_jifunze
   * @example
   * // Get one Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_jifunzeFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_jifunzeFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_jifunze that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeFindFirstOrThrowArgs} args - Arguments to find a Tbl_jifunze
   * @example
   * // Get one Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_jifunzeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_jifunzeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_jifunzes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_jifunzes
   * const tbl_jifunzes = await prisma.tbl_jifunze.findMany()
   * 
   * // Get first 10 Tbl_jifunzes
   * const tbl_jifunzes = await prisma.tbl_jifunze.findMany({ take: 10 })
   * 
   * // Only select the `j_Id`
   * const tbl_jifunzeWithJ_IdOnly = await prisma.tbl_jifunze.findMany({ select: { j_Id: true } })
   * 
   */
  findMany<T extends tbl_jifunzeFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_jifunzeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_jifunze.
   * @param {tbl_jifunzeCreateArgs} args - Arguments to create a Tbl_jifunze.
   * @example
   * // Create one Tbl_jifunze
   * const Tbl_jifunze = await prisma.tbl_jifunze.create({
   *   data: {
   *     // ... data to create a Tbl_jifunze
   *   }
   * })
   * 
   */
  create<T extends tbl_jifunzeCreateArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_jifunzes.
   * @param {tbl_jifunzeCreateManyArgs} args - Arguments to create many Tbl_jifunzes.
   * @example
   * // Create many Tbl_jifunzes
   * const tbl_jifunze = await prisma.tbl_jifunze.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_jifunzeCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_jifunzeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_jifunze.
   * @param {tbl_jifunzeDeleteArgs} args - Arguments to delete one Tbl_jifunze.
   * @example
   * // Delete one Tbl_jifunze
   * const Tbl_jifunze = await prisma.tbl_jifunze.delete({
   *   where: {
   *     // ... filter to delete one Tbl_jifunze
   *   }
   * })
   * 
   */
  delete<T extends tbl_jifunzeDeleteArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_jifunze.
   * @param {tbl_jifunzeUpdateArgs} args - Arguments to update one Tbl_jifunze.
   * @example
   * // Update one Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_jifunzeUpdateArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_jifunzes.
   * @param {tbl_jifunzeDeleteManyArgs} args - Arguments to filter Tbl_jifunzes to delete.
   * @example
   * // Delete a few Tbl_jifunzes
   * const { count } = await prisma.tbl_jifunze.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_jifunzeDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_jifunzeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_jifunzes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_jifunzes
   * const tbl_jifunze = await prisma.tbl_jifunze.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_jifunzeUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_jifunze.
   * @param {tbl_jifunzeUpsertArgs} args - Arguments to update or create a Tbl_jifunze.
   * @example
   * // Update or create a Tbl_jifunze
   * const tbl_jifunze = await prisma.tbl_jifunze.upsert({
   *   create: {
   *     // ... data to create a Tbl_jifunze
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_jifunze we want to update
   *   }
   * })
   */
  upsert<T extends tbl_jifunzeUpsertArgs>(args: Prisma.SelectSubset<T, tbl_jifunzeUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_jifunzeClient<runtime.Types.Result.GetResult<Prisma.$tbl_jifunzePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_jifunzes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeCountArgs} args - Arguments to filter Tbl_jifunzes to count.
   * @example
   * // Count the number of Tbl_jifunzes
   * const count = await prisma.tbl_jifunze.count({
   *   where: {
   *     // ... the filter for the Tbl_jifunzes we want to count
   *   }
   * })
  **/
  count<T extends tbl_jifunzeCountArgs>(
    args?: Prisma.Subset<T, tbl_jifunzeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_jifunzeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_jifunze.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_jifunzeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_jifunzeAggregateArgs>(args: Prisma.Subset<T, Tbl_jifunzeAggregateArgs>): Prisma.PrismaPromise<GetTbl_jifunzeAggregateType<T>>

  /**
   * Group by Tbl_jifunze.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_jifunzeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_jifunzeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_jifunzeGroupByArgs['orderBy'] }
      : { orderBy?: tbl_jifunzeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_jifunzeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_jifunzeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_jifunze model
 */
readonly fields: tbl_jifunzeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_jifunze.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_jifunzeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_jifunze model
 */
export interface tbl_jifunzeFieldRefs {
  readonly j_Id: Prisma.FieldRef<"tbl_jifunze", 'Int'>
  readonly j_vaudio: Prisma.FieldRef<"tbl_jifunze", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_jifunze findUnique
 */
export type tbl_jifunzeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter, which tbl_jifunze to fetch.
   */
  where: Prisma.tbl_jifunzeWhereUniqueInput
}

/**
 * tbl_jifunze findUniqueOrThrow
 */
export type tbl_jifunzeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter, which tbl_jifunze to fetch.
   */
  where: Prisma.tbl_jifunzeWhereUniqueInput
}

/**
 * tbl_jifunze findFirst
 */
export type tbl_jifunzeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter, which tbl_jifunze to fetch.
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_jifunzes to fetch.
   */
  orderBy?: Prisma.tbl_jifunzeOrderByWithRelationInput | Prisma.tbl_jifunzeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_jifunzes.
   */
  cursor?: Prisma.tbl_jifunzeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_jifunzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_jifunzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_jifunzes.
   */
  distinct?: Prisma.Tbl_jifunzeScalarFieldEnum | Prisma.Tbl_jifunzeScalarFieldEnum[]
}

/**
 * tbl_jifunze findFirstOrThrow
 */
export type tbl_jifunzeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter, which tbl_jifunze to fetch.
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_jifunzes to fetch.
   */
  orderBy?: Prisma.tbl_jifunzeOrderByWithRelationInput | Prisma.tbl_jifunzeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_jifunzes.
   */
  cursor?: Prisma.tbl_jifunzeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_jifunzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_jifunzes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_jifunzes.
   */
  distinct?: Prisma.Tbl_jifunzeScalarFieldEnum | Prisma.Tbl_jifunzeScalarFieldEnum[]
}

/**
 * tbl_jifunze findMany
 */
export type tbl_jifunzeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter, which tbl_jifunzes to fetch.
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_jifunzes to fetch.
   */
  orderBy?: Prisma.tbl_jifunzeOrderByWithRelationInput | Prisma.tbl_jifunzeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_jifunzes.
   */
  cursor?: Prisma.tbl_jifunzeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_jifunzes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_jifunzes.
   */
  skip?: number
  distinct?: Prisma.Tbl_jifunzeScalarFieldEnum | Prisma.Tbl_jifunzeScalarFieldEnum[]
}

/**
 * tbl_jifunze create
 */
export type tbl_jifunzeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_jifunze.
   */
  data?: Prisma.XOR<Prisma.tbl_jifunzeCreateInput, Prisma.tbl_jifunzeUncheckedCreateInput>
}

/**
 * tbl_jifunze createMany
 */
export type tbl_jifunzeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_jifunzes.
   */
  data: Prisma.tbl_jifunzeCreateManyInput | Prisma.tbl_jifunzeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_jifunze update
 */
export type tbl_jifunzeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_jifunze.
   */
  data: Prisma.XOR<Prisma.tbl_jifunzeUpdateInput, Prisma.tbl_jifunzeUncheckedUpdateInput>
  /**
   * Choose, which tbl_jifunze to update.
   */
  where: Prisma.tbl_jifunzeWhereUniqueInput
}

/**
 * tbl_jifunze updateMany
 */
export type tbl_jifunzeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_jifunzes.
   */
  data: Prisma.XOR<Prisma.tbl_jifunzeUpdateManyMutationInput, Prisma.tbl_jifunzeUncheckedUpdateManyInput>
  /**
   * Filter which tbl_jifunzes to update
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * Limit how many tbl_jifunzes to update.
   */
  limit?: number
}

/**
 * tbl_jifunze upsert
 */
export type tbl_jifunzeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_jifunze to update in case it exists.
   */
  where: Prisma.tbl_jifunzeWhereUniqueInput
  /**
   * In case the tbl_jifunze found by the `where` argument doesn't exist, create a new tbl_jifunze with this data.
   */
  create: Prisma.XOR<Prisma.tbl_jifunzeCreateInput, Prisma.tbl_jifunzeUncheckedCreateInput>
  /**
   * In case the tbl_jifunze was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_jifunzeUpdateInput, Prisma.tbl_jifunzeUncheckedUpdateInput>
}

/**
 * tbl_jifunze delete
 */
export type tbl_jifunzeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
  /**
   * Filter which tbl_jifunze to delete.
   */
  where: Prisma.tbl_jifunzeWhereUniqueInput
}

/**
 * tbl_jifunze deleteMany
 */
export type tbl_jifunzeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_jifunzes to delete
   */
  where?: Prisma.tbl_jifunzeWhereInput
  /**
   * Limit how many tbl_jifunzes to delete.
   */
  limit?: number
}

/**
 * tbl_jifunze without action
 */
export type tbl_jifunzeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_jifunze
   */
  select?: Prisma.tbl_jifunzeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_jifunze
   */
  omit?: Prisma.tbl_jifunzeOmit<ExtArgs> | null
}
