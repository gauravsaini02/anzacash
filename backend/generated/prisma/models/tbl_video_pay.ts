
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_video_pay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_video_pay
 * 
 */
export type tbl_video_payModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_video_payPayload>

export type AggregateTbl_video_pay = {
  _count: Tbl_video_payCountAggregateOutputType | null
  _avg: Tbl_video_payAvgAggregateOutputType | null
  _sum: Tbl_video_paySumAggregateOutputType | null
  _min: Tbl_video_payMinAggregateOutputType | null
  _max: Tbl_video_payMaxAggregateOutputType | null
}

export type Tbl_video_payAvgAggregateOutputType = {
  ID: number | null
}

export type Tbl_video_paySumAggregateOutputType = {
  ID: number | null
}

export type Tbl_video_payMinAggregateOutputType = {
  ID: number | null
  uza: string | null
  status: string | null
}

export type Tbl_video_payMaxAggregateOutputType = {
  ID: number | null
  uza: string | null
  status: string | null
}

export type Tbl_video_payCountAggregateOutputType = {
  ID: number
  uza: number
  status: number
  _all: number
}


export type Tbl_video_payAvgAggregateInputType = {
  ID?: true
}

export type Tbl_video_paySumAggregateInputType = {
  ID?: true
}

export type Tbl_video_payMinAggregateInputType = {
  ID?: true
  uza?: true
  status?: true
}

export type Tbl_video_payMaxAggregateInputType = {
  ID?: true
  uza?: true
  status?: true
}

export type Tbl_video_payCountAggregateInputType = {
  ID?: true
  uza?: true
  status?: true
  _all?: true
}

export type Tbl_video_payAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_video_pay to aggregate.
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_video_pays to fetch.
   */
  orderBy?: Prisma.tbl_video_payOrderByWithRelationInput | Prisma.tbl_video_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_video_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_video_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_video_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_video_pays
  **/
  _count?: true | Tbl_video_payCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_video_payAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_video_paySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_video_payMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_video_payMaxAggregateInputType
}

export type GetTbl_video_payAggregateType<T extends Tbl_video_payAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_video_pay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_video_pay[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_video_pay[P]>
}




export type tbl_video_payGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_video_payWhereInput
  orderBy?: Prisma.tbl_video_payOrderByWithAggregationInput | Prisma.tbl_video_payOrderByWithAggregationInput[]
  by: Prisma.Tbl_video_payScalarFieldEnum[] | Prisma.Tbl_video_payScalarFieldEnum
  having?: Prisma.tbl_video_payScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_video_payCountAggregateInputType | true
  _avg?: Tbl_video_payAvgAggregateInputType
  _sum?: Tbl_video_paySumAggregateInputType
  _min?: Tbl_video_payMinAggregateInputType
  _max?: Tbl_video_payMaxAggregateInputType
}

export type Tbl_video_payGroupByOutputType = {
  ID: number
  uza: string | null
  status: string | null
  _count: Tbl_video_payCountAggregateOutputType | null
  _avg: Tbl_video_payAvgAggregateOutputType | null
  _sum: Tbl_video_paySumAggregateOutputType | null
  _min: Tbl_video_payMinAggregateOutputType | null
  _max: Tbl_video_payMaxAggregateOutputType | null
}

type GetTbl_video_payGroupByPayload<T extends tbl_video_payGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_video_payGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_video_payGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_video_payGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_video_payGroupByOutputType[P]>
      }
    >
  >



export type tbl_video_payWhereInput = {
  AND?: Prisma.tbl_video_payWhereInput | Prisma.tbl_video_payWhereInput[]
  OR?: Prisma.tbl_video_payWhereInput[]
  NOT?: Prisma.tbl_video_payWhereInput | Prisma.tbl_video_payWhereInput[]
  ID?: Prisma.IntFilter<"tbl_video_pay"> | number
  uza?: Prisma.StringNullableFilter<"tbl_video_pay"> | string | null
  status?: Prisma.StringNullableFilter<"tbl_video_pay"> | string | null
}

export type tbl_video_payOrderByWithRelationInput = {
  ID?: Prisma.SortOrder
  uza?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_video_payOrderByRelevanceInput
}

export type tbl_video_payWhereUniqueInput = Prisma.AtLeast<{
  ID?: number
  AND?: Prisma.tbl_video_payWhereInput | Prisma.tbl_video_payWhereInput[]
  OR?: Prisma.tbl_video_payWhereInput[]
  NOT?: Prisma.tbl_video_payWhereInput | Prisma.tbl_video_payWhereInput[]
  uza?: Prisma.StringNullableFilter<"tbl_video_pay"> | string | null
  status?: Prisma.StringNullableFilter<"tbl_video_pay"> | string | null
}, "ID">

export type tbl_video_payOrderByWithAggregationInput = {
  ID?: Prisma.SortOrder
  uza?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_video_payCountOrderByAggregateInput
  _avg?: Prisma.tbl_video_payAvgOrderByAggregateInput
  _max?: Prisma.tbl_video_payMaxOrderByAggregateInput
  _min?: Prisma.tbl_video_payMinOrderByAggregateInput
  _sum?: Prisma.tbl_video_paySumOrderByAggregateInput
}

export type tbl_video_payScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_video_payScalarWhereWithAggregatesInput | Prisma.tbl_video_payScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_video_payScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_video_payScalarWhereWithAggregatesInput | Prisma.tbl_video_payScalarWhereWithAggregatesInput[]
  ID?: Prisma.IntWithAggregatesFilter<"tbl_video_pay"> | number
  uza?: Prisma.StringNullableWithAggregatesFilter<"tbl_video_pay"> | string | null
  status?: Prisma.StringNullableWithAggregatesFilter<"tbl_video_pay"> | string | null
}

export type tbl_video_payCreateInput = {
  uza?: string | null
  status?: string | null
}

export type tbl_video_payUncheckedCreateInput = {
  ID?: number
  uza?: string | null
  status?: string | null
}

export type tbl_video_payUpdateInput = {
  uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_video_payUncheckedUpdateInput = {
  ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_video_payCreateManyInput = {
  ID?: number
  uza?: string | null
  status?: string | null
}

export type tbl_video_payUpdateManyMutationInput = {
  uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_video_payUncheckedUpdateManyInput = {
  ID?: Prisma.IntFieldUpdateOperationsInput | number
  uza?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_video_payOrderByRelevanceInput = {
  fields: Prisma.tbl_video_payOrderByRelevanceFieldEnum | Prisma.tbl_video_payOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_video_payCountOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  uza?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type tbl_video_payAvgOrderByAggregateInput = {
  ID?: Prisma.SortOrder
}

export type tbl_video_payMaxOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  uza?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type tbl_video_payMinOrderByAggregateInput = {
  ID?: Prisma.SortOrder
  uza?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type tbl_video_paySumOrderByAggregateInput = {
  ID?: Prisma.SortOrder
}



export type tbl_video_paySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ID?: boolean
  uza?: boolean
  status?: boolean
}, ExtArgs["result"]["tbl_video_pay"]>



export type tbl_video_paySelectScalar = {
  ID?: boolean
  uza?: boolean
  status?: boolean
}

export type tbl_video_payOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"ID" | "uza" | "status", ExtArgs["result"]["tbl_video_pay"]>

export type $tbl_video_payPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_video_pay"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    ID: number
    uza: string | null
    status: string | null
  }, ExtArgs["result"]["tbl_video_pay"]>
  composites: {}
}

export type tbl_video_payGetPayload<S extends boolean | null | undefined | tbl_video_payDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload, S>

export type tbl_video_payCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_video_payFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_video_payCountAggregateInputType | true
  }

export interface tbl_video_payDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_video_pay'], meta: { name: 'tbl_video_pay' } }
  /**
   * Find zero or one Tbl_video_pay that matches the filter.
   * @param {tbl_video_payFindUniqueArgs} args - Arguments to find a Tbl_video_pay
   * @example
   * // Get one Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_video_payFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_video_payFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_video_pay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_video_payFindUniqueOrThrowArgs} args - Arguments to find a Tbl_video_pay
   * @example
   * // Get one Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_video_payFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_video_payFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_video_pay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payFindFirstArgs} args - Arguments to find a Tbl_video_pay
   * @example
   * // Get one Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_video_payFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_video_payFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_video_pay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payFindFirstOrThrowArgs} args - Arguments to find a Tbl_video_pay
   * @example
   * // Get one Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_video_payFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_video_payFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_video_pays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_video_pays
   * const tbl_video_pays = await prisma.tbl_video_pay.findMany()
   * 
   * // Get first 10 Tbl_video_pays
   * const tbl_video_pays = await prisma.tbl_video_pay.findMany({ take: 10 })
   * 
   * // Only select the `ID`
   * const tbl_video_payWithIDOnly = await prisma.tbl_video_pay.findMany({ select: { ID: true } })
   * 
   */
  findMany<T extends tbl_video_payFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_video_payFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_video_pay.
   * @param {tbl_video_payCreateArgs} args - Arguments to create a Tbl_video_pay.
   * @example
   * // Create one Tbl_video_pay
   * const Tbl_video_pay = await prisma.tbl_video_pay.create({
   *   data: {
   *     // ... data to create a Tbl_video_pay
   *   }
   * })
   * 
   */
  create<T extends tbl_video_payCreateArgs>(args: Prisma.SelectSubset<T, tbl_video_payCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_video_pays.
   * @param {tbl_video_payCreateManyArgs} args - Arguments to create many Tbl_video_pays.
   * @example
   * // Create many Tbl_video_pays
   * const tbl_video_pay = await prisma.tbl_video_pay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_video_payCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_video_payCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_video_pay.
   * @param {tbl_video_payDeleteArgs} args - Arguments to delete one Tbl_video_pay.
   * @example
   * // Delete one Tbl_video_pay
   * const Tbl_video_pay = await prisma.tbl_video_pay.delete({
   *   where: {
   *     // ... filter to delete one Tbl_video_pay
   *   }
   * })
   * 
   */
  delete<T extends tbl_video_payDeleteArgs>(args: Prisma.SelectSubset<T, tbl_video_payDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_video_pay.
   * @param {tbl_video_payUpdateArgs} args - Arguments to update one Tbl_video_pay.
   * @example
   * // Update one Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_video_payUpdateArgs>(args: Prisma.SelectSubset<T, tbl_video_payUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_video_pays.
   * @param {tbl_video_payDeleteManyArgs} args - Arguments to filter Tbl_video_pays to delete.
   * @example
   * // Delete a few Tbl_video_pays
   * const { count } = await prisma.tbl_video_pay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_video_payDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_video_payDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_video_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_video_pays
   * const tbl_video_pay = await prisma.tbl_video_pay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_video_payUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_video_payUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_video_pay.
   * @param {tbl_video_payUpsertArgs} args - Arguments to update or create a Tbl_video_pay.
   * @example
   * // Update or create a Tbl_video_pay
   * const tbl_video_pay = await prisma.tbl_video_pay.upsert({
   *   create: {
   *     // ... data to create a Tbl_video_pay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_video_pay we want to update
   *   }
   * })
   */
  upsert<T extends tbl_video_payUpsertArgs>(args: Prisma.SelectSubset<T, tbl_video_payUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_video_payClient<runtime.Types.Result.GetResult<Prisma.$tbl_video_payPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_video_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payCountArgs} args - Arguments to filter Tbl_video_pays to count.
   * @example
   * // Count the number of Tbl_video_pays
   * const count = await prisma.tbl_video_pay.count({
   *   where: {
   *     // ... the filter for the Tbl_video_pays we want to count
   *   }
   * })
  **/
  count<T extends tbl_video_payCountArgs>(
    args?: Prisma.Subset<T, tbl_video_payCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_video_payCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_video_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_video_payAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_video_payAggregateArgs>(args: Prisma.Subset<T, Tbl_video_payAggregateArgs>): Prisma.PrismaPromise<GetTbl_video_payAggregateType<T>>

  /**
   * Group by Tbl_video_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_video_payGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_video_payGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_video_payGroupByArgs['orderBy'] }
      : { orderBy?: tbl_video_payGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_video_payGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_video_payGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_video_pay model
 */
readonly fields: tbl_video_payFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_video_pay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_video_payClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_video_pay model
 */
export interface tbl_video_payFieldRefs {
  readonly ID: Prisma.FieldRef<"tbl_video_pay", 'Int'>
  readonly uza: Prisma.FieldRef<"tbl_video_pay", 'String'>
  readonly status: Prisma.FieldRef<"tbl_video_pay", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_video_pay findUnique
 */
export type tbl_video_payFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter, which tbl_video_pay to fetch.
   */
  where: Prisma.tbl_video_payWhereUniqueInput
}

/**
 * tbl_video_pay findUniqueOrThrow
 */
export type tbl_video_payFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter, which tbl_video_pay to fetch.
   */
  where: Prisma.tbl_video_payWhereUniqueInput
}

/**
 * tbl_video_pay findFirst
 */
export type tbl_video_payFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter, which tbl_video_pay to fetch.
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_video_pays to fetch.
   */
  orderBy?: Prisma.tbl_video_payOrderByWithRelationInput | Prisma.tbl_video_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_video_pays.
   */
  cursor?: Prisma.tbl_video_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_video_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_video_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_video_pays.
   */
  distinct?: Prisma.Tbl_video_payScalarFieldEnum | Prisma.Tbl_video_payScalarFieldEnum[]
}

/**
 * tbl_video_pay findFirstOrThrow
 */
export type tbl_video_payFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter, which tbl_video_pay to fetch.
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_video_pays to fetch.
   */
  orderBy?: Prisma.tbl_video_payOrderByWithRelationInput | Prisma.tbl_video_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_video_pays.
   */
  cursor?: Prisma.tbl_video_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_video_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_video_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_video_pays.
   */
  distinct?: Prisma.Tbl_video_payScalarFieldEnum | Prisma.Tbl_video_payScalarFieldEnum[]
}

/**
 * tbl_video_pay findMany
 */
export type tbl_video_payFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter, which tbl_video_pays to fetch.
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_video_pays to fetch.
   */
  orderBy?: Prisma.tbl_video_payOrderByWithRelationInput | Prisma.tbl_video_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_video_pays.
   */
  cursor?: Prisma.tbl_video_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_video_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_video_pays.
   */
  skip?: number
  distinct?: Prisma.Tbl_video_payScalarFieldEnum | Prisma.Tbl_video_payScalarFieldEnum[]
}

/**
 * tbl_video_pay create
 */
export type tbl_video_payCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_video_pay.
   */
  data?: Prisma.XOR<Prisma.tbl_video_payCreateInput, Prisma.tbl_video_payUncheckedCreateInput>
}

/**
 * tbl_video_pay createMany
 */
export type tbl_video_payCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_video_pays.
   */
  data: Prisma.tbl_video_payCreateManyInput | Prisma.tbl_video_payCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_video_pay update
 */
export type tbl_video_payUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_video_pay.
   */
  data: Prisma.XOR<Prisma.tbl_video_payUpdateInput, Prisma.tbl_video_payUncheckedUpdateInput>
  /**
   * Choose, which tbl_video_pay to update.
   */
  where: Prisma.tbl_video_payWhereUniqueInput
}

/**
 * tbl_video_pay updateMany
 */
export type tbl_video_payUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_video_pays.
   */
  data: Prisma.XOR<Prisma.tbl_video_payUpdateManyMutationInput, Prisma.tbl_video_payUncheckedUpdateManyInput>
  /**
   * Filter which tbl_video_pays to update
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * Limit how many tbl_video_pays to update.
   */
  limit?: number
}

/**
 * tbl_video_pay upsert
 */
export type tbl_video_payUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_video_pay to update in case it exists.
   */
  where: Prisma.tbl_video_payWhereUniqueInput
  /**
   * In case the tbl_video_pay found by the `where` argument doesn't exist, create a new tbl_video_pay with this data.
   */
  create: Prisma.XOR<Prisma.tbl_video_payCreateInput, Prisma.tbl_video_payUncheckedCreateInput>
  /**
   * In case the tbl_video_pay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_video_payUpdateInput, Prisma.tbl_video_payUncheckedUpdateInput>
}

/**
 * tbl_video_pay delete
 */
export type tbl_video_payDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
  /**
   * Filter which tbl_video_pay to delete.
   */
  where: Prisma.tbl_video_payWhereUniqueInput
}

/**
 * tbl_video_pay deleteMany
 */
export type tbl_video_payDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_video_pays to delete
   */
  where?: Prisma.tbl_video_payWhereInput
  /**
   * Limit how many tbl_video_pays to delete.
   */
  limit?: number
}

/**
 * tbl_video_pay without action
 */
export type tbl_video_payDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_video_pay
   */
  select?: Prisma.tbl_video_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_video_pay
   */
  omit?: Prisma.tbl_video_payOmit<ExtArgs> | null
}
