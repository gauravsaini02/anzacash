
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `login_noti` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model login_noti
 * 
 */
export type login_notiModel = runtime.Types.Result.DefaultSelection<Prisma.$login_notiPayload>

export type AggregateLogin_noti = {
  _count: Login_notiCountAggregateOutputType | null
  _avg: Login_notiAvgAggregateOutputType | null
  _sum: Login_notiSumAggregateOutputType | null
  _min: Login_notiMinAggregateOutputType | null
  _max: Login_notiMaxAggregateOutputType | null
}

export type Login_notiAvgAggregateOutputType = {
  noti_ID: number | null
}

export type Login_notiSumAggregateOutputType = {
  noti_ID: number | null
}

export type Login_notiMinAggregateOutputType = {
  noti_ID: number | null
  noti_txt: string | null
}

export type Login_notiMaxAggregateOutputType = {
  noti_ID: number | null
  noti_txt: string | null
}

export type Login_notiCountAggregateOutputType = {
  noti_ID: number
  noti_txt: number
  _all: number
}


export type Login_notiAvgAggregateInputType = {
  noti_ID?: true
}

export type Login_notiSumAggregateInputType = {
  noti_ID?: true
}

export type Login_notiMinAggregateInputType = {
  noti_ID?: true
  noti_txt?: true
}

export type Login_notiMaxAggregateInputType = {
  noti_ID?: true
  noti_txt?: true
}

export type Login_notiCountAggregateInputType = {
  noti_ID?: true
  noti_txt?: true
  _all?: true
}

export type Login_notiAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which login_noti to aggregate.
   */
  where?: Prisma.login_notiWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of login_notis to fetch.
   */
  orderBy?: Prisma.login_notiOrderByWithRelationInput | Prisma.login_notiOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.login_notiWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` login_notis from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` login_notis.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned login_notis
  **/
  _count?: true | Login_notiCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Login_notiAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Login_notiSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Login_notiMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Login_notiMaxAggregateInputType
}

export type GetLogin_notiAggregateType<T extends Login_notiAggregateArgs> = {
      [P in keyof T & keyof AggregateLogin_noti]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLogin_noti[P]>
    : Prisma.GetScalarType<T[P], AggregateLogin_noti[P]>
}




export type login_notiGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.login_notiWhereInput
  orderBy?: Prisma.login_notiOrderByWithAggregationInput | Prisma.login_notiOrderByWithAggregationInput[]
  by: Prisma.Login_notiScalarFieldEnum[] | Prisma.Login_notiScalarFieldEnum
  having?: Prisma.login_notiScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Login_notiCountAggregateInputType | true
  _avg?: Login_notiAvgAggregateInputType
  _sum?: Login_notiSumAggregateInputType
  _min?: Login_notiMinAggregateInputType
  _max?: Login_notiMaxAggregateInputType
}

export type Login_notiGroupByOutputType = {
  noti_ID: number
  noti_txt: string | null
  _count: Login_notiCountAggregateOutputType | null
  _avg: Login_notiAvgAggregateOutputType | null
  _sum: Login_notiSumAggregateOutputType | null
  _min: Login_notiMinAggregateOutputType | null
  _max: Login_notiMaxAggregateOutputType | null
}

type GetLogin_notiGroupByPayload<T extends login_notiGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Login_notiGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Login_notiGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Login_notiGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Login_notiGroupByOutputType[P]>
      }
    >
  >



export type login_notiWhereInput = {
  AND?: Prisma.login_notiWhereInput | Prisma.login_notiWhereInput[]
  OR?: Prisma.login_notiWhereInput[]
  NOT?: Prisma.login_notiWhereInput | Prisma.login_notiWhereInput[]
  noti_ID?: Prisma.IntFilter<"login_noti"> | number
  noti_txt?: Prisma.StringNullableFilter<"login_noti"> | string | null
}

export type login_notiOrderByWithRelationInput = {
  noti_ID?: Prisma.SortOrder
  noti_txt?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.login_notiOrderByRelevanceInput
}

export type login_notiWhereUniqueInput = Prisma.AtLeast<{
  noti_ID?: number
  AND?: Prisma.login_notiWhereInput | Prisma.login_notiWhereInput[]
  OR?: Prisma.login_notiWhereInput[]
  NOT?: Prisma.login_notiWhereInput | Prisma.login_notiWhereInput[]
  noti_txt?: Prisma.StringNullableFilter<"login_noti"> | string | null
}, "noti_ID">

export type login_notiOrderByWithAggregationInput = {
  noti_ID?: Prisma.SortOrder
  noti_txt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.login_notiCountOrderByAggregateInput
  _avg?: Prisma.login_notiAvgOrderByAggregateInput
  _max?: Prisma.login_notiMaxOrderByAggregateInput
  _min?: Prisma.login_notiMinOrderByAggregateInput
  _sum?: Prisma.login_notiSumOrderByAggregateInput
}

export type login_notiScalarWhereWithAggregatesInput = {
  AND?: Prisma.login_notiScalarWhereWithAggregatesInput | Prisma.login_notiScalarWhereWithAggregatesInput[]
  OR?: Prisma.login_notiScalarWhereWithAggregatesInput[]
  NOT?: Prisma.login_notiScalarWhereWithAggregatesInput | Prisma.login_notiScalarWhereWithAggregatesInput[]
  noti_ID?: Prisma.IntWithAggregatesFilter<"login_noti"> | number
  noti_txt?: Prisma.StringNullableWithAggregatesFilter<"login_noti"> | string | null
}

export type login_notiCreateInput = {
  noti_ID: number
  noti_txt?: string | null
}

export type login_notiUncheckedCreateInput = {
  noti_ID: number
  noti_txt?: string | null
}

export type login_notiUpdateInput = {
  noti_ID?: Prisma.IntFieldUpdateOperationsInput | number
  noti_txt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type login_notiUncheckedUpdateInput = {
  noti_ID?: Prisma.IntFieldUpdateOperationsInput | number
  noti_txt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type login_notiCreateManyInput = {
  noti_ID: number
  noti_txt?: string | null
}

export type login_notiUpdateManyMutationInput = {
  noti_ID?: Prisma.IntFieldUpdateOperationsInput | number
  noti_txt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type login_notiUncheckedUpdateManyInput = {
  noti_ID?: Prisma.IntFieldUpdateOperationsInput | number
  noti_txt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type login_notiOrderByRelevanceInput = {
  fields: Prisma.login_notiOrderByRelevanceFieldEnum | Prisma.login_notiOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type login_notiCountOrderByAggregateInput = {
  noti_ID?: Prisma.SortOrder
  noti_txt?: Prisma.SortOrder
}

export type login_notiAvgOrderByAggregateInput = {
  noti_ID?: Prisma.SortOrder
}

export type login_notiMaxOrderByAggregateInput = {
  noti_ID?: Prisma.SortOrder
  noti_txt?: Prisma.SortOrder
}

export type login_notiMinOrderByAggregateInput = {
  noti_ID?: Prisma.SortOrder
  noti_txt?: Prisma.SortOrder
}

export type login_notiSumOrderByAggregateInput = {
  noti_ID?: Prisma.SortOrder
}



export type login_notiSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  noti_ID?: boolean
  noti_txt?: boolean
}, ExtArgs["result"]["login_noti"]>



export type login_notiSelectScalar = {
  noti_ID?: boolean
  noti_txt?: boolean
}

export type login_notiOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"noti_ID" | "noti_txt", ExtArgs["result"]["login_noti"]>

export type $login_notiPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "login_noti"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    noti_ID: number
    noti_txt: string | null
  }, ExtArgs["result"]["login_noti"]>
  composites: {}
}

export type login_notiGetPayload<S extends boolean | null | undefined | login_notiDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$login_notiPayload, S>

export type login_notiCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<login_notiFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Login_notiCountAggregateInputType | true
  }

export interface login_notiDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['login_noti'], meta: { name: 'login_noti' } }
  /**
   * Find zero or one Login_noti that matches the filter.
   * @param {login_notiFindUniqueArgs} args - Arguments to find a Login_noti
   * @example
   * // Get one Login_noti
   * const login_noti = await prisma.login_noti.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends login_notiFindUniqueArgs>(args: Prisma.SelectSubset<T, login_notiFindUniqueArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Login_noti that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {login_notiFindUniqueOrThrowArgs} args - Arguments to find a Login_noti
   * @example
   * // Get one Login_noti
   * const login_noti = await prisma.login_noti.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends login_notiFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, login_notiFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Login_noti that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiFindFirstArgs} args - Arguments to find a Login_noti
   * @example
   * // Get one Login_noti
   * const login_noti = await prisma.login_noti.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends login_notiFindFirstArgs>(args?: Prisma.SelectSubset<T, login_notiFindFirstArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Login_noti that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiFindFirstOrThrowArgs} args - Arguments to find a Login_noti
   * @example
   * // Get one Login_noti
   * const login_noti = await prisma.login_noti.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends login_notiFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, login_notiFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Login_notis that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Login_notis
   * const login_notis = await prisma.login_noti.findMany()
   * 
   * // Get first 10 Login_notis
   * const login_notis = await prisma.login_noti.findMany({ take: 10 })
   * 
   * // Only select the `noti_ID`
   * const login_notiWithNoti_IDOnly = await prisma.login_noti.findMany({ select: { noti_ID: true } })
   * 
   */
  findMany<T extends login_notiFindManyArgs>(args?: Prisma.SelectSubset<T, login_notiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Login_noti.
   * @param {login_notiCreateArgs} args - Arguments to create a Login_noti.
   * @example
   * // Create one Login_noti
   * const Login_noti = await prisma.login_noti.create({
   *   data: {
   *     // ... data to create a Login_noti
   *   }
   * })
   * 
   */
  create<T extends login_notiCreateArgs>(args: Prisma.SelectSubset<T, login_notiCreateArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Login_notis.
   * @param {login_notiCreateManyArgs} args - Arguments to create many Login_notis.
   * @example
   * // Create many Login_notis
   * const login_noti = await prisma.login_noti.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends login_notiCreateManyArgs>(args?: Prisma.SelectSubset<T, login_notiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Login_noti.
   * @param {login_notiDeleteArgs} args - Arguments to delete one Login_noti.
   * @example
   * // Delete one Login_noti
   * const Login_noti = await prisma.login_noti.delete({
   *   where: {
   *     // ... filter to delete one Login_noti
   *   }
   * })
   * 
   */
  delete<T extends login_notiDeleteArgs>(args: Prisma.SelectSubset<T, login_notiDeleteArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Login_noti.
   * @param {login_notiUpdateArgs} args - Arguments to update one Login_noti.
   * @example
   * // Update one Login_noti
   * const login_noti = await prisma.login_noti.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends login_notiUpdateArgs>(args: Prisma.SelectSubset<T, login_notiUpdateArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Login_notis.
   * @param {login_notiDeleteManyArgs} args - Arguments to filter Login_notis to delete.
   * @example
   * // Delete a few Login_notis
   * const { count } = await prisma.login_noti.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends login_notiDeleteManyArgs>(args?: Prisma.SelectSubset<T, login_notiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Login_notis.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Login_notis
   * const login_noti = await prisma.login_noti.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends login_notiUpdateManyArgs>(args: Prisma.SelectSubset<T, login_notiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Login_noti.
   * @param {login_notiUpsertArgs} args - Arguments to update or create a Login_noti.
   * @example
   * // Update or create a Login_noti
   * const login_noti = await prisma.login_noti.upsert({
   *   create: {
   *     // ... data to create a Login_noti
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Login_noti we want to update
   *   }
   * })
   */
  upsert<T extends login_notiUpsertArgs>(args: Prisma.SelectSubset<T, login_notiUpsertArgs<ExtArgs>>): Prisma.Prisma__login_notiClient<runtime.Types.Result.GetResult<Prisma.$login_notiPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Login_notis.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiCountArgs} args - Arguments to filter Login_notis to count.
   * @example
   * // Count the number of Login_notis
   * const count = await prisma.login_noti.count({
   *   where: {
   *     // ... the filter for the Login_notis we want to count
   *   }
   * })
  **/
  count<T extends login_notiCountArgs>(
    args?: Prisma.Subset<T, login_notiCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Login_notiCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Login_noti.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Login_notiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Login_notiAggregateArgs>(args: Prisma.Subset<T, Login_notiAggregateArgs>): Prisma.PrismaPromise<GetLogin_notiAggregateType<T>>

  /**
   * Group by Login_noti.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {login_notiGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends login_notiGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: login_notiGroupByArgs['orderBy'] }
      : { orderBy?: login_notiGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, login_notiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogin_notiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the login_noti model
 */
readonly fields: login_notiFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for login_noti.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__login_notiClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the login_noti model
 */
export interface login_notiFieldRefs {
  readonly noti_ID: Prisma.FieldRef<"login_noti", 'Int'>
  readonly noti_txt: Prisma.FieldRef<"login_noti", 'String'>
}
    

// Custom InputTypes
/**
 * login_noti findUnique
 */
export type login_notiFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter, which login_noti to fetch.
   */
  where: Prisma.login_notiWhereUniqueInput
}

/**
 * login_noti findUniqueOrThrow
 */
export type login_notiFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter, which login_noti to fetch.
   */
  where: Prisma.login_notiWhereUniqueInput
}

/**
 * login_noti findFirst
 */
export type login_notiFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter, which login_noti to fetch.
   */
  where?: Prisma.login_notiWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of login_notis to fetch.
   */
  orderBy?: Prisma.login_notiOrderByWithRelationInput | Prisma.login_notiOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for login_notis.
   */
  cursor?: Prisma.login_notiWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` login_notis from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` login_notis.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of login_notis.
   */
  distinct?: Prisma.Login_notiScalarFieldEnum | Prisma.Login_notiScalarFieldEnum[]
}

/**
 * login_noti findFirstOrThrow
 */
export type login_notiFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter, which login_noti to fetch.
   */
  where?: Prisma.login_notiWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of login_notis to fetch.
   */
  orderBy?: Prisma.login_notiOrderByWithRelationInput | Prisma.login_notiOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for login_notis.
   */
  cursor?: Prisma.login_notiWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` login_notis from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` login_notis.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of login_notis.
   */
  distinct?: Prisma.Login_notiScalarFieldEnum | Prisma.Login_notiScalarFieldEnum[]
}

/**
 * login_noti findMany
 */
export type login_notiFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter, which login_notis to fetch.
   */
  where?: Prisma.login_notiWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of login_notis to fetch.
   */
  orderBy?: Prisma.login_notiOrderByWithRelationInput | Prisma.login_notiOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing login_notis.
   */
  cursor?: Prisma.login_notiWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` login_notis from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` login_notis.
   */
  skip?: number
  distinct?: Prisma.Login_notiScalarFieldEnum | Prisma.Login_notiScalarFieldEnum[]
}

/**
 * login_noti create
 */
export type login_notiCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * The data needed to create a login_noti.
   */
  data: Prisma.XOR<Prisma.login_notiCreateInput, Prisma.login_notiUncheckedCreateInput>
}

/**
 * login_noti createMany
 */
export type login_notiCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many login_notis.
   */
  data: Prisma.login_notiCreateManyInput | Prisma.login_notiCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * login_noti update
 */
export type login_notiUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * The data needed to update a login_noti.
   */
  data: Prisma.XOR<Prisma.login_notiUpdateInput, Prisma.login_notiUncheckedUpdateInput>
  /**
   * Choose, which login_noti to update.
   */
  where: Prisma.login_notiWhereUniqueInput
}

/**
 * login_noti updateMany
 */
export type login_notiUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update login_notis.
   */
  data: Prisma.XOR<Prisma.login_notiUpdateManyMutationInput, Prisma.login_notiUncheckedUpdateManyInput>
  /**
   * Filter which login_notis to update
   */
  where?: Prisma.login_notiWhereInput
  /**
   * Limit how many login_notis to update.
   */
  limit?: number
}

/**
 * login_noti upsert
 */
export type login_notiUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * The filter to search for the login_noti to update in case it exists.
   */
  where: Prisma.login_notiWhereUniqueInput
  /**
   * In case the login_noti found by the `where` argument doesn't exist, create a new login_noti with this data.
   */
  create: Prisma.XOR<Prisma.login_notiCreateInput, Prisma.login_notiUncheckedCreateInput>
  /**
   * In case the login_noti was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.login_notiUpdateInput, Prisma.login_notiUncheckedUpdateInput>
}

/**
 * login_noti delete
 */
export type login_notiDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
  /**
   * Filter which login_noti to delete.
   */
  where: Prisma.login_notiWhereUniqueInput
}

/**
 * login_noti deleteMany
 */
export type login_notiDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which login_notis to delete
   */
  where?: Prisma.login_notiWhereInput
  /**
   * Limit how many login_notis to delete.
   */
  limit?: number
}

/**
 * login_noti without action
 */
export type login_notiDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the login_noti
   */
  select?: Prisma.login_notiSelect<ExtArgs> | null
  /**
   * Omit specific fields from the login_noti
   */
  omit?: Prisma.login_notiOmit<ExtArgs> | null
}
