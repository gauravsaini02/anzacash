
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `nasso_quiz` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model nasso_quiz
 * 
 */
export type nasso_quizModel = runtime.Types.Result.DefaultSelection<Prisma.$nasso_quizPayload>

export type AggregateNasso_quiz = {
  _count: Nasso_quizCountAggregateOutputType | null
  _avg: Nasso_quizAvgAggregateOutputType | null
  _sum: Nasso_quizSumAggregateOutputType | null
  _min: Nasso_quizMinAggregateOutputType | null
  _max: Nasso_quizMaxAggregateOutputType | null
}

export type Nasso_quizAvgAggregateOutputType = {
  qz_Id: number | null
}

export type Nasso_quizSumAggregateOutputType = {
  qz_Id: number | null
}

export type Nasso_quizMinAggregateOutputType = {
  qz_Id: number | null
  qz_name: string | null
  qzop: string | null
  del_date: string | null
}

export type Nasso_quizMaxAggregateOutputType = {
  qz_Id: number | null
  qz_name: string | null
  qzop: string | null
  del_date: string | null
}

export type Nasso_quizCountAggregateOutputType = {
  qz_Id: number
  qz_name: number
  qzop: number
  del_date: number
  _all: number
}


export type Nasso_quizAvgAggregateInputType = {
  qz_Id?: true
}

export type Nasso_quizSumAggregateInputType = {
  qz_Id?: true
}

export type Nasso_quizMinAggregateInputType = {
  qz_Id?: true
  qz_name?: true
  qzop?: true
  del_date?: true
}

export type Nasso_quizMaxAggregateInputType = {
  qz_Id?: true
  qz_name?: true
  qzop?: true
  del_date?: true
}

export type Nasso_quizCountAggregateInputType = {
  qz_Id?: true
  qz_name?: true
  qzop?: true
  del_date?: true
  _all?: true
}

export type Nasso_quizAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_quiz to aggregate.
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_quizs to fetch.
   */
  orderBy?: Prisma.nasso_quizOrderByWithRelationInput | Prisma.nasso_quizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.nasso_quizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_quizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_quizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned nasso_quizs
  **/
  _count?: true | Nasso_quizCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Nasso_quizAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Nasso_quizSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Nasso_quizMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Nasso_quizMaxAggregateInputType
}

export type GetNasso_quizAggregateType<T extends Nasso_quizAggregateArgs> = {
      [P in keyof T & keyof AggregateNasso_quiz]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNasso_quiz[P]>
    : Prisma.GetScalarType<T[P], AggregateNasso_quiz[P]>
}




export type nasso_quizGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.nasso_quizWhereInput
  orderBy?: Prisma.nasso_quizOrderByWithAggregationInput | Prisma.nasso_quizOrderByWithAggregationInput[]
  by: Prisma.Nasso_quizScalarFieldEnum[] | Prisma.Nasso_quizScalarFieldEnum
  having?: Prisma.nasso_quizScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Nasso_quizCountAggregateInputType | true
  _avg?: Nasso_quizAvgAggregateInputType
  _sum?: Nasso_quizSumAggregateInputType
  _min?: Nasso_quizMinAggregateInputType
  _max?: Nasso_quizMaxAggregateInputType
}

export type Nasso_quizGroupByOutputType = {
  qz_Id: number
  qz_name: string
  qzop: string
  del_date: string | null
  _count: Nasso_quizCountAggregateOutputType | null
  _avg: Nasso_quizAvgAggregateOutputType | null
  _sum: Nasso_quizSumAggregateOutputType | null
  _min: Nasso_quizMinAggregateOutputType | null
  _max: Nasso_quizMaxAggregateOutputType | null
}

type GetNasso_quizGroupByPayload<T extends nasso_quizGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Nasso_quizGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Nasso_quizGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Nasso_quizGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Nasso_quizGroupByOutputType[P]>
      }
    >
  >



export type nasso_quizWhereInput = {
  AND?: Prisma.nasso_quizWhereInput | Prisma.nasso_quizWhereInput[]
  OR?: Prisma.nasso_quizWhereInput[]
  NOT?: Prisma.nasso_quizWhereInput | Prisma.nasso_quizWhereInput[]
  qz_Id?: Prisma.IntFilter<"nasso_quiz"> | number
  qz_name?: Prisma.StringFilter<"nasso_quiz"> | string
  qzop?: Prisma.StringFilter<"nasso_quiz"> | string
  del_date?: Prisma.StringNullableFilter<"nasso_quiz"> | string | null
}

export type nasso_quizOrderByWithRelationInput = {
  qz_Id?: Prisma.SortOrder
  qz_name?: Prisma.SortOrder
  qzop?: Prisma.SortOrder
  del_date?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.nasso_quizOrderByRelevanceInput
}

export type nasso_quizWhereUniqueInput = Prisma.AtLeast<{
  qz_Id?: number
  AND?: Prisma.nasso_quizWhereInput | Prisma.nasso_quizWhereInput[]
  OR?: Prisma.nasso_quizWhereInput[]
  NOT?: Prisma.nasso_quizWhereInput | Prisma.nasso_quizWhereInput[]
  qz_name?: Prisma.StringFilter<"nasso_quiz"> | string
  qzop?: Prisma.StringFilter<"nasso_quiz"> | string
  del_date?: Prisma.StringNullableFilter<"nasso_quiz"> | string | null
}, "qz_Id">

export type nasso_quizOrderByWithAggregationInput = {
  qz_Id?: Prisma.SortOrder
  qz_name?: Prisma.SortOrder
  qzop?: Prisma.SortOrder
  del_date?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.nasso_quizCountOrderByAggregateInput
  _avg?: Prisma.nasso_quizAvgOrderByAggregateInput
  _max?: Prisma.nasso_quizMaxOrderByAggregateInput
  _min?: Prisma.nasso_quizMinOrderByAggregateInput
  _sum?: Prisma.nasso_quizSumOrderByAggregateInput
}

export type nasso_quizScalarWhereWithAggregatesInput = {
  AND?: Prisma.nasso_quizScalarWhereWithAggregatesInput | Prisma.nasso_quizScalarWhereWithAggregatesInput[]
  OR?: Prisma.nasso_quizScalarWhereWithAggregatesInput[]
  NOT?: Prisma.nasso_quizScalarWhereWithAggregatesInput | Prisma.nasso_quizScalarWhereWithAggregatesInput[]
  qz_Id?: Prisma.IntWithAggregatesFilter<"nasso_quiz"> | number
  qz_name?: Prisma.StringWithAggregatesFilter<"nasso_quiz"> | string
  qzop?: Prisma.StringWithAggregatesFilter<"nasso_quiz"> | string
  del_date?: Prisma.StringNullableWithAggregatesFilter<"nasso_quiz"> | string | null
}

export type nasso_quizCreateInput = {
  qz_name?: string
  qzop?: string
  del_date?: string | null
}

export type nasso_quizUncheckedCreateInput = {
  qz_Id?: number
  qz_name?: string
  qzop?: string
  del_date?: string | null
}

export type nasso_quizUpdateInput = {
  qz_name?: Prisma.StringFieldUpdateOperationsInput | string
  qzop?: Prisma.StringFieldUpdateOperationsInput | string
  del_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type nasso_quizUncheckedUpdateInput = {
  qz_Id?: Prisma.IntFieldUpdateOperationsInput | number
  qz_name?: Prisma.StringFieldUpdateOperationsInput | string
  qzop?: Prisma.StringFieldUpdateOperationsInput | string
  del_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type nasso_quizCreateManyInput = {
  qz_Id?: number
  qz_name?: string
  qzop?: string
  del_date?: string | null
}

export type nasso_quizUpdateManyMutationInput = {
  qz_name?: Prisma.StringFieldUpdateOperationsInput | string
  qzop?: Prisma.StringFieldUpdateOperationsInput | string
  del_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type nasso_quizUncheckedUpdateManyInput = {
  qz_Id?: Prisma.IntFieldUpdateOperationsInput | number
  qz_name?: Prisma.StringFieldUpdateOperationsInput | string
  qzop?: Prisma.StringFieldUpdateOperationsInput | string
  del_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type nasso_quizOrderByRelevanceInput = {
  fields: Prisma.nasso_quizOrderByRelevanceFieldEnum | Prisma.nasso_quizOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type nasso_quizCountOrderByAggregateInput = {
  qz_Id?: Prisma.SortOrder
  qz_name?: Prisma.SortOrder
  qzop?: Prisma.SortOrder
  del_date?: Prisma.SortOrder
}

export type nasso_quizAvgOrderByAggregateInput = {
  qz_Id?: Prisma.SortOrder
}

export type nasso_quizMaxOrderByAggregateInput = {
  qz_Id?: Prisma.SortOrder
  qz_name?: Prisma.SortOrder
  qzop?: Prisma.SortOrder
  del_date?: Prisma.SortOrder
}

export type nasso_quizMinOrderByAggregateInput = {
  qz_Id?: Prisma.SortOrder
  qz_name?: Prisma.SortOrder
  qzop?: Prisma.SortOrder
  del_date?: Prisma.SortOrder
}

export type nasso_quizSumOrderByAggregateInput = {
  qz_Id?: Prisma.SortOrder
}



export type nasso_quizSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  qz_Id?: boolean
  qz_name?: boolean
  qzop?: boolean
  del_date?: boolean
}, ExtArgs["result"]["nasso_quiz"]>



export type nasso_quizSelectScalar = {
  qz_Id?: boolean
  qz_name?: boolean
  qzop?: boolean
  del_date?: boolean
}

export type nasso_quizOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"qz_Id" | "qz_name" | "qzop" | "del_date", ExtArgs["result"]["nasso_quiz"]>

export type $nasso_quizPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "nasso_quiz"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    qz_Id: number
    qz_name: string
    qzop: string
    del_date: string | null
  }, ExtArgs["result"]["nasso_quiz"]>
  composites: {}
}

export type nasso_quizGetPayload<S extends boolean | null | undefined | nasso_quizDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload, S>

export type nasso_quizCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<nasso_quizFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Nasso_quizCountAggregateInputType | true
  }

export interface nasso_quizDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nasso_quiz'], meta: { name: 'nasso_quiz' } }
  /**
   * Find zero or one Nasso_quiz that matches the filter.
   * @param {nasso_quizFindUniqueArgs} args - Arguments to find a Nasso_quiz
   * @example
   * // Get one Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends nasso_quizFindUniqueArgs>(args: Prisma.SelectSubset<T, nasso_quizFindUniqueArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Nasso_quiz that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {nasso_quizFindUniqueOrThrowArgs} args - Arguments to find a Nasso_quiz
   * @example
   * // Get one Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends nasso_quizFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, nasso_quizFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_quiz that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizFindFirstArgs} args - Arguments to find a Nasso_quiz
   * @example
   * // Get one Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends nasso_quizFindFirstArgs>(args?: Prisma.SelectSubset<T, nasso_quizFindFirstArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_quiz that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizFindFirstOrThrowArgs} args - Arguments to find a Nasso_quiz
   * @example
   * // Get one Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends nasso_quizFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, nasso_quizFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Nasso_quizs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Nasso_quizs
   * const nasso_quizs = await prisma.nasso_quiz.findMany()
   * 
   * // Get first 10 Nasso_quizs
   * const nasso_quizs = await prisma.nasso_quiz.findMany({ take: 10 })
   * 
   * // Only select the `qz_Id`
   * const nasso_quizWithQz_IdOnly = await prisma.nasso_quiz.findMany({ select: { qz_Id: true } })
   * 
   */
  findMany<T extends nasso_quizFindManyArgs>(args?: Prisma.SelectSubset<T, nasso_quizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Nasso_quiz.
   * @param {nasso_quizCreateArgs} args - Arguments to create a Nasso_quiz.
   * @example
   * // Create one Nasso_quiz
   * const Nasso_quiz = await prisma.nasso_quiz.create({
   *   data: {
   *     // ... data to create a Nasso_quiz
   *   }
   * })
   * 
   */
  create<T extends nasso_quizCreateArgs>(args: Prisma.SelectSubset<T, nasso_quizCreateArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Nasso_quizs.
   * @param {nasso_quizCreateManyArgs} args - Arguments to create many Nasso_quizs.
   * @example
   * // Create many Nasso_quizs
   * const nasso_quiz = await prisma.nasso_quiz.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends nasso_quizCreateManyArgs>(args?: Prisma.SelectSubset<T, nasso_quizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Nasso_quiz.
   * @param {nasso_quizDeleteArgs} args - Arguments to delete one Nasso_quiz.
   * @example
   * // Delete one Nasso_quiz
   * const Nasso_quiz = await prisma.nasso_quiz.delete({
   *   where: {
   *     // ... filter to delete one Nasso_quiz
   *   }
   * })
   * 
   */
  delete<T extends nasso_quizDeleteArgs>(args: Prisma.SelectSubset<T, nasso_quizDeleteArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Nasso_quiz.
   * @param {nasso_quizUpdateArgs} args - Arguments to update one Nasso_quiz.
   * @example
   * // Update one Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends nasso_quizUpdateArgs>(args: Prisma.SelectSubset<T, nasso_quizUpdateArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Nasso_quizs.
   * @param {nasso_quizDeleteManyArgs} args - Arguments to filter Nasso_quizs to delete.
   * @example
   * // Delete a few Nasso_quizs
   * const { count } = await prisma.nasso_quiz.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends nasso_quizDeleteManyArgs>(args?: Prisma.SelectSubset<T, nasso_quizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Nasso_quizs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Nasso_quizs
   * const nasso_quiz = await prisma.nasso_quiz.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends nasso_quizUpdateManyArgs>(args: Prisma.SelectSubset<T, nasso_quizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Nasso_quiz.
   * @param {nasso_quizUpsertArgs} args - Arguments to update or create a Nasso_quiz.
   * @example
   * // Update or create a Nasso_quiz
   * const nasso_quiz = await prisma.nasso_quiz.upsert({
   *   create: {
   *     // ... data to create a Nasso_quiz
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Nasso_quiz we want to update
   *   }
   * })
   */
  upsert<T extends nasso_quizUpsertArgs>(args: Prisma.SelectSubset<T, nasso_quizUpsertArgs<ExtArgs>>): Prisma.Prisma__nasso_quizClient<runtime.Types.Result.GetResult<Prisma.$nasso_quizPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Nasso_quizs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizCountArgs} args - Arguments to filter Nasso_quizs to count.
   * @example
   * // Count the number of Nasso_quizs
   * const count = await prisma.nasso_quiz.count({
   *   where: {
   *     // ... the filter for the Nasso_quizs we want to count
   *   }
   * })
  **/
  count<T extends nasso_quizCountArgs>(
    args?: Prisma.Subset<T, nasso_quizCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Nasso_quizCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Nasso_quiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Nasso_quizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Nasso_quizAggregateArgs>(args: Prisma.Subset<T, Nasso_quizAggregateArgs>): Prisma.PrismaPromise<GetNasso_quizAggregateType<T>>

  /**
   * Group by Nasso_quiz.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_quizGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends nasso_quizGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: nasso_quizGroupByArgs['orderBy'] }
      : { orderBy?: nasso_quizGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, nasso_quizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNasso_quizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the nasso_quiz model
 */
readonly fields: nasso_quizFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for nasso_quiz.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__nasso_quizClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the nasso_quiz model
 */
export interface nasso_quizFieldRefs {
  readonly qz_Id: Prisma.FieldRef<"nasso_quiz", 'Int'>
  readonly qz_name: Prisma.FieldRef<"nasso_quiz", 'String'>
  readonly qzop: Prisma.FieldRef<"nasso_quiz", 'String'>
  readonly del_date: Prisma.FieldRef<"nasso_quiz", 'String'>
}
    

// Custom InputTypes
/**
 * nasso_quiz findUnique
 */
export type nasso_quizFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter, which nasso_quiz to fetch.
   */
  where: Prisma.nasso_quizWhereUniqueInput
}

/**
 * nasso_quiz findUniqueOrThrow
 */
export type nasso_quizFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter, which nasso_quiz to fetch.
   */
  where: Prisma.nasso_quizWhereUniqueInput
}

/**
 * nasso_quiz findFirst
 */
export type nasso_quizFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter, which nasso_quiz to fetch.
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_quizs to fetch.
   */
  orderBy?: Prisma.nasso_quizOrderByWithRelationInput | Prisma.nasso_quizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_quizs.
   */
  cursor?: Prisma.nasso_quizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_quizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_quizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_quizs.
   */
  distinct?: Prisma.Nasso_quizScalarFieldEnum | Prisma.Nasso_quizScalarFieldEnum[]
}

/**
 * nasso_quiz findFirstOrThrow
 */
export type nasso_quizFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter, which nasso_quiz to fetch.
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_quizs to fetch.
   */
  orderBy?: Prisma.nasso_quizOrderByWithRelationInput | Prisma.nasso_quizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_quizs.
   */
  cursor?: Prisma.nasso_quizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_quizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_quizs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_quizs.
   */
  distinct?: Prisma.Nasso_quizScalarFieldEnum | Prisma.Nasso_quizScalarFieldEnum[]
}

/**
 * nasso_quiz findMany
 */
export type nasso_quizFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter, which nasso_quizs to fetch.
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_quizs to fetch.
   */
  orderBy?: Prisma.nasso_quizOrderByWithRelationInput | Prisma.nasso_quizOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing nasso_quizs.
   */
  cursor?: Prisma.nasso_quizWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_quizs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_quizs.
   */
  skip?: number
  distinct?: Prisma.Nasso_quizScalarFieldEnum | Prisma.Nasso_quizScalarFieldEnum[]
}

/**
 * nasso_quiz create
 */
export type nasso_quizCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * The data needed to create a nasso_quiz.
   */
  data?: Prisma.XOR<Prisma.nasso_quizCreateInput, Prisma.nasso_quizUncheckedCreateInput>
}

/**
 * nasso_quiz createMany
 */
export type nasso_quizCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many nasso_quizs.
   */
  data: Prisma.nasso_quizCreateManyInput | Prisma.nasso_quizCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * nasso_quiz update
 */
export type nasso_quizUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * The data needed to update a nasso_quiz.
   */
  data: Prisma.XOR<Prisma.nasso_quizUpdateInput, Prisma.nasso_quizUncheckedUpdateInput>
  /**
   * Choose, which nasso_quiz to update.
   */
  where: Prisma.nasso_quizWhereUniqueInput
}

/**
 * nasso_quiz updateMany
 */
export type nasso_quizUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update nasso_quizs.
   */
  data: Prisma.XOR<Prisma.nasso_quizUpdateManyMutationInput, Prisma.nasso_quizUncheckedUpdateManyInput>
  /**
   * Filter which nasso_quizs to update
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * Limit how many nasso_quizs to update.
   */
  limit?: number
}

/**
 * nasso_quiz upsert
 */
export type nasso_quizUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * The filter to search for the nasso_quiz to update in case it exists.
   */
  where: Prisma.nasso_quizWhereUniqueInput
  /**
   * In case the nasso_quiz found by the `where` argument doesn't exist, create a new nasso_quiz with this data.
   */
  create: Prisma.XOR<Prisma.nasso_quizCreateInput, Prisma.nasso_quizUncheckedCreateInput>
  /**
   * In case the nasso_quiz was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.nasso_quizUpdateInput, Prisma.nasso_quizUncheckedUpdateInput>
}

/**
 * nasso_quiz delete
 */
export type nasso_quizDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
  /**
   * Filter which nasso_quiz to delete.
   */
  where: Prisma.nasso_quizWhereUniqueInput
}

/**
 * nasso_quiz deleteMany
 */
export type nasso_quizDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_quizs to delete
   */
  where?: Prisma.nasso_quizWhereInput
  /**
   * Limit how many nasso_quizs to delete.
   */
  limit?: number
}

/**
 * nasso_quiz without action
 */
export type nasso_quizDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_quiz
   */
  select?: Prisma.nasso_quizSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_quiz
   */
  omit?: Prisma.nasso_quizOmit<ExtArgs> | null
}
