
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tknes_nasso` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tknes_nasso
 * 
 */
export type tknes_nassoModel = runtime.Types.Result.DefaultSelection<Prisma.$tknes_nassoPayload>

export type AggregateTknes_nasso = {
  _count: Tknes_nassoCountAggregateOutputType | null
  _avg: Tknes_nassoAvgAggregateOutputType | null
  _sum: Tknes_nassoSumAggregateOutputType | null
  _min: Tknes_nassoMinAggregateOutputType | null
  _max: Tknes_nassoMaxAggregateOutputType | null
}

export type Tknes_nassoAvgAggregateOutputType = {
  token_ID: number | null
}

export type Tknes_nassoSumAggregateOutputType = {
  token_ID: number | null
}

export type Tknes_nassoMinAggregateOutputType = {
  token_ID: number | null
  tk_nm_nasso: string | null
  tk_rw_nasso: string | null
}

export type Tknes_nassoMaxAggregateOutputType = {
  token_ID: number | null
  tk_nm_nasso: string | null
  tk_rw_nasso: string | null
}

export type Tknes_nassoCountAggregateOutputType = {
  token_ID: number
  tk_nm_nasso: number
  tk_rw_nasso: number
  _all: number
}


export type Tknes_nassoAvgAggregateInputType = {
  token_ID?: true
}

export type Tknes_nassoSumAggregateInputType = {
  token_ID?: true
}

export type Tknes_nassoMinAggregateInputType = {
  token_ID?: true
  tk_nm_nasso?: true
  tk_rw_nasso?: true
}

export type Tknes_nassoMaxAggregateInputType = {
  token_ID?: true
  tk_nm_nasso?: true
  tk_rw_nasso?: true
}

export type Tknes_nassoCountAggregateInputType = {
  token_ID?: true
  tk_nm_nasso?: true
  tk_rw_nasso?: true
  _all?: true
}

export type Tknes_nassoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tknes_nasso to aggregate.
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tknes_nassos to fetch.
   */
  orderBy?: Prisma.tknes_nassoOrderByWithRelationInput | Prisma.tknes_nassoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tknes_nassoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tknes_nassos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tknes_nassos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tknes_nassos
  **/
  _count?: true | Tknes_nassoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tknes_nassoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tknes_nassoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tknes_nassoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tknes_nassoMaxAggregateInputType
}

export type GetTknes_nassoAggregateType<T extends Tknes_nassoAggregateArgs> = {
      [P in keyof T & keyof AggregateTknes_nasso]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTknes_nasso[P]>
    : Prisma.GetScalarType<T[P], AggregateTknes_nasso[P]>
}




export type tknes_nassoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tknes_nassoWhereInput
  orderBy?: Prisma.tknes_nassoOrderByWithAggregationInput | Prisma.tknes_nassoOrderByWithAggregationInput[]
  by: Prisma.Tknes_nassoScalarFieldEnum[] | Prisma.Tknes_nassoScalarFieldEnum
  having?: Prisma.tknes_nassoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tknes_nassoCountAggregateInputType | true
  _avg?: Tknes_nassoAvgAggregateInputType
  _sum?: Tknes_nassoSumAggregateInputType
  _min?: Tknes_nassoMinAggregateInputType
  _max?: Tknes_nassoMaxAggregateInputType
}

export type Tknes_nassoGroupByOutputType = {
  token_ID: number
  tk_nm_nasso: string
  tk_rw_nasso: string
  _count: Tknes_nassoCountAggregateOutputType | null
  _avg: Tknes_nassoAvgAggregateOutputType | null
  _sum: Tknes_nassoSumAggregateOutputType | null
  _min: Tknes_nassoMinAggregateOutputType | null
  _max: Tknes_nassoMaxAggregateOutputType | null
}

type GetTknes_nassoGroupByPayload<T extends tknes_nassoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tknes_nassoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tknes_nassoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tknes_nassoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tknes_nassoGroupByOutputType[P]>
      }
    >
  >



export type tknes_nassoWhereInput = {
  AND?: Prisma.tknes_nassoWhereInput | Prisma.tknes_nassoWhereInput[]
  OR?: Prisma.tknes_nassoWhereInput[]
  NOT?: Prisma.tknes_nassoWhereInput | Prisma.tknes_nassoWhereInput[]
  token_ID?: Prisma.IntFilter<"tknes_nasso"> | number
  tk_nm_nasso?: Prisma.StringFilter<"tknes_nasso"> | string
  tk_rw_nasso?: Prisma.StringFilter<"tknes_nasso"> | string
}

export type tknes_nassoOrderByWithRelationInput = {
  token_ID?: Prisma.SortOrder
  tk_nm_nasso?: Prisma.SortOrder
  tk_rw_nasso?: Prisma.SortOrder
  _relevance?: Prisma.tknes_nassoOrderByRelevanceInput
}

export type tknes_nassoWhereUniqueInput = Prisma.AtLeast<{
  token_ID?: number
  AND?: Prisma.tknes_nassoWhereInput | Prisma.tknes_nassoWhereInput[]
  OR?: Prisma.tknes_nassoWhereInput[]
  NOT?: Prisma.tknes_nassoWhereInput | Prisma.tknes_nassoWhereInput[]
  tk_nm_nasso?: Prisma.StringFilter<"tknes_nasso"> | string
  tk_rw_nasso?: Prisma.StringFilter<"tknes_nasso"> | string
}, "token_ID">

export type tknes_nassoOrderByWithAggregationInput = {
  token_ID?: Prisma.SortOrder
  tk_nm_nasso?: Prisma.SortOrder
  tk_rw_nasso?: Prisma.SortOrder
  _count?: Prisma.tknes_nassoCountOrderByAggregateInput
  _avg?: Prisma.tknes_nassoAvgOrderByAggregateInput
  _max?: Prisma.tknes_nassoMaxOrderByAggregateInput
  _min?: Prisma.tknes_nassoMinOrderByAggregateInput
  _sum?: Prisma.tknes_nassoSumOrderByAggregateInput
}

export type tknes_nassoScalarWhereWithAggregatesInput = {
  AND?: Prisma.tknes_nassoScalarWhereWithAggregatesInput | Prisma.tknes_nassoScalarWhereWithAggregatesInput[]
  OR?: Prisma.tknes_nassoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tknes_nassoScalarWhereWithAggregatesInput | Prisma.tknes_nassoScalarWhereWithAggregatesInput[]
  token_ID?: Prisma.IntWithAggregatesFilter<"tknes_nasso"> | number
  tk_nm_nasso?: Prisma.StringWithAggregatesFilter<"tknes_nasso"> | string
  tk_rw_nasso?: Prisma.StringWithAggregatesFilter<"tknes_nasso"> | string
}

export type tknes_nassoCreateInput = {
  tk_nm_nasso?: string
  tk_rw_nasso?: string
}

export type tknes_nassoUncheckedCreateInput = {
  token_ID?: number
  tk_nm_nasso?: string
  tk_rw_nasso?: string
}

export type tknes_nassoUpdateInput = {
  tk_nm_nasso?: Prisma.StringFieldUpdateOperationsInput | string
  tk_rw_nasso?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tknes_nassoUncheckedUpdateInput = {
  token_ID?: Prisma.IntFieldUpdateOperationsInput | number
  tk_nm_nasso?: Prisma.StringFieldUpdateOperationsInput | string
  tk_rw_nasso?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tknes_nassoCreateManyInput = {
  token_ID?: number
  tk_nm_nasso?: string
  tk_rw_nasso?: string
}

export type tknes_nassoUpdateManyMutationInput = {
  tk_nm_nasso?: Prisma.StringFieldUpdateOperationsInput | string
  tk_rw_nasso?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tknes_nassoUncheckedUpdateManyInput = {
  token_ID?: Prisma.IntFieldUpdateOperationsInput | number
  tk_nm_nasso?: Prisma.StringFieldUpdateOperationsInput | string
  tk_rw_nasso?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tknes_nassoOrderByRelevanceInput = {
  fields: Prisma.tknes_nassoOrderByRelevanceFieldEnum | Prisma.tknes_nassoOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tknes_nassoCountOrderByAggregateInput = {
  token_ID?: Prisma.SortOrder
  tk_nm_nasso?: Prisma.SortOrder
  tk_rw_nasso?: Prisma.SortOrder
}

export type tknes_nassoAvgOrderByAggregateInput = {
  token_ID?: Prisma.SortOrder
}

export type tknes_nassoMaxOrderByAggregateInput = {
  token_ID?: Prisma.SortOrder
  tk_nm_nasso?: Prisma.SortOrder
  tk_rw_nasso?: Prisma.SortOrder
}

export type tknes_nassoMinOrderByAggregateInput = {
  token_ID?: Prisma.SortOrder
  tk_nm_nasso?: Prisma.SortOrder
  tk_rw_nasso?: Prisma.SortOrder
}

export type tknes_nassoSumOrderByAggregateInput = {
  token_ID?: Prisma.SortOrder
}



export type tknes_nassoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  token_ID?: boolean
  tk_nm_nasso?: boolean
  tk_rw_nasso?: boolean
}, ExtArgs["result"]["tknes_nasso"]>



export type tknes_nassoSelectScalar = {
  token_ID?: boolean
  tk_nm_nasso?: boolean
  tk_rw_nasso?: boolean
}

export type tknes_nassoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"token_ID" | "tk_nm_nasso" | "tk_rw_nasso", ExtArgs["result"]["tknes_nasso"]>

export type $tknes_nassoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tknes_nasso"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    token_ID: number
    tk_nm_nasso: string
    tk_rw_nasso: string
  }, ExtArgs["result"]["tknes_nasso"]>
  composites: {}
}

export type tknes_nassoGetPayload<S extends boolean | null | undefined | tknes_nassoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload, S>

export type tknes_nassoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tknes_nassoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tknes_nassoCountAggregateInputType | true
  }

export interface tknes_nassoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tknes_nasso'], meta: { name: 'tknes_nasso' } }
  /**
   * Find zero or one Tknes_nasso that matches the filter.
   * @param {tknes_nassoFindUniqueArgs} args - Arguments to find a Tknes_nasso
   * @example
   * // Get one Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tknes_nassoFindUniqueArgs>(args: Prisma.SelectSubset<T, tknes_nassoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tknes_nasso that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tknes_nassoFindUniqueOrThrowArgs} args - Arguments to find a Tknes_nasso
   * @example
   * // Get one Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tknes_nassoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tknes_nassoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tknes_nasso that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoFindFirstArgs} args - Arguments to find a Tknes_nasso
   * @example
   * // Get one Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tknes_nassoFindFirstArgs>(args?: Prisma.SelectSubset<T, tknes_nassoFindFirstArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tknes_nasso that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoFindFirstOrThrowArgs} args - Arguments to find a Tknes_nasso
   * @example
   * // Get one Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tknes_nassoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tknes_nassoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tknes_nassos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tknes_nassos
   * const tknes_nassos = await prisma.tknes_nasso.findMany()
   * 
   * // Get first 10 Tknes_nassos
   * const tknes_nassos = await prisma.tknes_nasso.findMany({ take: 10 })
   * 
   * // Only select the `token_ID`
   * const tknes_nassoWithToken_IDOnly = await prisma.tknes_nasso.findMany({ select: { token_ID: true } })
   * 
   */
  findMany<T extends tknes_nassoFindManyArgs>(args?: Prisma.SelectSubset<T, tknes_nassoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tknes_nasso.
   * @param {tknes_nassoCreateArgs} args - Arguments to create a Tknes_nasso.
   * @example
   * // Create one Tknes_nasso
   * const Tknes_nasso = await prisma.tknes_nasso.create({
   *   data: {
   *     // ... data to create a Tknes_nasso
   *   }
   * })
   * 
   */
  create<T extends tknes_nassoCreateArgs>(args: Prisma.SelectSubset<T, tknes_nassoCreateArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tknes_nassos.
   * @param {tknes_nassoCreateManyArgs} args - Arguments to create many Tknes_nassos.
   * @example
   * // Create many Tknes_nassos
   * const tknes_nasso = await prisma.tknes_nasso.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tknes_nassoCreateManyArgs>(args?: Prisma.SelectSubset<T, tknes_nassoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tknes_nasso.
   * @param {tknes_nassoDeleteArgs} args - Arguments to delete one Tknes_nasso.
   * @example
   * // Delete one Tknes_nasso
   * const Tknes_nasso = await prisma.tknes_nasso.delete({
   *   where: {
   *     // ... filter to delete one Tknes_nasso
   *   }
   * })
   * 
   */
  delete<T extends tknes_nassoDeleteArgs>(args: Prisma.SelectSubset<T, tknes_nassoDeleteArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tknes_nasso.
   * @param {tknes_nassoUpdateArgs} args - Arguments to update one Tknes_nasso.
   * @example
   * // Update one Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tknes_nassoUpdateArgs>(args: Prisma.SelectSubset<T, tknes_nassoUpdateArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tknes_nassos.
   * @param {tknes_nassoDeleteManyArgs} args - Arguments to filter Tknes_nassos to delete.
   * @example
   * // Delete a few Tknes_nassos
   * const { count } = await prisma.tknes_nasso.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tknes_nassoDeleteManyArgs>(args?: Prisma.SelectSubset<T, tknes_nassoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tknes_nassos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tknes_nassos
   * const tknes_nasso = await prisma.tknes_nasso.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tknes_nassoUpdateManyArgs>(args: Prisma.SelectSubset<T, tknes_nassoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tknes_nasso.
   * @param {tknes_nassoUpsertArgs} args - Arguments to update or create a Tknes_nasso.
   * @example
   * // Update or create a Tknes_nasso
   * const tknes_nasso = await prisma.tknes_nasso.upsert({
   *   create: {
   *     // ... data to create a Tknes_nasso
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tknes_nasso we want to update
   *   }
   * })
   */
  upsert<T extends tknes_nassoUpsertArgs>(args: Prisma.SelectSubset<T, tknes_nassoUpsertArgs<ExtArgs>>): Prisma.Prisma__tknes_nassoClient<runtime.Types.Result.GetResult<Prisma.$tknes_nassoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tknes_nassos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoCountArgs} args - Arguments to filter Tknes_nassos to count.
   * @example
   * // Count the number of Tknes_nassos
   * const count = await prisma.tknes_nasso.count({
   *   where: {
   *     // ... the filter for the Tknes_nassos we want to count
   *   }
   * })
  **/
  count<T extends tknes_nassoCountArgs>(
    args?: Prisma.Subset<T, tknes_nassoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tknes_nassoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tknes_nasso.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tknes_nassoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tknes_nassoAggregateArgs>(args: Prisma.Subset<T, Tknes_nassoAggregateArgs>): Prisma.PrismaPromise<GetTknes_nassoAggregateType<T>>

  /**
   * Group by Tknes_nasso.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tknes_nassoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tknes_nassoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tknes_nassoGroupByArgs['orderBy'] }
      : { orderBy?: tknes_nassoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tknes_nassoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTknes_nassoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tknes_nasso model
 */
readonly fields: tknes_nassoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tknes_nasso.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tknes_nassoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tknes_nasso model
 */
export interface tknes_nassoFieldRefs {
  readonly token_ID: Prisma.FieldRef<"tknes_nasso", 'Int'>
  readonly tk_nm_nasso: Prisma.FieldRef<"tknes_nasso", 'String'>
  readonly tk_rw_nasso: Prisma.FieldRef<"tknes_nasso", 'String'>
}
    

// Custom InputTypes
/**
 * tknes_nasso findUnique
 */
export type tknes_nassoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter, which tknes_nasso to fetch.
   */
  where: Prisma.tknes_nassoWhereUniqueInput
}

/**
 * tknes_nasso findUniqueOrThrow
 */
export type tknes_nassoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter, which tknes_nasso to fetch.
   */
  where: Prisma.tknes_nassoWhereUniqueInput
}

/**
 * tknes_nasso findFirst
 */
export type tknes_nassoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter, which tknes_nasso to fetch.
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tknes_nassos to fetch.
   */
  orderBy?: Prisma.tknes_nassoOrderByWithRelationInput | Prisma.tknes_nassoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tknes_nassos.
   */
  cursor?: Prisma.tknes_nassoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tknes_nassos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tknes_nassos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tknes_nassos.
   */
  distinct?: Prisma.Tknes_nassoScalarFieldEnum | Prisma.Tknes_nassoScalarFieldEnum[]
}

/**
 * tknes_nasso findFirstOrThrow
 */
export type tknes_nassoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter, which tknes_nasso to fetch.
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tknes_nassos to fetch.
   */
  orderBy?: Prisma.tknes_nassoOrderByWithRelationInput | Prisma.tknes_nassoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tknes_nassos.
   */
  cursor?: Prisma.tknes_nassoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tknes_nassos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tknes_nassos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tknes_nassos.
   */
  distinct?: Prisma.Tknes_nassoScalarFieldEnum | Prisma.Tknes_nassoScalarFieldEnum[]
}

/**
 * tknes_nasso findMany
 */
export type tknes_nassoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter, which tknes_nassos to fetch.
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tknes_nassos to fetch.
   */
  orderBy?: Prisma.tknes_nassoOrderByWithRelationInput | Prisma.tknes_nassoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tknes_nassos.
   */
  cursor?: Prisma.tknes_nassoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tknes_nassos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tknes_nassos.
   */
  skip?: number
  distinct?: Prisma.Tknes_nassoScalarFieldEnum | Prisma.Tknes_nassoScalarFieldEnum[]
}

/**
 * tknes_nasso create
 */
export type tknes_nassoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * The data needed to create a tknes_nasso.
   */
  data?: Prisma.XOR<Prisma.tknes_nassoCreateInput, Prisma.tknes_nassoUncheckedCreateInput>
}

/**
 * tknes_nasso createMany
 */
export type tknes_nassoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tknes_nassos.
   */
  data: Prisma.tknes_nassoCreateManyInput | Prisma.tknes_nassoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tknes_nasso update
 */
export type tknes_nassoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * The data needed to update a tknes_nasso.
   */
  data: Prisma.XOR<Prisma.tknes_nassoUpdateInput, Prisma.tknes_nassoUncheckedUpdateInput>
  /**
   * Choose, which tknes_nasso to update.
   */
  where: Prisma.tknes_nassoWhereUniqueInput
}

/**
 * tknes_nasso updateMany
 */
export type tknes_nassoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tknes_nassos.
   */
  data: Prisma.XOR<Prisma.tknes_nassoUpdateManyMutationInput, Prisma.tknes_nassoUncheckedUpdateManyInput>
  /**
   * Filter which tknes_nassos to update
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * Limit how many tknes_nassos to update.
   */
  limit?: number
}

/**
 * tknes_nasso upsert
 */
export type tknes_nassoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * The filter to search for the tknes_nasso to update in case it exists.
   */
  where: Prisma.tknes_nassoWhereUniqueInput
  /**
   * In case the tknes_nasso found by the `where` argument doesn't exist, create a new tknes_nasso with this data.
   */
  create: Prisma.XOR<Prisma.tknes_nassoCreateInput, Prisma.tknes_nassoUncheckedCreateInput>
  /**
   * In case the tknes_nasso was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tknes_nassoUpdateInput, Prisma.tknes_nassoUncheckedUpdateInput>
}

/**
 * tknes_nasso delete
 */
export type tknes_nassoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
  /**
   * Filter which tknes_nasso to delete.
   */
  where: Prisma.tknes_nassoWhereUniqueInput
}

/**
 * tknes_nasso deleteMany
 */
export type tknes_nassoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tknes_nassos to delete
   */
  where?: Prisma.tknes_nassoWhereInput
  /**
   * Limit how many tknes_nassos to delete.
   */
  limit?: number
}

/**
 * tknes_nasso without action
 */
export type tknes_nassoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tknes_nasso
   */
  select?: Prisma.tknes_nassoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tknes_nasso
   */
  omit?: Prisma.tknes_nassoOmit<ExtArgs> | null
}
