
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `nasso_answer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model nasso_answer
 * 
 */
export type nasso_answerModel = runtime.Types.Result.DefaultSelection<Prisma.$nasso_answerPayload>

export type AggregateNasso_answer = {
  _count: Nasso_answerCountAggregateOutputType | null
  _avg: Nasso_answerAvgAggregateOutputType | null
  _sum: Nasso_answerSumAggregateOutputType | null
  _min: Nasso_answerMinAggregateOutputType | null
  _max: Nasso_answerMaxAggregateOutputType | null
}

export type Nasso_answerAvgAggregateOutputType = {
  ans_Id: number | null
  qns_ID: number | null
  ans_uza: number | null
}

export type Nasso_answerSumAggregateOutputType = {
  ans_Id: number | null
  qns_ID: number | null
  ans_uza: number | null
}

export type Nasso_answerMinAggregateOutputType = {
  ans_Id: number | null
  qns_ID: number | null
  answer: string | null
  ans_correct: string | null
  ans_uza: number | null
}

export type Nasso_answerMaxAggregateOutputType = {
  ans_Id: number | null
  qns_ID: number | null
  answer: string | null
  ans_correct: string | null
  ans_uza: number | null
}

export type Nasso_answerCountAggregateOutputType = {
  ans_Id: number
  qns_ID: number
  answer: number
  ans_correct: number
  ans_uza: number
  _all: number
}


export type Nasso_answerAvgAggregateInputType = {
  ans_Id?: true
  qns_ID?: true
  ans_uza?: true
}

export type Nasso_answerSumAggregateInputType = {
  ans_Id?: true
  qns_ID?: true
  ans_uza?: true
}

export type Nasso_answerMinAggregateInputType = {
  ans_Id?: true
  qns_ID?: true
  answer?: true
  ans_correct?: true
  ans_uza?: true
}

export type Nasso_answerMaxAggregateInputType = {
  ans_Id?: true
  qns_ID?: true
  answer?: true
  ans_correct?: true
  ans_uza?: true
}

export type Nasso_answerCountAggregateInputType = {
  ans_Id?: true
  qns_ID?: true
  answer?: true
  ans_correct?: true
  ans_uza?: true
  _all?: true
}

export type Nasso_answerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_answer to aggregate.
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_answers to fetch.
   */
  orderBy?: Prisma.nasso_answerOrderByWithRelationInput | Prisma.nasso_answerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.nasso_answerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned nasso_answers
  **/
  _count?: true | Nasso_answerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Nasso_answerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Nasso_answerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Nasso_answerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Nasso_answerMaxAggregateInputType
}

export type GetNasso_answerAggregateType<T extends Nasso_answerAggregateArgs> = {
      [P in keyof T & keyof AggregateNasso_answer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNasso_answer[P]>
    : Prisma.GetScalarType<T[P], AggregateNasso_answer[P]>
}




export type nasso_answerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.nasso_answerWhereInput
  orderBy?: Prisma.nasso_answerOrderByWithAggregationInput | Prisma.nasso_answerOrderByWithAggregationInput[]
  by: Prisma.Nasso_answerScalarFieldEnum[] | Prisma.Nasso_answerScalarFieldEnum
  having?: Prisma.nasso_answerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Nasso_answerCountAggregateInputType | true
  _avg?: Nasso_answerAvgAggregateInputType
  _sum?: Nasso_answerSumAggregateInputType
  _min?: Nasso_answerMinAggregateInputType
  _max?: Nasso_answerMaxAggregateInputType
}

export type Nasso_answerGroupByOutputType = {
  ans_Id: number
  qns_ID: number | null
  answer: string | null
  ans_correct: string | null
  ans_uza: number | null
  _count: Nasso_answerCountAggregateOutputType | null
  _avg: Nasso_answerAvgAggregateOutputType | null
  _sum: Nasso_answerSumAggregateOutputType | null
  _min: Nasso_answerMinAggregateOutputType | null
  _max: Nasso_answerMaxAggregateOutputType | null
}

type GetNasso_answerGroupByPayload<T extends nasso_answerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Nasso_answerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Nasso_answerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Nasso_answerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Nasso_answerGroupByOutputType[P]>
      }
    >
  >



export type nasso_answerWhereInput = {
  AND?: Prisma.nasso_answerWhereInput | Prisma.nasso_answerWhereInput[]
  OR?: Prisma.nasso_answerWhereInput[]
  NOT?: Prisma.nasso_answerWhereInput | Prisma.nasso_answerWhereInput[]
  ans_Id?: Prisma.IntFilter<"nasso_answer"> | number
  qns_ID?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
  answer?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_correct?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_uza?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
  nasso_qns?: Prisma.XOR<Prisma.Nasso_qnsNullableScalarRelationFilter, Prisma.nasso_qnsWhereInput> | null
}

export type nasso_answerOrderByWithRelationInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  answer?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_correct?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_uza?: Prisma.SortOrderInput | Prisma.SortOrder
  nasso_qns?: Prisma.nasso_qnsOrderByWithRelationInput
  _relevance?: Prisma.nasso_answerOrderByRelevanceInput
}

export type nasso_answerWhereUniqueInput = Prisma.AtLeast<{
  ans_Id?: number
  AND?: Prisma.nasso_answerWhereInput | Prisma.nasso_answerWhereInput[]
  OR?: Prisma.nasso_answerWhereInput[]
  NOT?: Prisma.nasso_answerWhereInput | Prisma.nasso_answerWhereInput[]
  qns_ID?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
  answer?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_correct?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_uza?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
  nasso_qns?: Prisma.XOR<Prisma.Nasso_qnsNullableScalarRelationFilter, Prisma.nasso_qnsWhereInput> | null
}, "ans_Id">

export type nasso_answerOrderByWithAggregationInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrderInput | Prisma.SortOrder
  answer?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_correct?: Prisma.SortOrderInput | Prisma.SortOrder
  ans_uza?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.nasso_answerCountOrderByAggregateInput
  _avg?: Prisma.nasso_answerAvgOrderByAggregateInput
  _max?: Prisma.nasso_answerMaxOrderByAggregateInput
  _min?: Prisma.nasso_answerMinOrderByAggregateInput
  _sum?: Prisma.nasso_answerSumOrderByAggregateInput
}

export type nasso_answerScalarWhereWithAggregatesInput = {
  AND?: Prisma.nasso_answerScalarWhereWithAggregatesInput | Prisma.nasso_answerScalarWhereWithAggregatesInput[]
  OR?: Prisma.nasso_answerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.nasso_answerScalarWhereWithAggregatesInput | Prisma.nasso_answerScalarWhereWithAggregatesInput[]
  ans_Id?: Prisma.IntWithAggregatesFilter<"nasso_answer"> | number
  qns_ID?: Prisma.IntNullableWithAggregatesFilter<"nasso_answer"> | number | null
  answer?: Prisma.StringNullableWithAggregatesFilter<"nasso_answer"> | string | null
  ans_correct?: Prisma.StringNullableWithAggregatesFilter<"nasso_answer"> | string | null
  ans_uza?: Prisma.IntNullableWithAggregatesFilter<"nasso_answer"> | number | null
}

export type nasso_answerCreateInput = {
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
  nasso_qns?: Prisma.nasso_qnsCreateNestedOneWithoutNasso_answerInput
}

export type nasso_answerUncheckedCreateInput = {
  ans_Id?: number
  qns_ID?: number | null
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
}

export type nasso_answerUpdateInput = {
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  nasso_qns?: Prisma.nasso_qnsUpdateOneWithoutNasso_answerNestedInput
}

export type nasso_answerUncheckedUpdateInput = {
  ans_Id?: Prisma.IntFieldUpdateOperationsInput | number
  qns_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type nasso_answerCreateManyInput = {
  ans_Id?: number
  qns_ID?: number | null
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
}

export type nasso_answerUpdateManyMutationInput = {
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type nasso_answerUncheckedUpdateManyInput = {
  ans_Id?: Prisma.IntFieldUpdateOperationsInput | number
  qns_ID?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type nasso_answerOrderByRelevanceInput = {
  fields: Prisma.nasso_answerOrderByRelevanceFieldEnum | Prisma.nasso_answerOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type nasso_answerCountOrderByAggregateInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  ans_correct?: Prisma.SortOrder
  ans_uza?: Prisma.SortOrder
}

export type nasso_answerAvgOrderByAggregateInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  ans_uza?: Prisma.SortOrder
}

export type nasso_answerMaxOrderByAggregateInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  ans_correct?: Prisma.SortOrder
  ans_uza?: Prisma.SortOrder
}

export type nasso_answerMinOrderByAggregateInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  ans_correct?: Prisma.SortOrder
  ans_uza?: Prisma.SortOrder
}

export type nasso_answerSumOrderByAggregateInput = {
  ans_Id?: Prisma.SortOrder
  qns_ID?: Prisma.SortOrder
  ans_uza?: Prisma.SortOrder
}

export type Nasso_answerListRelationFilter = {
  every?: Prisma.nasso_answerWhereInput
  some?: Prisma.nasso_answerWhereInput
  none?: Prisma.nasso_answerWhereInput
}

export type nasso_answerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type nasso_answerCreateNestedManyWithoutNasso_qnsInput = {
  create?: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput> | Prisma.nasso_answerCreateWithoutNasso_qnsInput[] | Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput | Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput[]
  createMany?: Prisma.nasso_answerCreateManyNasso_qnsInputEnvelope
  connect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
}

export type nasso_answerUncheckedCreateNestedManyWithoutNasso_qnsInput = {
  create?: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput> | Prisma.nasso_answerCreateWithoutNasso_qnsInput[] | Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput | Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput[]
  createMany?: Prisma.nasso_answerCreateManyNasso_qnsInputEnvelope
  connect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
}

export type nasso_answerUpdateManyWithoutNasso_qnsNestedInput = {
  create?: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput> | Prisma.nasso_answerCreateWithoutNasso_qnsInput[] | Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput | Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput[]
  upsert?: Prisma.nasso_answerUpsertWithWhereUniqueWithoutNasso_qnsInput | Prisma.nasso_answerUpsertWithWhereUniqueWithoutNasso_qnsInput[]
  createMany?: Prisma.nasso_answerCreateManyNasso_qnsInputEnvelope
  set?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  disconnect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  delete?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  connect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  update?: Prisma.nasso_answerUpdateWithWhereUniqueWithoutNasso_qnsInput | Prisma.nasso_answerUpdateWithWhereUniqueWithoutNasso_qnsInput[]
  updateMany?: Prisma.nasso_answerUpdateManyWithWhereWithoutNasso_qnsInput | Prisma.nasso_answerUpdateManyWithWhereWithoutNasso_qnsInput[]
  deleteMany?: Prisma.nasso_answerScalarWhereInput | Prisma.nasso_answerScalarWhereInput[]
}

export type nasso_answerUncheckedUpdateManyWithoutNasso_qnsNestedInput = {
  create?: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput> | Prisma.nasso_answerCreateWithoutNasso_qnsInput[] | Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput[]
  connectOrCreate?: Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput | Prisma.nasso_answerCreateOrConnectWithoutNasso_qnsInput[]
  upsert?: Prisma.nasso_answerUpsertWithWhereUniqueWithoutNasso_qnsInput | Prisma.nasso_answerUpsertWithWhereUniqueWithoutNasso_qnsInput[]
  createMany?: Prisma.nasso_answerCreateManyNasso_qnsInputEnvelope
  set?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  disconnect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  delete?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  connect?: Prisma.nasso_answerWhereUniqueInput | Prisma.nasso_answerWhereUniqueInput[]
  update?: Prisma.nasso_answerUpdateWithWhereUniqueWithoutNasso_qnsInput | Prisma.nasso_answerUpdateWithWhereUniqueWithoutNasso_qnsInput[]
  updateMany?: Prisma.nasso_answerUpdateManyWithWhereWithoutNasso_qnsInput | Prisma.nasso_answerUpdateManyWithWhereWithoutNasso_qnsInput[]
  deleteMany?: Prisma.nasso_answerScalarWhereInput | Prisma.nasso_answerScalarWhereInput[]
}

export type nasso_answerCreateWithoutNasso_qnsInput = {
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
}

export type nasso_answerUncheckedCreateWithoutNasso_qnsInput = {
  ans_Id?: number
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
}

export type nasso_answerCreateOrConnectWithoutNasso_qnsInput = {
  where: Prisma.nasso_answerWhereUniqueInput
  create: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput>
}

export type nasso_answerCreateManyNasso_qnsInputEnvelope = {
  data: Prisma.nasso_answerCreateManyNasso_qnsInput | Prisma.nasso_answerCreateManyNasso_qnsInput[]
  skipDuplicates?: boolean
}

export type nasso_answerUpsertWithWhereUniqueWithoutNasso_qnsInput = {
  where: Prisma.nasso_answerWhereUniqueInput
  update: Prisma.XOR<Prisma.nasso_answerUpdateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedUpdateWithoutNasso_qnsInput>
  create: Prisma.XOR<Prisma.nasso_answerCreateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedCreateWithoutNasso_qnsInput>
}

export type nasso_answerUpdateWithWhereUniqueWithoutNasso_qnsInput = {
  where: Prisma.nasso_answerWhereUniqueInput
  data: Prisma.XOR<Prisma.nasso_answerUpdateWithoutNasso_qnsInput, Prisma.nasso_answerUncheckedUpdateWithoutNasso_qnsInput>
}

export type nasso_answerUpdateManyWithWhereWithoutNasso_qnsInput = {
  where: Prisma.nasso_answerScalarWhereInput
  data: Prisma.XOR<Prisma.nasso_answerUpdateManyMutationInput, Prisma.nasso_answerUncheckedUpdateManyWithoutNasso_qnsInput>
}

export type nasso_answerScalarWhereInput = {
  AND?: Prisma.nasso_answerScalarWhereInput | Prisma.nasso_answerScalarWhereInput[]
  OR?: Prisma.nasso_answerScalarWhereInput[]
  NOT?: Prisma.nasso_answerScalarWhereInput | Prisma.nasso_answerScalarWhereInput[]
  ans_Id?: Prisma.IntFilter<"nasso_answer"> | number
  qns_ID?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
  answer?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_correct?: Prisma.StringNullableFilter<"nasso_answer"> | string | null
  ans_uza?: Prisma.IntNullableFilter<"nasso_answer"> | number | null
}

export type nasso_answerCreateManyNasso_qnsInput = {
  ans_Id?: number
  answer?: string | null
  ans_correct?: string | null
  ans_uza?: number | null
}

export type nasso_answerUpdateWithoutNasso_qnsInput = {
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type nasso_answerUncheckedUpdateWithoutNasso_qnsInput = {
  ans_Id?: Prisma.IntFieldUpdateOperationsInput | number
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type nasso_answerUncheckedUpdateManyWithoutNasso_qnsInput = {
  ans_Id?: Prisma.IntFieldUpdateOperationsInput | number
  answer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_correct?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ans_uza?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type nasso_answerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ans_Id?: boolean
  qns_ID?: boolean
  answer?: boolean
  ans_correct?: boolean
  ans_uza?: boolean
  nasso_qns?: boolean | Prisma.nasso_answer$nasso_qnsArgs<ExtArgs>
}, ExtArgs["result"]["nasso_answer"]>



export type nasso_answerSelectScalar = {
  ans_Id?: boolean
  qns_ID?: boolean
  answer?: boolean
  ans_correct?: boolean
  ans_uza?: boolean
}

export type nasso_answerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"ans_Id" | "qns_ID" | "answer" | "ans_correct" | "ans_uza", ExtArgs["result"]["nasso_answer"]>
export type nasso_answerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  nasso_qns?: boolean | Prisma.nasso_answer$nasso_qnsArgs<ExtArgs>
}

export type $nasso_answerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "nasso_answer"
  objects: {
    nasso_qns: Prisma.$nasso_qnsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    ans_Id: number
    qns_ID: number | null
    answer: string | null
    ans_correct: string | null
    ans_uza: number | null
  }, ExtArgs["result"]["nasso_answer"]>
  composites: {}
}

export type nasso_answerGetPayload<S extends boolean | null | undefined | nasso_answerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload, S>

export type nasso_answerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<nasso_answerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Nasso_answerCountAggregateInputType | true
  }

export interface nasso_answerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nasso_answer'], meta: { name: 'nasso_answer' } }
  /**
   * Find zero or one Nasso_answer that matches the filter.
   * @param {nasso_answerFindUniqueArgs} args - Arguments to find a Nasso_answer
   * @example
   * // Get one Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends nasso_answerFindUniqueArgs>(args: Prisma.SelectSubset<T, nasso_answerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Nasso_answer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {nasso_answerFindUniqueOrThrowArgs} args - Arguments to find a Nasso_answer
   * @example
   * // Get one Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends nasso_answerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, nasso_answerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_answer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerFindFirstArgs} args - Arguments to find a Nasso_answer
   * @example
   * // Get one Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends nasso_answerFindFirstArgs>(args?: Prisma.SelectSubset<T, nasso_answerFindFirstArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_answer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerFindFirstOrThrowArgs} args - Arguments to find a Nasso_answer
   * @example
   * // Get one Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends nasso_answerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, nasso_answerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Nasso_answers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Nasso_answers
   * const nasso_answers = await prisma.nasso_answer.findMany()
   * 
   * // Get first 10 Nasso_answers
   * const nasso_answers = await prisma.nasso_answer.findMany({ take: 10 })
   * 
   * // Only select the `ans_Id`
   * const nasso_answerWithAns_IdOnly = await prisma.nasso_answer.findMany({ select: { ans_Id: true } })
   * 
   */
  findMany<T extends nasso_answerFindManyArgs>(args?: Prisma.SelectSubset<T, nasso_answerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Nasso_answer.
   * @param {nasso_answerCreateArgs} args - Arguments to create a Nasso_answer.
   * @example
   * // Create one Nasso_answer
   * const Nasso_answer = await prisma.nasso_answer.create({
   *   data: {
   *     // ... data to create a Nasso_answer
   *   }
   * })
   * 
   */
  create<T extends nasso_answerCreateArgs>(args: Prisma.SelectSubset<T, nasso_answerCreateArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Nasso_answers.
   * @param {nasso_answerCreateManyArgs} args - Arguments to create many Nasso_answers.
   * @example
   * // Create many Nasso_answers
   * const nasso_answer = await prisma.nasso_answer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends nasso_answerCreateManyArgs>(args?: Prisma.SelectSubset<T, nasso_answerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Nasso_answer.
   * @param {nasso_answerDeleteArgs} args - Arguments to delete one Nasso_answer.
   * @example
   * // Delete one Nasso_answer
   * const Nasso_answer = await prisma.nasso_answer.delete({
   *   where: {
   *     // ... filter to delete one Nasso_answer
   *   }
   * })
   * 
   */
  delete<T extends nasso_answerDeleteArgs>(args: Prisma.SelectSubset<T, nasso_answerDeleteArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Nasso_answer.
   * @param {nasso_answerUpdateArgs} args - Arguments to update one Nasso_answer.
   * @example
   * // Update one Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends nasso_answerUpdateArgs>(args: Prisma.SelectSubset<T, nasso_answerUpdateArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Nasso_answers.
   * @param {nasso_answerDeleteManyArgs} args - Arguments to filter Nasso_answers to delete.
   * @example
   * // Delete a few Nasso_answers
   * const { count } = await prisma.nasso_answer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends nasso_answerDeleteManyArgs>(args?: Prisma.SelectSubset<T, nasso_answerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Nasso_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Nasso_answers
   * const nasso_answer = await prisma.nasso_answer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends nasso_answerUpdateManyArgs>(args: Prisma.SelectSubset<T, nasso_answerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Nasso_answer.
   * @param {nasso_answerUpsertArgs} args - Arguments to update or create a Nasso_answer.
   * @example
   * // Update or create a Nasso_answer
   * const nasso_answer = await prisma.nasso_answer.upsert({
   *   create: {
   *     // ... data to create a Nasso_answer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Nasso_answer we want to update
   *   }
   * })
   */
  upsert<T extends nasso_answerUpsertArgs>(args: Prisma.SelectSubset<T, nasso_answerUpsertArgs<ExtArgs>>): Prisma.Prisma__nasso_answerClient<runtime.Types.Result.GetResult<Prisma.$nasso_answerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Nasso_answers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerCountArgs} args - Arguments to filter Nasso_answers to count.
   * @example
   * // Count the number of Nasso_answers
   * const count = await prisma.nasso_answer.count({
   *   where: {
   *     // ... the filter for the Nasso_answers we want to count
   *   }
   * })
  **/
  count<T extends nasso_answerCountArgs>(
    args?: Prisma.Subset<T, nasso_answerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Nasso_answerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Nasso_answer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Nasso_answerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Nasso_answerAggregateArgs>(args: Prisma.Subset<T, Nasso_answerAggregateArgs>): Prisma.PrismaPromise<GetNasso_answerAggregateType<T>>

  /**
   * Group by Nasso_answer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_answerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends nasso_answerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: nasso_answerGroupByArgs['orderBy'] }
      : { orderBy?: nasso_answerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, nasso_answerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNasso_answerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the nasso_answer model
 */
readonly fields: nasso_answerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for nasso_answer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__nasso_answerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  nasso_qns<T extends Prisma.nasso_answer$nasso_qnsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.nasso_answer$nasso_qnsArgs<ExtArgs>>): Prisma.Prisma__nasso_qnsClient<runtime.Types.Result.GetResult<Prisma.$nasso_qnsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the nasso_answer model
 */
export interface nasso_answerFieldRefs {
  readonly ans_Id: Prisma.FieldRef<"nasso_answer", 'Int'>
  readonly qns_ID: Prisma.FieldRef<"nasso_answer", 'Int'>
  readonly answer: Prisma.FieldRef<"nasso_answer", 'String'>
  readonly ans_correct: Prisma.FieldRef<"nasso_answer", 'String'>
  readonly ans_uza: Prisma.FieldRef<"nasso_answer", 'Int'>
}
    

// Custom InputTypes
/**
 * nasso_answer findUnique
 */
export type nasso_answerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter, which nasso_answer to fetch.
   */
  where: Prisma.nasso_answerWhereUniqueInput
}

/**
 * nasso_answer findUniqueOrThrow
 */
export type nasso_answerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter, which nasso_answer to fetch.
   */
  where: Prisma.nasso_answerWhereUniqueInput
}

/**
 * nasso_answer findFirst
 */
export type nasso_answerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter, which nasso_answer to fetch.
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_answers to fetch.
   */
  orderBy?: Prisma.nasso_answerOrderByWithRelationInput | Prisma.nasso_answerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_answers.
   */
  cursor?: Prisma.nasso_answerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_answers.
   */
  distinct?: Prisma.Nasso_answerScalarFieldEnum | Prisma.Nasso_answerScalarFieldEnum[]
}

/**
 * nasso_answer findFirstOrThrow
 */
export type nasso_answerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter, which nasso_answer to fetch.
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_answers to fetch.
   */
  orderBy?: Prisma.nasso_answerOrderByWithRelationInput | Prisma.nasso_answerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_answers.
   */
  cursor?: Prisma.nasso_answerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_answers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_answers.
   */
  distinct?: Prisma.Nasso_answerScalarFieldEnum | Prisma.Nasso_answerScalarFieldEnum[]
}

/**
 * nasso_answer findMany
 */
export type nasso_answerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter, which nasso_answers to fetch.
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_answers to fetch.
   */
  orderBy?: Prisma.nasso_answerOrderByWithRelationInput | Prisma.nasso_answerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing nasso_answers.
   */
  cursor?: Prisma.nasso_answerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_answers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_answers.
   */
  skip?: number
  distinct?: Prisma.Nasso_answerScalarFieldEnum | Prisma.Nasso_answerScalarFieldEnum[]
}

/**
 * nasso_answer create
 */
export type nasso_answerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * The data needed to create a nasso_answer.
   */
  data?: Prisma.XOR<Prisma.nasso_answerCreateInput, Prisma.nasso_answerUncheckedCreateInput>
}

/**
 * nasso_answer createMany
 */
export type nasso_answerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many nasso_answers.
   */
  data: Prisma.nasso_answerCreateManyInput | Prisma.nasso_answerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * nasso_answer update
 */
export type nasso_answerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * The data needed to update a nasso_answer.
   */
  data: Prisma.XOR<Prisma.nasso_answerUpdateInput, Prisma.nasso_answerUncheckedUpdateInput>
  /**
   * Choose, which nasso_answer to update.
   */
  where: Prisma.nasso_answerWhereUniqueInput
}

/**
 * nasso_answer updateMany
 */
export type nasso_answerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update nasso_answers.
   */
  data: Prisma.XOR<Prisma.nasso_answerUpdateManyMutationInput, Prisma.nasso_answerUncheckedUpdateManyInput>
  /**
   * Filter which nasso_answers to update
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * Limit how many nasso_answers to update.
   */
  limit?: number
}

/**
 * nasso_answer upsert
 */
export type nasso_answerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * The filter to search for the nasso_answer to update in case it exists.
   */
  where: Prisma.nasso_answerWhereUniqueInput
  /**
   * In case the nasso_answer found by the `where` argument doesn't exist, create a new nasso_answer with this data.
   */
  create: Prisma.XOR<Prisma.nasso_answerCreateInput, Prisma.nasso_answerUncheckedCreateInput>
  /**
   * In case the nasso_answer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.nasso_answerUpdateInput, Prisma.nasso_answerUncheckedUpdateInput>
}

/**
 * nasso_answer delete
 */
export type nasso_answerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
  /**
   * Filter which nasso_answer to delete.
   */
  where: Prisma.nasso_answerWhereUniqueInput
}

/**
 * nasso_answer deleteMany
 */
export type nasso_answerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_answers to delete
   */
  where?: Prisma.nasso_answerWhereInput
  /**
   * Limit how many nasso_answers to delete.
   */
  limit?: number
}

/**
 * nasso_answer.nasso_qns
 */
export type nasso_answer$nasso_qnsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_qns
   */
  select?: Prisma.nasso_qnsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_qns
   */
  omit?: Prisma.nasso_qnsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_qnsInclude<ExtArgs> | null
  where?: Prisma.nasso_qnsWhereInput
}

/**
 * nasso_answer without action
 */
export type nasso_answerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_answer
   */
  select?: Prisma.nasso_answerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_answer
   */
  omit?: Prisma.nasso_answerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.nasso_answerInclude<ExtArgs> | null
}
