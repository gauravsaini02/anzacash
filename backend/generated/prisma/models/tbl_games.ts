
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tbl_games` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model tbl_games
 * 
 */
export type tbl_gamesModel = runtime.Types.Result.DefaultSelection<Prisma.$tbl_gamesPayload>

export type AggregateTbl_games = {
  _count: Tbl_gamesCountAggregateOutputType | null
  _avg: Tbl_gamesAvgAggregateOutputType | null
  _sum: Tbl_gamesSumAggregateOutputType | null
  _min: Tbl_gamesMinAggregateOutputType | null
  _max: Tbl_gamesMaxAggregateOutputType | null
}

export type Tbl_gamesAvgAggregateOutputType = {
  g_ID: number | null
}

export type Tbl_gamesSumAggregateOutputType = {
  g_ID: number | null
}

export type Tbl_gamesMinAggregateOutputType = {
  g_ID: number | null
  g_games: string | null
}

export type Tbl_gamesMaxAggregateOutputType = {
  g_ID: number | null
  g_games: string | null
}

export type Tbl_gamesCountAggregateOutputType = {
  g_ID: number
  g_games: number
  _all: number
}


export type Tbl_gamesAvgAggregateInputType = {
  g_ID?: true
}

export type Tbl_gamesSumAggregateInputType = {
  g_ID?: true
}

export type Tbl_gamesMinAggregateInputType = {
  g_ID?: true
  g_games?: true
}

export type Tbl_gamesMaxAggregateInputType = {
  g_ID?: true
  g_games?: true
}

export type Tbl_gamesCountAggregateInputType = {
  g_ID?: true
  g_games?: true
  _all?: true
}

export type Tbl_gamesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_games to aggregate.
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_games to fetch.
   */
  orderBy?: Prisma.tbl_gamesOrderByWithRelationInput | Prisma.tbl_gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tbl_gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tbl_games
  **/
  _count?: true | Tbl_gamesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Tbl_gamesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Tbl_gamesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Tbl_gamesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Tbl_gamesMaxAggregateInputType
}

export type GetTbl_gamesAggregateType<T extends Tbl_gamesAggregateArgs> = {
      [P in keyof T & keyof AggregateTbl_games]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTbl_games[P]>
    : Prisma.GetScalarType<T[P], AggregateTbl_games[P]>
}




export type tbl_gamesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tbl_gamesWhereInput
  orderBy?: Prisma.tbl_gamesOrderByWithAggregationInput | Prisma.tbl_gamesOrderByWithAggregationInput[]
  by: Prisma.Tbl_gamesScalarFieldEnum[] | Prisma.Tbl_gamesScalarFieldEnum
  having?: Prisma.tbl_gamesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Tbl_gamesCountAggregateInputType | true
  _avg?: Tbl_gamesAvgAggregateInputType
  _sum?: Tbl_gamesSumAggregateInputType
  _min?: Tbl_gamesMinAggregateInputType
  _max?: Tbl_gamesMaxAggregateInputType
}

export type Tbl_gamesGroupByOutputType = {
  g_ID: number
  g_games: string | null
  _count: Tbl_gamesCountAggregateOutputType | null
  _avg: Tbl_gamesAvgAggregateOutputType | null
  _sum: Tbl_gamesSumAggregateOutputType | null
  _min: Tbl_gamesMinAggregateOutputType | null
  _max: Tbl_gamesMaxAggregateOutputType | null
}

type GetTbl_gamesGroupByPayload<T extends tbl_gamesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Tbl_gamesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Tbl_gamesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Tbl_gamesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Tbl_gamesGroupByOutputType[P]>
      }
    >
  >



export type tbl_gamesWhereInput = {
  AND?: Prisma.tbl_gamesWhereInput | Prisma.tbl_gamesWhereInput[]
  OR?: Prisma.tbl_gamesWhereInput[]
  NOT?: Prisma.tbl_gamesWhereInput | Prisma.tbl_gamesWhereInput[]
  g_ID?: Prisma.IntFilter<"tbl_games"> | number
  g_games?: Prisma.StringNullableFilter<"tbl_games"> | string | null
}

export type tbl_gamesOrderByWithRelationInput = {
  g_ID?: Prisma.SortOrder
  g_games?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.tbl_gamesOrderByRelevanceInput
}

export type tbl_gamesWhereUniqueInput = Prisma.AtLeast<{
  g_ID?: number
  AND?: Prisma.tbl_gamesWhereInput | Prisma.tbl_gamesWhereInput[]
  OR?: Prisma.tbl_gamesWhereInput[]
  NOT?: Prisma.tbl_gamesWhereInput | Prisma.tbl_gamesWhereInput[]
  g_games?: Prisma.StringNullableFilter<"tbl_games"> | string | null
}, "g_ID">

export type tbl_gamesOrderByWithAggregationInput = {
  g_ID?: Prisma.SortOrder
  g_games?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.tbl_gamesCountOrderByAggregateInput
  _avg?: Prisma.tbl_gamesAvgOrderByAggregateInput
  _max?: Prisma.tbl_gamesMaxOrderByAggregateInput
  _min?: Prisma.tbl_gamesMinOrderByAggregateInput
  _sum?: Prisma.tbl_gamesSumOrderByAggregateInput
}

export type tbl_gamesScalarWhereWithAggregatesInput = {
  AND?: Prisma.tbl_gamesScalarWhereWithAggregatesInput | Prisma.tbl_gamesScalarWhereWithAggregatesInput[]
  OR?: Prisma.tbl_gamesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tbl_gamesScalarWhereWithAggregatesInput | Prisma.tbl_gamesScalarWhereWithAggregatesInput[]
  g_ID?: Prisma.IntWithAggregatesFilter<"tbl_games"> | number
  g_games?: Prisma.StringNullableWithAggregatesFilter<"tbl_games"> | string | null
}

export type tbl_gamesCreateInput = {
  g_games?: string | null
}

export type tbl_gamesUncheckedCreateInput = {
  g_ID?: number
  g_games?: string | null
}

export type tbl_gamesUpdateInput = {
  g_games?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_gamesUncheckedUpdateInput = {
  g_ID?: Prisma.IntFieldUpdateOperationsInput | number
  g_games?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_gamesCreateManyInput = {
  g_ID?: number
  g_games?: string | null
}

export type tbl_gamesUpdateManyMutationInput = {
  g_games?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_gamesUncheckedUpdateManyInput = {
  g_ID?: Prisma.IntFieldUpdateOperationsInput | number
  g_games?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type tbl_gamesOrderByRelevanceInput = {
  fields: Prisma.tbl_gamesOrderByRelevanceFieldEnum | Prisma.tbl_gamesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type tbl_gamesCountOrderByAggregateInput = {
  g_ID?: Prisma.SortOrder
  g_games?: Prisma.SortOrder
}

export type tbl_gamesAvgOrderByAggregateInput = {
  g_ID?: Prisma.SortOrder
}

export type tbl_gamesMaxOrderByAggregateInput = {
  g_ID?: Prisma.SortOrder
  g_games?: Prisma.SortOrder
}

export type tbl_gamesMinOrderByAggregateInput = {
  g_ID?: Prisma.SortOrder
  g_games?: Prisma.SortOrder
}

export type tbl_gamesSumOrderByAggregateInput = {
  g_ID?: Prisma.SortOrder
}



export type tbl_gamesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  g_ID?: boolean
  g_games?: boolean
}, ExtArgs["result"]["tbl_games"]>



export type tbl_gamesSelectScalar = {
  g_ID?: boolean
  g_games?: boolean
}

export type tbl_gamesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"g_ID" | "g_games", ExtArgs["result"]["tbl_games"]>

export type $tbl_gamesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tbl_games"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    g_ID: number
    g_games: string | null
  }, ExtArgs["result"]["tbl_games"]>
  composites: {}
}

export type tbl_gamesGetPayload<S extends boolean | null | undefined | tbl_gamesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload, S>

export type tbl_gamesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tbl_gamesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Tbl_gamesCountAggregateInputType | true
  }

export interface tbl_gamesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbl_games'], meta: { name: 'tbl_games' } }
  /**
   * Find zero or one Tbl_games that matches the filter.
   * @param {tbl_gamesFindUniqueArgs} args - Arguments to find a Tbl_games
   * @example
   * // Get one Tbl_games
   * const tbl_games = await prisma.tbl_games.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tbl_gamesFindUniqueArgs>(args: Prisma.SelectSubset<T, tbl_gamesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tbl_games that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tbl_gamesFindUniqueOrThrowArgs} args - Arguments to find a Tbl_games
   * @example
   * // Get one Tbl_games
   * const tbl_games = await prisma.tbl_games.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tbl_gamesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tbl_gamesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesFindFirstArgs} args - Arguments to find a Tbl_games
   * @example
   * // Get one Tbl_games
   * const tbl_games = await prisma.tbl_games.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tbl_gamesFindFirstArgs>(args?: Prisma.SelectSubset<T, tbl_gamesFindFirstArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tbl_games that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesFindFirstOrThrowArgs} args - Arguments to find a Tbl_games
   * @example
   * // Get one Tbl_games
   * const tbl_games = await prisma.tbl_games.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tbl_gamesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tbl_gamesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tbl_games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tbl_games
   * const tbl_games = await prisma.tbl_games.findMany()
   * 
   * // Get first 10 Tbl_games
   * const tbl_games = await prisma.tbl_games.findMany({ take: 10 })
   * 
   * // Only select the `g_ID`
   * const tbl_gamesWithG_IDOnly = await prisma.tbl_games.findMany({ select: { g_ID: true } })
   * 
   */
  findMany<T extends tbl_gamesFindManyArgs>(args?: Prisma.SelectSubset<T, tbl_gamesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tbl_games.
   * @param {tbl_gamesCreateArgs} args - Arguments to create a Tbl_games.
   * @example
   * // Create one Tbl_games
   * const Tbl_games = await prisma.tbl_games.create({
   *   data: {
   *     // ... data to create a Tbl_games
   *   }
   * })
   * 
   */
  create<T extends tbl_gamesCreateArgs>(args: Prisma.SelectSubset<T, tbl_gamesCreateArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tbl_games.
   * @param {tbl_gamesCreateManyArgs} args - Arguments to create many Tbl_games.
   * @example
   * // Create many Tbl_games
   * const tbl_games = await prisma.tbl_games.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tbl_gamesCreateManyArgs>(args?: Prisma.SelectSubset<T, tbl_gamesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tbl_games.
   * @param {tbl_gamesDeleteArgs} args - Arguments to delete one Tbl_games.
   * @example
   * // Delete one Tbl_games
   * const Tbl_games = await prisma.tbl_games.delete({
   *   where: {
   *     // ... filter to delete one Tbl_games
   *   }
   * })
   * 
   */
  delete<T extends tbl_gamesDeleteArgs>(args: Prisma.SelectSubset<T, tbl_gamesDeleteArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tbl_games.
   * @param {tbl_gamesUpdateArgs} args - Arguments to update one Tbl_games.
   * @example
   * // Update one Tbl_games
   * const tbl_games = await prisma.tbl_games.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tbl_gamesUpdateArgs>(args: Prisma.SelectSubset<T, tbl_gamesUpdateArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tbl_games.
   * @param {tbl_gamesDeleteManyArgs} args - Arguments to filter Tbl_games to delete.
   * @example
   * // Delete a few Tbl_games
   * const { count } = await prisma.tbl_games.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tbl_gamesDeleteManyArgs>(args?: Prisma.SelectSubset<T, tbl_gamesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tbl_games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tbl_games
   * const tbl_games = await prisma.tbl_games.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tbl_gamesUpdateManyArgs>(args: Prisma.SelectSubset<T, tbl_gamesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tbl_games.
   * @param {tbl_gamesUpsertArgs} args - Arguments to update or create a Tbl_games.
   * @example
   * // Update or create a Tbl_games
   * const tbl_games = await prisma.tbl_games.upsert({
   *   create: {
   *     // ... data to create a Tbl_games
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tbl_games we want to update
   *   }
   * })
   */
  upsert<T extends tbl_gamesUpsertArgs>(args: Prisma.SelectSubset<T, tbl_gamesUpsertArgs<ExtArgs>>): Prisma.Prisma__tbl_gamesClient<runtime.Types.Result.GetResult<Prisma.$tbl_gamesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tbl_games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesCountArgs} args - Arguments to filter Tbl_games to count.
   * @example
   * // Count the number of Tbl_games
   * const count = await prisma.tbl_games.count({
   *   where: {
   *     // ... the filter for the Tbl_games we want to count
   *   }
   * })
  **/
  count<T extends tbl_gamesCountArgs>(
    args?: Prisma.Subset<T, tbl_gamesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Tbl_gamesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tbl_games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Tbl_gamesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Tbl_gamesAggregateArgs>(args: Prisma.Subset<T, Tbl_gamesAggregateArgs>): Prisma.PrismaPromise<GetTbl_gamesAggregateType<T>>

  /**
   * Group by Tbl_games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tbl_gamesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tbl_gamesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tbl_gamesGroupByArgs['orderBy'] }
      : { orderBy?: tbl_gamesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tbl_gamesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_gamesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tbl_games model
 */
readonly fields: tbl_gamesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tbl_games.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tbl_gamesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tbl_games model
 */
export interface tbl_gamesFieldRefs {
  readonly g_ID: Prisma.FieldRef<"tbl_games", 'Int'>
  readonly g_games: Prisma.FieldRef<"tbl_games", 'String'>
}
    

// Custom InputTypes
/**
 * tbl_games findUnique
 */
export type tbl_gamesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_games to fetch.
   */
  where: Prisma.tbl_gamesWhereUniqueInput
}

/**
 * tbl_games findUniqueOrThrow
 */
export type tbl_gamesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_games to fetch.
   */
  where: Prisma.tbl_gamesWhereUniqueInput
}

/**
 * tbl_games findFirst
 */
export type tbl_gamesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_games to fetch.
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_games to fetch.
   */
  orderBy?: Prisma.tbl_gamesOrderByWithRelationInput | Prisma.tbl_gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_games.
   */
  cursor?: Prisma.tbl_gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_games.
   */
  distinct?: Prisma.Tbl_gamesScalarFieldEnum | Prisma.Tbl_gamesScalarFieldEnum[]
}

/**
 * tbl_games findFirstOrThrow
 */
export type tbl_gamesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_games to fetch.
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_games to fetch.
   */
  orderBy?: Prisma.tbl_gamesOrderByWithRelationInput | Prisma.tbl_gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tbl_games.
   */
  cursor?: Prisma.tbl_gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tbl_games.
   */
  distinct?: Prisma.Tbl_gamesScalarFieldEnum | Prisma.Tbl_gamesScalarFieldEnum[]
}

/**
 * tbl_games findMany
 */
export type tbl_gamesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter, which tbl_games to fetch.
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tbl_games to fetch.
   */
  orderBy?: Prisma.tbl_gamesOrderByWithRelationInput | Prisma.tbl_gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tbl_games.
   */
  cursor?: Prisma.tbl_gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tbl_games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tbl_games.
   */
  skip?: number
  distinct?: Prisma.Tbl_gamesScalarFieldEnum | Prisma.Tbl_gamesScalarFieldEnum[]
}

/**
 * tbl_games create
 */
export type tbl_gamesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * The data needed to create a tbl_games.
   */
  data?: Prisma.XOR<Prisma.tbl_gamesCreateInput, Prisma.tbl_gamesUncheckedCreateInput>
}

/**
 * tbl_games createMany
 */
export type tbl_gamesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tbl_games.
   */
  data: Prisma.tbl_gamesCreateManyInput | Prisma.tbl_gamesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tbl_games update
 */
export type tbl_gamesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * The data needed to update a tbl_games.
   */
  data: Prisma.XOR<Prisma.tbl_gamesUpdateInput, Prisma.tbl_gamesUncheckedUpdateInput>
  /**
   * Choose, which tbl_games to update.
   */
  where: Prisma.tbl_gamesWhereUniqueInput
}

/**
 * tbl_games updateMany
 */
export type tbl_gamesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tbl_games.
   */
  data: Prisma.XOR<Prisma.tbl_gamesUpdateManyMutationInput, Prisma.tbl_gamesUncheckedUpdateManyInput>
  /**
   * Filter which tbl_games to update
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * Limit how many tbl_games to update.
   */
  limit?: number
}

/**
 * tbl_games upsert
 */
export type tbl_gamesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * The filter to search for the tbl_games to update in case it exists.
   */
  where: Prisma.tbl_gamesWhereUniqueInput
  /**
   * In case the tbl_games found by the `where` argument doesn't exist, create a new tbl_games with this data.
   */
  create: Prisma.XOR<Prisma.tbl_gamesCreateInput, Prisma.tbl_gamesUncheckedCreateInput>
  /**
   * In case the tbl_games was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tbl_gamesUpdateInput, Prisma.tbl_gamesUncheckedUpdateInput>
}

/**
 * tbl_games delete
 */
export type tbl_gamesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
  /**
   * Filter which tbl_games to delete.
   */
  where: Prisma.tbl_gamesWhereUniqueInput
}

/**
 * tbl_games deleteMany
 */
export type tbl_gamesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tbl_games to delete
   */
  where?: Prisma.tbl_gamesWhereInput
  /**
   * Limit how many tbl_games to delete.
   */
  limit?: number
}

/**
 * tbl_games without action
 */
export type tbl_gamesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tbl_games
   */
  select?: Prisma.tbl_gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tbl_games
   */
  omit?: Prisma.tbl_gamesOmit<ExtArgs> | null
}
