
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ch_table` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ch_table
 * 
 */
export type ch_tableModel = runtime.Types.Result.DefaultSelection<Prisma.$ch_tablePayload>

export type AggregateCh_table = {
  _count: Ch_tableCountAggregateOutputType | null
  _avg: Ch_tableAvgAggregateOutputType | null
  _sum: Ch_tableSumAggregateOutputType | null
  _min: Ch_tableMinAggregateOutputType | null
  _max: Ch_tableMaxAggregateOutputType | null
}

export type Ch_tableAvgAggregateOutputType = {
  c_ID: number | null
  c_amount: number | null
  c_year: number | null
}

export type Ch_tableSumAggregateOutputType = {
  c_ID: number | null
  c_amount: number | null
  c_year: number | null
}

export type Ch_tableMinAggregateOutputType = {
  c_ID: number | null
  c_name: string | null
  c_amount: number | null
  c_date: string | null
  c_week: string | null
  c_year: number | null
  c_status: string | null
}

export type Ch_tableMaxAggregateOutputType = {
  c_ID: number | null
  c_name: string | null
  c_amount: number | null
  c_date: string | null
  c_week: string | null
  c_year: number | null
  c_status: string | null
}

export type Ch_tableCountAggregateOutputType = {
  c_ID: number
  c_name: number
  c_amount: number
  c_date: number
  c_week: number
  c_year: number
  c_status: number
  _all: number
}


export type Ch_tableAvgAggregateInputType = {
  c_ID?: true
  c_amount?: true
  c_year?: true
}

export type Ch_tableSumAggregateInputType = {
  c_ID?: true
  c_amount?: true
  c_year?: true
}

export type Ch_tableMinAggregateInputType = {
  c_ID?: true
  c_name?: true
  c_amount?: true
  c_date?: true
  c_week?: true
  c_year?: true
  c_status?: true
}

export type Ch_tableMaxAggregateInputType = {
  c_ID?: true
  c_name?: true
  c_amount?: true
  c_date?: true
  c_week?: true
  c_year?: true
  c_status?: true
}

export type Ch_tableCountAggregateInputType = {
  c_ID?: true
  c_name?: true
  c_amount?: true
  c_date?: true
  c_week?: true
  c_year?: true
  c_status?: true
  _all?: true
}

export type Ch_tableAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ch_table to aggregate.
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ch_tables to fetch.
   */
  orderBy?: Prisma.ch_tableOrderByWithRelationInput | Prisma.ch_tableOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ch_tableWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ch_tables from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ch_tables.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ch_tables
  **/
  _count?: true | Ch_tableCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Ch_tableAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Ch_tableSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Ch_tableMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Ch_tableMaxAggregateInputType
}

export type GetCh_tableAggregateType<T extends Ch_tableAggregateArgs> = {
      [P in keyof T & keyof AggregateCh_table]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCh_table[P]>
    : Prisma.GetScalarType<T[P], AggregateCh_table[P]>
}




export type ch_tableGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ch_tableWhereInput
  orderBy?: Prisma.ch_tableOrderByWithAggregationInput | Prisma.ch_tableOrderByWithAggregationInput[]
  by: Prisma.Ch_tableScalarFieldEnum[] | Prisma.Ch_tableScalarFieldEnum
  having?: Prisma.ch_tableScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Ch_tableCountAggregateInputType | true
  _avg?: Ch_tableAvgAggregateInputType
  _sum?: Ch_tableSumAggregateInputType
  _min?: Ch_tableMinAggregateInputType
  _max?: Ch_tableMaxAggregateInputType
}

export type Ch_tableGroupByOutputType = {
  c_ID: number
  c_name: string
  c_amount: number
  c_date: string
  c_week: string
  c_year: number | null
  c_status: string | null
  _count: Ch_tableCountAggregateOutputType | null
  _avg: Ch_tableAvgAggregateOutputType | null
  _sum: Ch_tableSumAggregateOutputType | null
  _min: Ch_tableMinAggregateOutputType | null
  _max: Ch_tableMaxAggregateOutputType | null
}

type GetCh_tableGroupByPayload<T extends ch_tableGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Ch_tableGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Ch_tableGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Ch_tableGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Ch_tableGroupByOutputType[P]>
      }
    >
  >



export type ch_tableWhereInput = {
  AND?: Prisma.ch_tableWhereInput | Prisma.ch_tableWhereInput[]
  OR?: Prisma.ch_tableWhereInput[]
  NOT?: Prisma.ch_tableWhereInput | Prisma.ch_tableWhereInput[]
  c_ID?: Prisma.IntFilter<"ch_table"> | number
  c_name?: Prisma.StringFilter<"ch_table"> | string
  c_amount?: Prisma.FloatFilter<"ch_table"> | number
  c_date?: Prisma.StringFilter<"ch_table"> | string
  c_week?: Prisma.StringFilter<"ch_table"> | string
  c_year?: Prisma.IntNullableFilter<"ch_table"> | number | null
  c_status?: Prisma.StringNullableFilter<"ch_table"> | string | null
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersScalarRelationFilter, Prisma.nasso_usersWhereInput>
}

export type ch_tableOrderByWithRelationInput = {
  c_ID?: Prisma.SortOrder
  c_name?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_date?: Prisma.SortOrder
  c_week?: Prisma.SortOrder
  c_year?: Prisma.SortOrderInput | Prisma.SortOrder
  c_status?: Prisma.SortOrderInput | Prisma.SortOrder
  nasso_users?: Prisma.nasso_usersOrderByWithRelationInput
  _relevance?: Prisma.ch_tableOrderByRelevanceInput
}

export type ch_tableWhereUniqueInput = Prisma.AtLeast<{
  c_ID?: number
  AND?: Prisma.ch_tableWhereInput | Prisma.ch_tableWhereInput[]
  OR?: Prisma.ch_tableWhereInput[]
  NOT?: Prisma.ch_tableWhereInput | Prisma.ch_tableWhereInput[]
  c_name?: Prisma.StringFilter<"ch_table"> | string
  c_amount?: Prisma.FloatFilter<"ch_table"> | number
  c_date?: Prisma.StringFilter<"ch_table"> | string
  c_week?: Prisma.StringFilter<"ch_table"> | string
  c_year?: Prisma.IntNullableFilter<"ch_table"> | number | null
  c_status?: Prisma.StringNullableFilter<"ch_table"> | string | null
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersScalarRelationFilter, Prisma.nasso_usersWhereInput>
}, "c_ID">

export type ch_tableOrderByWithAggregationInput = {
  c_ID?: Prisma.SortOrder
  c_name?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_date?: Prisma.SortOrder
  c_week?: Prisma.SortOrder
  c_year?: Prisma.SortOrderInput | Prisma.SortOrder
  c_status?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ch_tableCountOrderByAggregateInput
  _avg?: Prisma.ch_tableAvgOrderByAggregateInput
  _max?: Prisma.ch_tableMaxOrderByAggregateInput
  _min?: Prisma.ch_tableMinOrderByAggregateInput
  _sum?: Prisma.ch_tableSumOrderByAggregateInput
}

export type ch_tableScalarWhereWithAggregatesInput = {
  AND?: Prisma.ch_tableScalarWhereWithAggregatesInput | Prisma.ch_tableScalarWhereWithAggregatesInput[]
  OR?: Prisma.ch_tableScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ch_tableScalarWhereWithAggregatesInput | Prisma.ch_tableScalarWhereWithAggregatesInput[]
  c_ID?: Prisma.IntWithAggregatesFilter<"ch_table"> | number
  c_name?: Prisma.StringWithAggregatesFilter<"ch_table"> | string
  c_amount?: Prisma.FloatWithAggregatesFilter<"ch_table"> | number
  c_date?: Prisma.StringWithAggregatesFilter<"ch_table"> | string
  c_week?: Prisma.StringWithAggregatesFilter<"ch_table"> | string
  c_year?: Prisma.IntNullableWithAggregatesFilter<"ch_table"> | number | null
  c_status?: Prisma.StringNullableWithAggregatesFilter<"ch_table"> | string | null
}

export type ch_tableCreateInput = {
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
  nasso_users: Prisma.nasso_usersCreateNestedOneWithoutCh_tableInput
}

export type ch_tableUncheckedCreateInput = {
  c_ID?: number
  c_name: string
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
}

export type ch_tableUpdateInput = {
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nasso_users?: Prisma.nasso_usersUpdateOneRequiredWithoutCh_tableNestedInput
}

export type ch_tableUncheckedUpdateInput = {
  c_ID?: Prisma.IntFieldUpdateOperationsInput | number
  c_name?: Prisma.StringFieldUpdateOperationsInput | string
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ch_tableCreateManyInput = {
  c_ID?: number
  c_name: string
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
}

export type ch_tableUpdateManyMutationInput = {
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ch_tableUncheckedUpdateManyInput = {
  c_ID?: Prisma.IntFieldUpdateOperationsInput | number
  c_name?: Prisma.StringFieldUpdateOperationsInput | string
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ch_tableOrderByRelevanceInput = {
  fields: Prisma.ch_tableOrderByRelevanceFieldEnum | Prisma.ch_tableOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ch_tableCountOrderByAggregateInput = {
  c_ID?: Prisma.SortOrder
  c_name?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_date?: Prisma.SortOrder
  c_week?: Prisma.SortOrder
  c_year?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type ch_tableAvgOrderByAggregateInput = {
  c_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_year?: Prisma.SortOrder
}

export type ch_tableMaxOrderByAggregateInput = {
  c_ID?: Prisma.SortOrder
  c_name?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_date?: Prisma.SortOrder
  c_week?: Prisma.SortOrder
  c_year?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type ch_tableMinOrderByAggregateInput = {
  c_ID?: Prisma.SortOrder
  c_name?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_date?: Prisma.SortOrder
  c_week?: Prisma.SortOrder
  c_year?: Prisma.SortOrder
  c_status?: Prisma.SortOrder
}

export type ch_tableSumOrderByAggregateInput = {
  c_ID?: Prisma.SortOrder
  c_amount?: Prisma.SortOrder
  c_year?: Prisma.SortOrder
}

export type Ch_tableListRelationFilter = {
  every?: Prisma.ch_tableWhereInput
  some?: Prisma.ch_tableWhereInput
  none?: Prisma.ch_tableWhereInput
}

export type ch_tableOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ch_tableCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput> | Prisma.ch_tableCreateWithoutNasso_usersInput[] | Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput | Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.ch_tableCreateManyNasso_usersInputEnvelope
  connect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
}

export type ch_tableUncheckedCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput> | Prisma.ch_tableCreateWithoutNasso_usersInput[] | Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput | Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.ch_tableCreateManyNasso_usersInputEnvelope
  connect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
}

export type ch_tableUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput> | Prisma.ch_tableCreateWithoutNasso_usersInput[] | Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput | Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.ch_tableUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.ch_tableUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.ch_tableCreateManyNasso_usersInputEnvelope
  set?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  disconnect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  delete?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  connect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  update?: Prisma.ch_tableUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.ch_tableUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.ch_tableUpdateManyWithWhereWithoutNasso_usersInput | Prisma.ch_tableUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.ch_tableScalarWhereInput | Prisma.ch_tableScalarWhereInput[]
}

export type ch_tableUncheckedUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput> | Prisma.ch_tableCreateWithoutNasso_usersInput[] | Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput | Prisma.ch_tableCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.ch_tableUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.ch_tableUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.ch_tableCreateManyNasso_usersInputEnvelope
  set?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  disconnect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  delete?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  connect?: Prisma.ch_tableWhereUniqueInput | Prisma.ch_tableWhereUniqueInput[]
  update?: Prisma.ch_tableUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.ch_tableUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.ch_tableUpdateManyWithWhereWithoutNasso_usersInput | Prisma.ch_tableUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.ch_tableScalarWhereInput | Prisma.ch_tableScalarWhereInput[]
}

export type ch_tableCreateWithoutNasso_usersInput = {
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
}

export type ch_tableUncheckedCreateWithoutNasso_usersInput = {
  c_ID?: number
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
}

export type ch_tableCreateOrConnectWithoutNasso_usersInput = {
  where: Prisma.ch_tableWhereUniqueInput
  create: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput>
}

export type ch_tableCreateManyNasso_usersInputEnvelope = {
  data: Prisma.ch_tableCreateManyNasso_usersInput | Prisma.ch_tableCreateManyNasso_usersInput[]
  skipDuplicates?: boolean
}

export type ch_tableUpsertWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.ch_tableWhereUniqueInput
  update: Prisma.XOR<Prisma.ch_tableUpdateWithoutNasso_usersInput, Prisma.ch_tableUncheckedUpdateWithoutNasso_usersInput>
  create: Prisma.XOR<Prisma.ch_tableCreateWithoutNasso_usersInput, Prisma.ch_tableUncheckedCreateWithoutNasso_usersInput>
}

export type ch_tableUpdateWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.ch_tableWhereUniqueInput
  data: Prisma.XOR<Prisma.ch_tableUpdateWithoutNasso_usersInput, Prisma.ch_tableUncheckedUpdateWithoutNasso_usersInput>
}

export type ch_tableUpdateManyWithWhereWithoutNasso_usersInput = {
  where: Prisma.ch_tableScalarWhereInput
  data: Prisma.XOR<Prisma.ch_tableUpdateManyMutationInput, Prisma.ch_tableUncheckedUpdateManyWithoutNasso_usersInput>
}

export type ch_tableScalarWhereInput = {
  AND?: Prisma.ch_tableScalarWhereInput | Prisma.ch_tableScalarWhereInput[]
  OR?: Prisma.ch_tableScalarWhereInput[]
  NOT?: Prisma.ch_tableScalarWhereInput | Prisma.ch_tableScalarWhereInput[]
  c_ID?: Prisma.IntFilter<"ch_table"> | number
  c_name?: Prisma.StringFilter<"ch_table"> | string
  c_amount?: Prisma.FloatFilter<"ch_table"> | number
  c_date?: Prisma.StringFilter<"ch_table"> | string
  c_week?: Prisma.StringFilter<"ch_table"> | string
  c_year?: Prisma.IntNullableFilter<"ch_table"> | number | null
  c_status?: Prisma.StringNullableFilter<"ch_table"> | string | null
}

export type ch_tableCreateManyNasso_usersInput = {
  c_ID?: number
  c_amount?: number
  c_date: string
  c_week: string
  c_year?: number | null
  c_status?: string | null
}

export type ch_tableUpdateWithoutNasso_usersInput = {
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ch_tableUncheckedUpdateWithoutNasso_usersInput = {
  c_ID?: Prisma.IntFieldUpdateOperationsInput | number
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ch_tableUncheckedUpdateManyWithoutNasso_usersInput = {
  c_ID?: Prisma.IntFieldUpdateOperationsInput | number
  c_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  c_date?: Prisma.StringFieldUpdateOperationsInput | string
  c_week?: Prisma.StringFieldUpdateOperationsInput | string
  c_year?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  c_status?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type ch_tableSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  c_ID?: boolean
  c_name?: boolean
  c_amount?: boolean
  c_date?: boolean
  c_week?: boolean
  c_year?: boolean
  c_status?: boolean
  nasso_users?: boolean | Prisma.nasso_usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ch_table"]>



export type ch_tableSelectScalar = {
  c_ID?: boolean
  c_name?: boolean
  c_amount?: boolean
  c_date?: boolean
  c_week?: boolean
  c_year?: boolean
  c_status?: boolean
}

export type ch_tableOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"c_ID" | "c_name" | "c_amount" | "c_date" | "c_week" | "c_year" | "c_status", ExtArgs["result"]["ch_table"]>
export type ch_tableInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  nasso_users?: boolean | Prisma.nasso_usersDefaultArgs<ExtArgs>
}

export type $ch_tablePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ch_table"
  objects: {
    nasso_users: Prisma.$nasso_usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    c_ID: number
    c_name: string
    c_amount: number
    c_date: string
    c_week: string
    c_year: number | null
    c_status: string | null
  }, ExtArgs["result"]["ch_table"]>
  composites: {}
}

export type ch_tableGetPayload<S extends boolean | null | undefined | ch_tableDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ch_tablePayload, S>

export type ch_tableCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ch_tableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Ch_tableCountAggregateInputType | true
  }

export interface ch_tableDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ch_table'], meta: { name: 'ch_table' } }
  /**
   * Find zero or one Ch_table that matches the filter.
   * @param {ch_tableFindUniqueArgs} args - Arguments to find a Ch_table
   * @example
   * // Get one Ch_table
   * const ch_table = await prisma.ch_table.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ch_tableFindUniqueArgs>(args: Prisma.SelectSubset<T, ch_tableFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ch_table that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ch_tableFindUniqueOrThrowArgs} args - Arguments to find a Ch_table
   * @example
   * // Get one Ch_table
   * const ch_table = await prisma.ch_table.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ch_tableFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ch_tableFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ch_table that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableFindFirstArgs} args - Arguments to find a Ch_table
   * @example
   * // Get one Ch_table
   * const ch_table = await prisma.ch_table.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ch_tableFindFirstArgs>(args?: Prisma.SelectSubset<T, ch_tableFindFirstArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ch_table that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableFindFirstOrThrowArgs} args - Arguments to find a Ch_table
   * @example
   * // Get one Ch_table
   * const ch_table = await prisma.ch_table.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ch_tableFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ch_tableFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ch_tables that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ch_tables
   * const ch_tables = await prisma.ch_table.findMany()
   * 
   * // Get first 10 Ch_tables
   * const ch_tables = await prisma.ch_table.findMany({ take: 10 })
   * 
   * // Only select the `c_ID`
   * const ch_tableWithC_IDOnly = await prisma.ch_table.findMany({ select: { c_ID: true } })
   * 
   */
  findMany<T extends ch_tableFindManyArgs>(args?: Prisma.SelectSubset<T, ch_tableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ch_table.
   * @param {ch_tableCreateArgs} args - Arguments to create a Ch_table.
   * @example
   * // Create one Ch_table
   * const Ch_table = await prisma.ch_table.create({
   *   data: {
   *     // ... data to create a Ch_table
   *   }
   * })
   * 
   */
  create<T extends ch_tableCreateArgs>(args: Prisma.SelectSubset<T, ch_tableCreateArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ch_tables.
   * @param {ch_tableCreateManyArgs} args - Arguments to create many Ch_tables.
   * @example
   * // Create many Ch_tables
   * const ch_table = await prisma.ch_table.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ch_tableCreateManyArgs>(args?: Prisma.SelectSubset<T, ch_tableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Ch_table.
   * @param {ch_tableDeleteArgs} args - Arguments to delete one Ch_table.
   * @example
   * // Delete one Ch_table
   * const Ch_table = await prisma.ch_table.delete({
   *   where: {
   *     // ... filter to delete one Ch_table
   *   }
   * })
   * 
   */
  delete<T extends ch_tableDeleteArgs>(args: Prisma.SelectSubset<T, ch_tableDeleteArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ch_table.
   * @param {ch_tableUpdateArgs} args - Arguments to update one Ch_table.
   * @example
   * // Update one Ch_table
   * const ch_table = await prisma.ch_table.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ch_tableUpdateArgs>(args: Prisma.SelectSubset<T, ch_tableUpdateArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ch_tables.
   * @param {ch_tableDeleteManyArgs} args - Arguments to filter Ch_tables to delete.
   * @example
   * // Delete a few Ch_tables
   * const { count } = await prisma.ch_table.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ch_tableDeleteManyArgs>(args?: Prisma.SelectSubset<T, ch_tableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ch_tables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ch_tables
   * const ch_table = await prisma.ch_table.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ch_tableUpdateManyArgs>(args: Prisma.SelectSubset<T, ch_tableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Ch_table.
   * @param {ch_tableUpsertArgs} args - Arguments to update or create a Ch_table.
   * @example
   * // Update or create a Ch_table
   * const ch_table = await prisma.ch_table.upsert({
   *   create: {
   *     // ... data to create a Ch_table
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ch_table we want to update
   *   }
   * })
   */
  upsert<T extends ch_tableUpsertArgs>(args: Prisma.SelectSubset<T, ch_tableUpsertArgs<ExtArgs>>): Prisma.Prisma__ch_tableClient<runtime.Types.Result.GetResult<Prisma.$ch_tablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ch_tables.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableCountArgs} args - Arguments to filter Ch_tables to count.
   * @example
   * // Count the number of Ch_tables
   * const count = await prisma.ch_table.count({
   *   where: {
   *     // ... the filter for the Ch_tables we want to count
   *   }
   * })
  **/
  count<T extends ch_tableCountArgs>(
    args?: Prisma.Subset<T, ch_tableCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Ch_tableCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ch_table.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Ch_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Ch_tableAggregateArgs>(args: Prisma.Subset<T, Ch_tableAggregateArgs>): Prisma.PrismaPromise<GetCh_tableAggregateType<T>>

  /**
   * Group by Ch_table.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ch_tableGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ch_tableGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ch_tableGroupByArgs['orderBy'] }
      : { orderBy?: ch_tableGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ch_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCh_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ch_table model
 */
readonly fields: ch_tableFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ch_table.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ch_tableClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  nasso_users<T extends Prisma.nasso_usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.nasso_usersDefaultArgs<ExtArgs>>): Prisma.Prisma__nasso_usersClient<runtime.Types.Result.GetResult<Prisma.$nasso_usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ch_table model
 */
export interface ch_tableFieldRefs {
  readonly c_ID: Prisma.FieldRef<"ch_table", 'Int'>
  readonly c_name: Prisma.FieldRef<"ch_table", 'String'>
  readonly c_amount: Prisma.FieldRef<"ch_table", 'Float'>
  readonly c_date: Prisma.FieldRef<"ch_table", 'String'>
  readonly c_week: Prisma.FieldRef<"ch_table", 'String'>
  readonly c_year: Prisma.FieldRef<"ch_table", 'Int'>
  readonly c_status: Prisma.FieldRef<"ch_table", 'String'>
}
    

// Custom InputTypes
/**
 * ch_table findUnique
 */
export type ch_tableFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter, which ch_table to fetch.
   */
  where: Prisma.ch_tableWhereUniqueInput
}

/**
 * ch_table findUniqueOrThrow
 */
export type ch_tableFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter, which ch_table to fetch.
   */
  where: Prisma.ch_tableWhereUniqueInput
}

/**
 * ch_table findFirst
 */
export type ch_tableFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter, which ch_table to fetch.
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ch_tables to fetch.
   */
  orderBy?: Prisma.ch_tableOrderByWithRelationInput | Prisma.ch_tableOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ch_tables.
   */
  cursor?: Prisma.ch_tableWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ch_tables from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ch_tables.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ch_tables.
   */
  distinct?: Prisma.Ch_tableScalarFieldEnum | Prisma.Ch_tableScalarFieldEnum[]
}

/**
 * ch_table findFirstOrThrow
 */
export type ch_tableFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter, which ch_table to fetch.
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ch_tables to fetch.
   */
  orderBy?: Prisma.ch_tableOrderByWithRelationInput | Prisma.ch_tableOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ch_tables.
   */
  cursor?: Prisma.ch_tableWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ch_tables from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ch_tables.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ch_tables.
   */
  distinct?: Prisma.Ch_tableScalarFieldEnum | Prisma.Ch_tableScalarFieldEnum[]
}

/**
 * ch_table findMany
 */
export type ch_tableFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter, which ch_tables to fetch.
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ch_tables to fetch.
   */
  orderBy?: Prisma.ch_tableOrderByWithRelationInput | Prisma.ch_tableOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ch_tables.
   */
  cursor?: Prisma.ch_tableWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ch_tables from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ch_tables.
   */
  skip?: number
  distinct?: Prisma.Ch_tableScalarFieldEnum | Prisma.Ch_tableScalarFieldEnum[]
}

/**
 * ch_table create
 */
export type ch_tableCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * The data needed to create a ch_table.
   */
  data: Prisma.XOR<Prisma.ch_tableCreateInput, Prisma.ch_tableUncheckedCreateInput>
}

/**
 * ch_table createMany
 */
export type ch_tableCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ch_tables.
   */
  data: Prisma.ch_tableCreateManyInput | Prisma.ch_tableCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ch_table update
 */
export type ch_tableUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * The data needed to update a ch_table.
   */
  data: Prisma.XOR<Prisma.ch_tableUpdateInput, Prisma.ch_tableUncheckedUpdateInput>
  /**
   * Choose, which ch_table to update.
   */
  where: Prisma.ch_tableWhereUniqueInput
}

/**
 * ch_table updateMany
 */
export type ch_tableUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ch_tables.
   */
  data: Prisma.XOR<Prisma.ch_tableUpdateManyMutationInput, Prisma.ch_tableUncheckedUpdateManyInput>
  /**
   * Filter which ch_tables to update
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * Limit how many ch_tables to update.
   */
  limit?: number
}

/**
 * ch_table upsert
 */
export type ch_tableUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * The filter to search for the ch_table to update in case it exists.
   */
  where: Prisma.ch_tableWhereUniqueInput
  /**
   * In case the ch_table found by the `where` argument doesn't exist, create a new ch_table with this data.
   */
  create: Prisma.XOR<Prisma.ch_tableCreateInput, Prisma.ch_tableUncheckedCreateInput>
  /**
   * In case the ch_table was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ch_tableUpdateInput, Prisma.ch_tableUncheckedUpdateInput>
}

/**
 * ch_table delete
 */
export type ch_tableDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
  /**
   * Filter which ch_table to delete.
   */
  where: Prisma.ch_tableWhereUniqueInput
}

/**
 * ch_table deleteMany
 */
export type ch_tableDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ch_tables to delete
   */
  where?: Prisma.ch_tableWhereInput
  /**
   * Limit how many ch_tables to delete.
   */
  limit?: number
}

/**
 * ch_table without action
 */
export type ch_tableDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ch_table
   */
  select?: Prisma.ch_tableSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ch_table
   */
  omit?: Prisma.ch_tableOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ch_tableInclude<ExtArgs> | null
}
