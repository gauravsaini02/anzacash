
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `notifiers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model notifiers
 * 
 */
export type notifiersModel = runtime.Types.Result.DefaultSelection<Prisma.$notifiersPayload>

export type AggregateNotifiers = {
  _count: NotifiersCountAggregateOutputType | null
  _avg: NotifiersAvgAggregateOutputType | null
  _sum: NotifiersSumAggregateOutputType | null
  _min: NotifiersMinAggregateOutputType | null
  _max: NotifiersMaxAggregateOutputType | null
}

export type NotifiersAvgAggregateOutputType = {
  notify_Id: number | null
}

export type NotifiersSumAggregateOutputType = {
  notify_Id: number | null
}

export type NotifiersMinAggregateOutputType = {
  notify_Id: number | null
  notify_token: string | null
  token_username: string | null
}

export type NotifiersMaxAggregateOutputType = {
  notify_Id: number | null
  notify_token: string | null
  token_username: string | null
}

export type NotifiersCountAggregateOutputType = {
  notify_Id: number
  notify_token: number
  token_username: number
  _all: number
}


export type NotifiersAvgAggregateInputType = {
  notify_Id?: true
}

export type NotifiersSumAggregateInputType = {
  notify_Id?: true
}

export type NotifiersMinAggregateInputType = {
  notify_Id?: true
  notify_token?: true
  token_username?: true
}

export type NotifiersMaxAggregateInputType = {
  notify_Id?: true
  notify_token?: true
  token_username?: true
}

export type NotifiersCountAggregateInputType = {
  notify_Id?: true
  notify_token?: true
  token_username?: true
  _all?: true
}

export type NotifiersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which notifiers to aggregate.
   */
  where?: Prisma.notifiersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifiers to fetch.
   */
  orderBy?: Prisma.notifiersOrderByWithRelationInput | Prisma.notifiersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.notifiersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifiers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifiers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned notifiers
  **/
  _count?: true | NotifiersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NotifiersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NotifiersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotifiersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotifiersMaxAggregateInputType
}

export type GetNotifiersAggregateType<T extends NotifiersAggregateArgs> = {
      [P in keyof T & keyof AggregateNotifiers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotifiers[P]>
    : Prisma.GetScalarType<T[P], AggregateNotifiers[P]>
}




export type notifiersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.notifiersWhereInput
  orderBy?: Prisma.notifiersOrderByWithAggregationInput | Prisma.notifiersOrderByWithAggregationInput[]
  by: Prisma.NotifiersScalarFieldEnum[] | Prisma.NotifiersScalarFieldEnum
  having?: Prisma.notifiersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotifiersCountAggregateInputType | true
  _avg?: NotifiersAvgAggregateInputType
  _sum?: NotifiersSumAggregateInputType
  _min?: NotifiersMinAggregateInputType
  _max?: NotifiersMaxAggregateInputType
}

export type NotifiersGroupByOutputType = {
  notify_Id: number
  notify_token: string
  token_username: string
  _count: NotifiersCountAggregateOutputType | null
  _avg: NotifiersAvgAggregateOutputType | null
  _sum: NotifiersSumAggregateOutputType | null
  _min: NotifiersMinAggregateOutputType | null
  _max: NotifiersMaxAggregateOutputType | null
}

type GetNotifiersGroupByPayload<T extends notifiersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotifiersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotifiersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotifiersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotifiersGroupByOutputType[P]>
      }
    >
  >



export type notifiersWhereInput = {
  AND?: Prisma.notifiersWhereInput | Prisma.notifiersWhereInput[]
  OR?: Prisma.notifiersWhereInput[]
  NOT?: Prisma.notifiersWhereInput | Prisma.notifiersWhereInput[]
  notify_Id?: Prisma.IntFilter<"notifiers"> | number
  notify_token?: Prisma.StringFilter<"notifiers"> | string
  token_username?: Prisma.StringFilter<"notifiers"> | string
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersScalarRelationFilter, Prisma.nasso_usersWhereInput>
}

export type notifiersOrderByWithRelationInput = {
  notify_Id?: Prisma.SortOrder
  notify_token?: Prisma.SortOrder
  token_username?: Prisma.SortOrder
  nasso_users?: Prisma.nasso_usersOrderByWithRelationInput
  _relevance?: Prisma.notifiersOrderByRelevanceInput
}

export type notifiersWhereUniqueInput = Prisma.AtLeast<{
  notify_Id?: number
  AND?: Prisma.notifiersWhereInput | Prisma.notifiersWhereInput[]
  OR?: Prisma.notifiersWhereInput[]
  NOT?: Prisma.notifiersWhereInput | Prisma.notifiersWhereInput[]
  notify_token?: Prisma.StringFilter<"notifiers"> | string
  token_username?: Prisma.StringFilter<"notifiers"> | string
  nasso_users?: Prisma.XOR<Prisma.Nasso_usersScalarRelationFilter, Prisma.nasso_usersWhereInput>
}, "notify_Id">

export type notifiersOrderByWithAggregationInput = {
  notify_Id?: Prisma.SortOrder
  notify_token?: Prisma.SortOrder
  token_username?: Prisma.SortOrder
  _count?: Prisma.notifiersCountOrderByAggregateInput
  _avg?: Prisma.notifiersAvgOrderByAggregateInput
  _max?: Prisma.notifiersMaxOrderByAggregateInput
  _min?: Prisma.notifiersMinOrderByAggregateInput
  _sum?: Prisma.notifiersSumOrderByAggregateInput
}

export type notifiersScalarWhereWithAggregatesInput = {
  AND?: Prisma.notifiersScalarWhereWithAggregatesInput | Prisma.notifiersScalarWhereWithAggregatesInput[]
  OR?: Prisma.notifiersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.notifiersScalarWhereWithAggregatesInput | Prisma.notifiersScalarWhereWithAggregatesInput[]
  notify_Id?: Prisma.IntWithAggregatesFilter<"notifiers"> | number
  notify_token?: Prisma.StringWithAggregatesFilter<"notifiers"> | string
  token_username?: Prisma.StringWithAggregatesFilter<"notifiers"> | string
}

export type notifiersCreateInput = {
  notify_token: string
  nasso_users: Prisma.nasso_usersCreateNestedOneWithoutNotifiersInput
}

export type notifiersUncheckedCreateInput = {
  notify_Id?: number
  notify_token: string
  token_username: string
}

export type notifiersUpdateInput = {
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
  nasso_users?: Prisma.nasso_usersUpdateOneRequiredWithoutNotifiersNestedInput
}

export type notifiersUncheckedUpdateInput = {
  notify_Id?: Prisma.IntFieldUpdateOperationsInput | number
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_username?: Prisma.StringFieldUpdateOperationsInput | string
}

export type notifiersCreateManyInput = {
  notify_Id?: number
  notify_token: string
  token_username: string
}

export type notifiersUpdateManyMutationInput = {
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
}

export type notifiersUncheckedUpdateManyInput = {
  notify_Id?: Prisma.IntFieldUpdateOperationsInput | number
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
  token_username?: Prisma.StringFieldUpdateOperationsInput | string
}

export type NotifiersListRelationFilter = {
  every?: Prisma.notifiersWhereInput
  some?: Prisma.notifiersWhereInput
  none?: Prisma.notifiersWhereInput
}

export type notifiersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type notifiersOrderByRelevanceInput = {
  fields: Prisma.notifiersOrderByRelevanceFieldEnum | Prisma.notifiersOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type notifiersCountOrderByAggregateInput = {
  notify_Id?: Prisma.SortOrder
  notify_token?: Prisma.SortOrder
  token_username?: Prisma.SortOrder
}

export type notifiersAvgOrderByAggregateInput = {
  notify_Id?: Prisma.SortOrder
}

export type notifiersMaxOrderByAggregateInput = {
  notify_Id?: Prisma.SortOrder
  notify_token?: Prisma.SortOrder
  token_username?: Prisma.SortOrder
}

export type notifiersMinOrderByAggregateInput = {
  notify_Id?: Prisma.SortOrder
  notify_token?: Prisma.SortOrder
  token_username?: Prisma.SortOrder
}

export type notifiersSumOrderByAggregateInput = {
  notify_Id?: Prisma.SortOrder
}

export type notifiersCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput> | Prisma.notifiersCreateWithoutNasso_usersInput[] | Prisma.notifiersUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.notifiersCreateOrConnectWithoutNasso_usersInput | Prisma.notifiersCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.notifiersCreateManyNasso_usersInputEnvelope
  connect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
}

export type notifiersUncheckedCreateNestedManyWithoutNasso_usersInput = {
  create?: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput> | Prisma.notifiersCreateWithoutNasso_usersInput[] | Prisma.notifiersUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.notifiersCreateOrConnectWithoutNasso_usersInput | Prisma.notifiersCreateOrConnectWithoutNasso_usersInput[]
  createMany?: Prisma.notifiersCreateManyNasso_usersInputEnvelope
  connect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
}

export type notifiersUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput> | Prisma.notifiersCreateWithoutNasso_usersInput[] | Prisma.notifiersUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.notifiersCreateOrConnectWithoutNasso_usersInput | Prisma.notifiersCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.notifiersUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.notifiersUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.notifiersCreateManyNasso_usersInputEnvelope
  set?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  disconnect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  delete?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  connect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  update?: Prisma.notifiersUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.notifiersUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.notifiersUpdateManyWithWhereWithoutNasso_usersInput | Prisma.notifiersUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.notifiersScalarWhereInput | Prisma.notifiersScalarWhereInput[]
}

export type notifiersUncheckedUpdateManyWithoutNasso_usersNestedInput = {
  create?: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput> | Prisma.notifiersCreateWithoutNasso_usersInput[] | Prisma.notifiersUncheckedCreateWithoutNasso_usersInput[]
  connectOrCreate?: Prisma.notifiersCreateOrConnectWithoutNasso_usersInput | Prisma.notifiersCreateOrConnectWithoutNasso_usersInput[]
  upsert?: Prisma.notifiersUpsertWithWhereUniqueWithoutNasso_usersInput | Prisma.notifiersUpsertWithWhereUniqueWithoutNasso_usersInput[]
  createMany?: Prisma.notifiersCreateManyNasso_usersInputEnvelope
  set?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  disconnect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  delete?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  connect?: Prisma.notifiersWhereUniqueInput | Prisma.notifiersWhereUniqueInput[]
  update?: Prisma.notifiersUpdateWithWhereUniqueWithoutNasso_usersInput | Prisma.notifiersUpdateWithWhereUniqueWithoutNasso_usersInput[]
  updateMany?: Prisma.notifiersUpdateManyWithWhereWithoutNasso_usersInput | Prisma.notifiersUpdateManyWithWhereWithoutNasso_usersInput[]
  deleteMany?: Prisma.notifiersScalarWhereInput | Prisma.notifiersScalarWhereInput[]
}

export type notifiersCreateWithoutNasso_usersInput = {
  notify_token: string
}

export type notifiersUncheckedCreateWithoutNasso_usersInput = {
  notify_Id?: number
  notify_token: string
}

export type notifiersCreateOrConnectWithoutNasso_usersInput = {
  where: Prisma.notifiersWhereUniqueInput
  create: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput>
}

export type notifiersCreateManyNasso_usersInputEnvelope = {
  data: Prisma.notifiersCreateManyNasso_usersInput | Prisma.notifiersCreateManyNasso_usersInput[]
  skipDuplicates?: boolean
}

export type notifiersUpsertWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.notifiersWhereUniqueInput
  update: Prisma.XOR<Prisma.notifiersUpdateWithoutNasso_usersInput, Prisma.notifiersUncheckedUpdateWithoutNasso_usersInput>
  create: Prisma.XOR<Prisma.notifiersCreateWithoutNasso_usersInput, Prisma.notifiersUncheckedCreateWithoutNasso_usersInput>
}

export type notifiersUpdateWithWhereUniqueWithoutNasso_usersInput = {
  where: Prisma.notifiersWhereUniqueInput
  data: Prisma.XOR<Prisma.notifiersUpdateWithoutNasso_usersInput, Prisma.notifiersUncheckedUpdateWithoutNasso_usersInput>
}

export type notifiersUpdateManyWithWhereWithoutNasso_usersInput = {
  where: Prisma.notifiersScalarWhereInput
  data: Prisma.XOR<Prisma.notifiersUpdateManyMutationInput, Prisma.notifiersUncheckedUpdateManyWithoutNasso_usersInput>
}

export type notifiersScalarWhereInput = {
  AND?: Prisma.notifiersScalarWhereInput | Prisma.notifiersScalarWhereInput[]
  OR?: Prisma.notifiersScalarWhereInput[]
  NOT?: Prisma.notifiersScalarWhereInput | Prisma.notifiersScalarWhereInput[]
  notify_Id?: Prisma.IntFilter<"notifiers"> | number
  notify_token?: Prisma.StringFilter<"notifiers"> | string
  token_username?: Prisma.StringFilter<"notifiers"> | string
}

export type notifiersCreateManyNasso_usersInput = {
  notify_Id?: number
  notify_token: string
}

export type notifiersUpdateWithoutNasso_usersInput = {
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
}

export type notifiersUncheckedUpdateWithoutNasso_usersInput = {
  notify_Id?: Prisma.IntFieldUpdateOperationsInput | number
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
}

export type notifiersUncheckedUpdateManyWithoutNasso_usersInput = {
  notify_Id?: Prisma.IntFieldUpdateOperationsInput | number
  notify_token?: Prisma.StringFieldUpdateOperationsInput | string
}



export type notifiersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  notify_Id?: boolean
  notify_token?: boolean
  token_username?: boolean
  nasso_users?: boolean | Prisma.nasso_usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["notifiers"]>



export type notifiersSelectScalar = {
  notify_Id?: boolean
  notify_token?: boolean
  token_username?: boolean
}

export type notifiersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"notify_Id" | "notify_token" | "token_username", ExtArgs["result"]["notifiers"]>
export type notifiersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  nasso_users?: boolean | Prisma.nasso_usersDefaultArgs<ExtArgs>
}

export type $notifiersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "notifiers"
  objects: {
    nasso_users: Prisma.$nasso_usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    notify_Id: number
    notify_token: string
    token_username: string
  }, ExtArgs["result"]["notifiers"]>
  composites: {}
}

export type notifiersGetPayload<S extends boolean | null | undefined | notifiersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$notifiersPayload, S>

export type notifiersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<notifiersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotifiersCountAggregateInputType | true
  }

export interface notifiersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifiers'], meta: { name: 'notifiers' } }
  /**
   * Find zero or one Notifiers that matches the filter.
   * @param {notifiersFindUniqueArgs} args - Arguments to find a Notifiers
   * @example
   * // Get one Notifiers
   * const notifiers = await prisma.notifiers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends notifiersFindUniqueArgs>(args: Prisma.SelectSubset<T, notifiersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Notifiers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {notifiersFindUniqueOrThrowArgs} args - Arguments to find a Notifiers
   * @example
   * // Get one Notifiers
   * const notifiers = await prisma.notifiers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends notifiersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, notifiersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notifiers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersFindFirstArgs} args - Arguments to find a Notifiers
   * @example
   * // Get one Notifiers
   * const notifiers = await prisma.notifiers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends notifiersFindFirstArgs>(args?: Prisma.SelectSubset<T, notifiersFindFirstArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Notifiers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersFindFirstOrThrowArgs} args - Arguments to find a Notifiers
   * @example
   * // Get one Notifiers
   * const notifiers = await prisma.notifiers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends notifiersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, notifiersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notifiers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notifiers
   * const notifiers = await prisma.notifiers.findMany()
   * 
   * // Get first 10 Notifiers
   * const notifiers = await prisma.notifiers.findMany({ take: 10 })
   * 
   * // Only select the `notify_Id`
   * const notifiersWithNotify_IdOnly = await prisma.notifiers.findMany({ select: { notify_Id: true } })
   * 
   */
  findMany<T extends notifiersFindManyArgs>(args?: Prisma.SelectSubset<T, notifiersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Notifiers.
   * @param {notifiersCreateArgs} args - Arguments to create a Notifiers.
   * @example
   * // Create one Notifiers
   * const Notifiers = await prisma.notifiers.create({
   *   data: {
   *     // ... data to create a Notifiers
   *   }
   * })
   * 
   */
  create<T extends notifiersCreateArgs>(args: Prisma.SelectSubset<T, notifiersCreateArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Notifiers.
   * @param {notifiersCreateManyArgs} args - Arguments to create many Notifiers.
   * @example
   * // Create many Notifiers
   * const notifiers = await prisma.notifiers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends notifiersCreateManyArgs>(args?: Prisma.SelectSubset<T, notifiersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Notifiers.
   * @param {notifiersDeleteArgs} args - Arguments to delete one Notifiers.
   * @example
   * // Delete one Notifiers
   * const Notifiers = await prisma.notifiers.delete({
   *   where: {
   *     // ... filter to delete one Notifiers
   *   }
   * })
   * 
   */
  delete<T extends notifiersDeleteArgs>(args: Prisma.SelectSubset<T, notifiersDeleteArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Notifiers.
   * @param {notifiersUpdateArgs} args - Arguments to update one Notifiers.
   * @example
   * // Update one Notifiers
   * const notifiers = await prisma.notifiers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends notifiersUpdateArgs>(args: Prisma.SelectSubset<T, notifiersUpdateArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Notifiers.
   * @param {notifiersDeleteManyArgs} args - Arguments to filter Notifiers to delete.
   * @example
   * // Delete a few Notifiers
   * const { count } = await prisma.notifiers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends notifiersDeleteManyArgs>(args?: Prisma.SelectSubset<T, notifiersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notifiers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notifiers
   * const notifiers = await prisma.notifiers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends notifiersUpdateManyArgs>(args: Prisma.SelectSubset<T, notifiersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Notifiers.
   * @param {notifiersUpsertArgs} args - Arguments to update or create a Notifiers.
   * @example
   * // Update or create a Notifiers
   * const notifiers = await prisma.notifiers.upsert({
   *   create: {
   *     // ... data to create a Notifiers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Notifiers we want to update
   *   }
   * })
   */
  upsert<T extends notifiersUpsertArgs>(args: Prisma.SelectSubset<T, notifiersUpsertArgs<ExtArgs>>): Prisma.Prisma__notifiersClient<runtime.Types.Result.GetResult<Prisma.$notifiersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Notifiers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersCountArgs} args - Arguments to filter Notifiers to count.
   * @example
   * // Count the number of Notifiers
   * const count = await prisma.notifiers.count({
   *   where: {
   *     // ... the filter for the Notifiers we want to count
   *   }
   * })
  **/
  count<T extends notifiersCountArgs>(
    args?: Prisma.Subset<T, notifiersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotifiersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Notifiers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotifiersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotifiersAggregateArgs>(args: Prisma.Subset<T, NotifiersAggregateArgs>): Prisma.PrismaPromise<GetNotifiersAggregateType<T>>

  /**
   * Group by Notifiers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {notifiersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends notifiersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: notifiersGroupByArgs['orderBy'] }
      : { orderBy?: notifiersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, notifiersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotifiersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the notifiers model
 */
readonly fields: notifiersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for notifiers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__notifiersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  nasso_users<T extends Prisma.nasso_usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.nasso_usersDefaultArgs<ExtArgs>>): Prisma.Prisma__nasso_usersClient<runtime.Types.Result.GetResult<Prisma.$nasso_usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the notifiers model
 */
export interface notifiersFieldRefs {
  readonly notify_Id: Prisma.FieldRef<"notifiers", 'Int'>
  readonly notify_token: Prisma.FieldRef<"notifiers", 'String'>
  readonly token_username: Prisma.FieldRef<"notifiers", 'String'>
}
    

// Custom InputTypes
/**
 * notifiers findUnique
 */
export type notifiersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter, which notifiers to fetch.
   */
  where: Prisma.notifiersWhereUniqueInput
}

/**
 * notifiers findUniqueOrThrow
 */
export type notifiersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter, which notifiers to fetch.
   */
  where: Prisma.notifiersWhereUniqueInput
}

/**
 * notifiers findFirst
 */
export type notifiersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter, which notifiers to fetch.
   */
  where?: Prisma.notifiersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifiers to fetch.
   */
  orderBy?: Prisma.notifiersOrderByWithRelationInput | Prisma.notifiersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for notifiers.
   */
  cursor?: Prisma.notifiersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifiers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifiers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of notifiers.
   */
  distinct?: Prisma.NotifiersScalarFieldEnum | Prisma.NotifiersScalarFieldEnum[]
}

/**
 * notifiers findFirstOrThrow
 */
export type notifiersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter, which notifiers to fetch.
   */
  where?: Prisma.notifiersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifiers to fetch.
   */
  orderBy?: Prisma.notifiersOrderByWithRelationInput | Prisma.notifiersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for notifiers.
   */
  cursor?: Prisma.notifiersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifiers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifiers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of notifiers.
   */
  distinct?: Prisma.NotifiersScalarFieldEnum | Prisma.NotifiersScalarFieldEnum[]
}

/**
 * notifiers findMany
 */
export type notifiersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter, which notifiers to fetch.
   */
  where?: Prisma.notifiersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of notifiers to fetch.
   */
  orderBy?: Prisma.notifiersOrderByWithRelationInput | Prisma.notifiersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing notifiers.
   */
  cursor?: Prisma.notifiersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` notifiers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` notifiers.
   */
  skip?: number
  distinct?: Prisma.NotifiersScalarFieldEnum | Prisma.NotifiersScalarFieldEnum[]
}

/**
 * notifiers create
 */
export type notifiersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * The data needed to create a notifiers.
   */
  data: Prisma.XOR<Prisma.notifiersCreateInput, Prisma.notifiersUncheckedCreateInput>
}

/**
 * notifiers createMany
 */
export type notifiersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many notifiers.
   */
  data: Prisma.notifiersCreateManyInput | Prisma.notifiersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * notifiers update
 */
export type notifiersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * The data needed to update a notifiers.
   */
  data: Prisma.XOR<Prisma.notifiersUpdateInput, Prisma.notifiersUncheckedUpdateInput>
  /**
   * Choose, which notifiers to update.
   */
  where: Prisma.notifiersWhereUniqueInput
}

/**
 * notifiers updateMany
 */
export type notifiersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update notifiers.
   */
  data: Prisma.XOR<Prisma.notifiersUpdateManyMutationInput, Prisma.notifiersUncheckedUpdateManyInput>
  /**
   * Filter which notifiers to update
   */
  where?: Prisma.notifiersWhereInput
  /**
   * Limit how many notifiers to update.
   */
  limit?: number
}

/**
 * notifiers upsert
 */
export type notifiersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * The filter to search for the notifiers to update in case it exists.
   */
  where: Prisma.notifiersWhereUniqueInput
  /**
   * In case the notifiers found by the `where` argument doesn't exist, create a new notifiers with this data.
   */
  create: Prisma.XOR<Prisma.notifiersCreateInput, Prisma.notifiersUncheckedCreateInput>
  /**
   * In case the notifiers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.notifiersUpdateInput, Prisma.notifiersUncheckedUpdateInput>
}

/**
 * notifiers delete
 */
export type notifiersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
  /**
   * Filter which notifiers to delete.
   */
  where: Prisma.notifiersWhereUniqueInput
}

/**
 * notifiers deleteMany
 */
export type notifiersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which notifiers to delete
   */
  where?: Prisma.notifiersWhereInput
  /**
   * Limit how many notifiers to delete.
   */
  limit?: number
}

/**
 * notifiers without action
 */
export type notifiersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the notifiers
   */
  select?: Prisma.notifiersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the notifiers
   */
  omit?: Prisma.notifiersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.notifiersInclude<ExtArgs> | null
}
