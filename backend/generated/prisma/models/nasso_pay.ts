
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `nasso_pay` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model nasso_pay
 * 
 */
export type nasso_payModel = runtime.Types.Result.DefaultSelection<Prisma.$nasso_payPayload>

export type AggregateNasso_pay = {
  _count: Nasso_payCountAggregateOutputType | null
  _avg: Nasso_payAvgAggregateOutputType | null
  _sum: Nasso_paySumAggregateOutputType | null
  _min: Nasso_payMinAggregateOutputType | null
  _max: Nasso_payMaxAggregateOutputType | null
}

export type Nasso_payAvgAggregateOutputType = {
  py_Id: number | null
  py_amount: number | null
  amnt_receive: number | null
  amnt_fee: number | null
}

export type Nasso_paySumAggregateOutputType = {
  py_Id: number | null
  py_amount: number | null
  amnt_receive: number | null
  amnt_fee: number | null
}

export type Nasso_payMinAggregateOutputType = {
  py_Id: number | null
  py_usr: string | null
  py_phone: string | null
  py_email: string | null
  py_type: string | null
  py_amount: number | null
  py_status: string | null
  py_admin: string | null
  req_date: string | null
  pay_date: string | null
  amnt_receive: number | null
  amnt_fee: number | null
}

export type Nasso_payMaxAggregateOutputType = {
  py_Id: number | null
  py_usr: string | null
  py_phone: string | null
  py_email: string | null
  py_type: string | null
  py_amount: number | null
  py_status: string | null
  py_admin: string | null
  req_date: string | null
  pay_date: string | null
  amnt_receive: number | null
  amnt_fee: number | null
}

export type Nasso_payCountAggregateOutputType = {
  py_Id: number
  py_usr: number
  py_phone: number
  py_email: number
  py_type: number
  py_amount: number
  py_status: number
  py_admin: number
  req_date: number
  pay_date: number
  amnt_receive: number
  amnt_fee: number
  _all: number
}


export type Nasso_payAvgAggregateInputType = {
  py_Id?: true
  py_amount?: true
  amnt_receive?: true
  amnt_fee?: true
}

export type Nasso_paySumAggregateInputType = {
  py_Id?: true
  py_amount?: true
  amnt_receive?: true
  amnt_fee?: true
}

export type Nasso_payMinAggregateInputType = {
  py_Id?: true
  py_usr?: true
  py_phone?: true
  py_email?: true
  py_type?: true
  py_amount?: true
  py_status?: true
  py_admin?: true
  req_date?: true
  pay_date?: true
  amnt_receive?: true
  amnt_fee?: true
}

export type Nasso_payMaxAggregateInputType = {
  py_Id?: true
  py_usr?: true
  py_phone?: true
  py_email?: true
  py_type?: true
  py_amount?: true
  py_status?: true
  py_admin?: true
  req_date?: true
  pay_date?: true
  amnt_receive?: true
  amnt_fee?: true
}

export type Nasso_payCountAggregateInputType = {
  py_Id?: true
  py_usr?: true
  py_phone?: true
  py_email?: true
  py_type?: true
  py_amount?: true
  py_status?: true
  py_admin?: true
  req_date?: true
  pay_date?: true
  amnt_receive?: true
  amnt_fee?: true
  _all?: true
}

export type Nasso_payAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_pay to aggregate.
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_pays to fetch.
   */
  orderBy?: Prisma.nasso_payOrderByWithRelationInput | Prisma.nasso_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.nasso_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned nasso_pays
  **/
  _count?: true | Nasso_payCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Nasso_payAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Nasso_paySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Nasso_payMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Nasso_payMaxAggregateInputType
}

export type GetNasso_payAggregateType<T extends Nasso_payAggregateArgs> = {
      [P in keyof T & keyof AggregateNasso_pay]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNasso_pay[P]>
    : Prisma.GetScalarType<T[P], AggregateNasso_pay[P]>
}




export type nasso_payGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.nasso_payWhereInput
  orderBy?: Prisma.nasso_payOrderByWithAggregationInput | Prisma.nasso_payOrderByWithAggregationInput[]
  by: Prisma.Nasso_payScalarFieldEnum[] | Prisma.Nasso_payScalarFieldEnum
  having?: Prisma.nasso_payScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Nasso_payCountAggregateInputType | true
  _avg?: Nasso_payAvgAggregateInputType
  _sum?: Nasso_paySumAggregateInputType
  _min?: Nasso_payMinAggregateInputType
  _max?: Nasso_payMaxAggregateInputType
}

export type Nasso_payGroupByOutputType = {
  py_Id: number
  py_usr: string | null
  py_phone: string
  py_email: string
  py_type: string
  py_amount: number
  py_status: string
  py_admin: string | null
  req_date: string
  pay_date: string | null
  amnt_receive: number | null
  amnt_fee: number | null
  _count: Nasso_payCountAggregateOutputType | null
  _avg: Nasso_payAvgAggregateOutputType | null
  _sum: Nasso_paySumAggregateOutputType | null
  _min: Nasso_payMinAggregateOutputType | null
  _max: Nasso_payMaxAggregateOutputType | null
}

type GetNasso_payGroupByPayload<T extends nasso_payGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Nasso_payGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Nasso_payGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Nasso_payGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Nasso_payGroupByOutputType[P]>
      }
    >
  >



export type nasso_payWhereInput = {
  AND?: Prisma.nasso_payWhereInput | Prisma.nasso_payWhereInput[]
  OR?: Prisma.nasso_payWhereInput[]
  NOT?: Prisma.nasso_payWhereInput | Prisma.nasso_payWhereInput[]
  py_Id?: Prisma.IntFilter<"nasso_pay"> | number
  py_usr?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  py_phone?: Prisma.StringFilter<"nasso_pay"> | string
  py_email?: Prisma.StringFilter<"nasso_pay"> | string
  py_type?: Prisma.StringFilter<"nasso_pay"> | string
  py_amount?: Prisma.FloatFilter<"nasso_pay"> | number
  py_status?: Prisma.StringFilter<"nasso_pay"> | string
  py_admin?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  req_date?: Prisma.StringFilter<"nasso_pay"> | string
  pay_date?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  amnt_receive?: Prisma.FloatNullableFilter<"nasso_pay"> | number | null
  amnt_fee?: Prisma.FloatNullableFilter<"nasso_pay"> | number | null
}

export type nasso_payOrderByWithRelationInput = {
  py_Id?: Prisma.SortOrder
  py_usr?: Prisma.SortOrderInput | Prisma.SortOrder
  py_phone?: Prisma.SortOrder
  py_email?: Prisma.SortOrder
  py_type?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  py_status?: Prisma.SortOrder
  py_admin?: Prisma.SortOrderInput | Prisma.SortOrder
  req_date?: Prisma.SortOrder
  pay_date?: Prisma.SortOrderInput | Prisma.SortOrder
  amnt_receive?: Prisma.SortOrderInput | Prisma.SortOrder
  amnt_fee?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.nasso_payOrderByRelevanceInput
}

export type nasso_payWhereUniqueInput = Prisma.AtLeast<{
  py_Id?: number
  AND?: Prisma.nasso_payWhereInput | Prisma.nasso_payWhereInput[]
  OR?: Prisma.nasso_payWhereInput[]
  NOT?: Prisma.nasso_payWhereInput | Prisma.nasso_payWhereInput[]
  py_usr?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  py_phone?: Prisma.StringFilter<"nasso_pay"> | string
  py_email?: Prisma.StringFilter<"nasso_pay"> | string
  py_type?: Prisma.StringFilter<"nasso_pay"> | string
  py_amount?: Prisma.FloatFilter<"nasso_pay"> | number
  py_status?: Prisma.StringFilter<"nasso_pay"> | string
  py_admin?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  req_date?: Prisma.StringFilter<"nasso_pay"> | string
  pay_date?: Prisma.StringNullableFilter<"nasso_pay"> | string | null
  amnt_receive?: Prisma.FloatNullableFilter<"nasso_pay"> | number | null
  amnt_fee?: Prisma.FloatNullableFilter<"nasso_pay"> | number | null
}, "py_Id">

export type nasso_payOrderByWithAggregationInput = {
  py_Id?: Prisma.SortOrder
  py_usr?: Prisma.SortOrderInput | Prisma.SortOrder
  py_phone?: Prisma.SortOrder
  py_email?: Prisma.SortOrder
  py_type?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  py_status?: Prisma.SortOrder
  py_admin?: Prisma.SortOrderInput | Prisma.SortOrder
  req_date?: Prisma.SortOrder
  pay_date?: Prisma.SortOrderInput | Prisma.SortOrder
  amnt_receive?: Prisma.SortOrderInput | Prisma.SortOrder
  amnt_fee?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.nasso_payCountOrderByAggregateInput
  _avg?: Prisma.nasso_payAvgOrderByAggregateInput
  _max?: Prisma.nasso_payMaxOrderByAggregateInput
  _min?: Prisma.nasso_payMinOrderByAggregateInput
  _sum?: Prisma.nasso_paySumOrderByAggregateInput
}

export type nasso_payScalarWhereWithAggregatesInput = {
  AND?: Prisma.nasso_payScalarWhereWithAggregatesInput | Prisma.nasso_payScalarWhereWithAggregatesInput[]
  OR?: Prisma.nasso_payScalarWhereWithAggregatesInput[]
  NOT?: Prisma.nasso_payScalarWhereWithAggregatesInput | Prisma.nasso_payScalarWhereWithAggregatesInput[]
  py_Id?: Prisma.IntWithAggregatesFilter<"nasso_pay"> | number
  py_usr?: Prisma.StringNullableWithAggregatesFilter<"nasso_pay"> | string | null
  py_phone?: Prisma.StringWithAggregatesFilter<"nasso_pay"> | string
  py_email?: Prisma.StringWithAggregatesFilter<"nasso_pay"> | string
  py_type?: Prisma.StringWithAggregatesFilter<"nasso_pay"> | string
  py_amount?: Prisma.FloatWithAggregatesFilter<"nasso_pay"> | number
  py_status?: Prisma.StringWithAggregatesFilter<"nasso_pay"> | string
  py_admin?: Prisma.StringNullableWithAggregatesFilter<"nasso_pay"> | string | null
  req_date?: Prisma.StringWithAggregatesFilter<"nasso_pay"> | string
  pay_date?: Prisma.StringNullableWithAggregatesFilter<"nasso_pay"> | string | null
  amnt_receive?: Prisma.FloatNullableWithAggregatesFilter<"nasso_pay"> | number | null
  amnt_fee?: Prisma.FloatNullableWithAggregatesFilter<"nasso_pay"> | number | null
}

export type nasso_payCreateInput = {
  py_usr?: string | null
  py_phone?: string
  py_email?: string
  py_type?: string
  py_amount?: number
  py_status?: string
  py_admin?: string | null
  req_date?: string
  pay_date?: string | null
  amnt_receive?: number | null
  amnt_fee?: number | null
}

export type nasso_payUncheckedCreateInput = {
  py_Id?: number
  py_usr?: string | null
  py_phone?: string
  py_email?: string
  py_type?: string
  py_amount?: number
  py_status?: string
  py_admin?: string | null
  req_date?: string
  pay_date?: string | null
  amnt_receive?: number | null
  amnt_fee?: number | null
}

export type nasso_payUpdateInput = {
  py_usr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  py_phone?: Prisma.StringFieldUpdateOperationsInput | string
  py_email?: Prisma.StringFieldUpdateOperationsInput | string
  py_type?: Prisma.StringFieldUpdateOperationsInput | string
  py_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  py_status?: Prisma.StringFieldUpdateOperationsInput | string
  py_admin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  req_date?: Prisma.StringFieldUpdateOperationsInput | string
  pay_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amnt_receive?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  amnt_fee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type nasso_payUncheckedUpdateInput = {
  py_Id?: Prisma.IntFieldUpdateOperationsInput | number
  py_usr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  py_phone?: Prisma.StringFieldUpdateOperationsInput | string
  py_email?: Prisma.StringFieldUpdateOperationsInput | string
  py_type?: Prisma.StringFieldUpdateOperationsInput | string
  py_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  py_status?: Prisma.StringFieldUpdateOperationsInput | string
  py_admin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  req_date?: Prisma.StringFieldUpdateOperationsInput | string
  pay_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amnt_receive?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  amnt_fee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type nasso_payCreateManyInput = {
  py_Id?: number
  py_usr?: string | null
  py_phone?: string
  py_email?: string
  py_type?: string
  py_amount?: number
  py_status?: string
  py_admin?: string | null
  req_date?: string
  pay_date?: string | null
  amnt_receive?: number | null
  amnt_fee?: number | null
}

export type nasso_payUpdateManyMutationInput = {
  py_usr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  py_phone?: Prisma.StringFieldUpdateOperationsInput | string
  py_email?: Prisma.StringFieldUpdateOperationsInput | string
  py_type?: Prisma.StringFieldUpdateOperationsInput | string
  py_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  py_status?: Prisma.StringFieldUpdateOperationsInput | string
  py_admin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  req_date?: Prisma.StringFieldUpdateOperationsInput | string
  pay_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amnt_receive?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  amnt_fee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type nasso_payUncheckedUpdateManyInput = {
  py_Id?: Prisma.IntFieldUpdateOperationsInput | number
  py_usr?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  py_phone?: Prisma.StringFieldUpdateOperationsInput | string
  py_email?: Prisma.StringFieldUpdateOperationsInput | string
  py_type?: Prisma.StringFieldUpdateOperationsInput | string
  py_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  py_status?: Prisma.StringFieldUpdateOperationsInput | string
  py_admin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  req_date?: Prisma.StringFieldUpdateOperationsInput | string
  pay_date?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amnt_receive?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  amnt_fee?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type nasso_payOrderByRelevanceInput = {
  fields: Prisma.nasso_payOrderByRelevanceFieldEnum | Prisma.nasso_payOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type nasso_payCountOrderByAggregateInput = {
  py_Id?: Prisma.SortOrder
  py_usr?: Prisma.SortOrder
  py_phone?: Prisma.SortOrder
  py_email?: Prisma.SortOrder
  py_type?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  py_status?: Prisma.SortOrder
  py_admin?: Prisma.SortOrder
  req_date?: Prisma.SortOrder
  pay_date?: Prisma.SortOrder
  amnt_receive?: Prisma.SortOrder
  amnt_fee?: Prisma.SortOrder
}

export type nasso_payAvgOrderByAggregateInput = {
  py_Id?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  amnt_receive?: Prisma.SortOrder
  amnt_fee?: Prisma.SortOrder
}

export type nasso_payMaxOrderByAggregateInput = {
  py_Id?: Prisma.SortOrder
  py_usr?: Prisma.SortOrder
  py_phone?: Prisma.SortOrder
  py_email?: Prisma.SortOrder
  py_type?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  py_status?: Prisma.SortOrder
  py_admin?: Prisma.SortOrder
  req_date?: Prisma.SortOrder
  pay_date?: Prisma.SortOrder
  amnt_receive?: Prisma.SortOrder
  amnt_fee?: Prisma.SortOrder
}

export type nasso_payMinOrderByAggregateInput = {
  py_Id?: Prisma.SortOrder
  py_usr?: Prisma.SortOrder
  py_phone?: Prisma.SortOrder
  py_email?: Prisma.SortOrder
  py_type?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  py_status?: Prisma.SortOrder
  py_admin?: Prisma.SortOrder
  req_date?: Prisma.SortOrder
  pay_date?: Prisma.SortOrder
  amnt_receive?: Prisma.SortOrder
  amnt_fee?: Prisma.SortOrder
}

export type nasso_paySumOrderByAggregateInput = {
  py_Id?: Prisma.SortOrder
  py_amount?: Prisma.SortOrder
  amnt_receive?: Prisma.SortOrder
  amnt_fee?: Prisma.SortOrder
}



export type nasso_paySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  py_Id?: boolean
  py_usr?: boolean
  py_phone?: boolean
  py_email?: boolean
  py_type?: boolean
  py_amount?: boolean
  py_status?: boolean
  py_admin?: boolean
  req_date?: boolean
  pay_date?: boolean
  amnt_receive?: boolean
  amnt_fee?: boolean
}, ExtArgs["result"]["nasso_pay"]>



export type nasso_paySelectScalar = {
  py_Id?: boolean
  py_usr?: boolean
  py_phone?: boolean
  py_email?: boolean
  py_type?: boolean
  py_amount?: boolean
  py_status?: boolean
  py_admin?: boolean
  req_date?: boolean
  pay_date?: boolean
  amnt_receive?: boolean
  amnt_fee?: boolean
}

export type nasso_payOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"py_Id" | "py_usr" | "py_phone" | "py_email" | "py_type" | "py_amount" | "py_status" | "py_admin" | "req_date" | "pay_date" | "amnt_receive" | "amnt_fee", ExtArgs["result"]["nasso_pay"]>

export type $nasso_payPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "nasso_pay"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    py_Id: number
    py_usr: string | null
    py_phone: string
    py_email: string
    py_type: string
    py_amount: number
    py_status: string
    py_admin: string | null
    req_date: string
    pay_date: string | null
    amnt_receive: number | null
    amnt_fee: number | null
  }, ExtArgs["result"]["nasso_pay"]>
  composites: {}
}

export type nasso_payGetPayload<S extends boolean | null | undefined | nasso_payDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$nasso_payPayload, S>

export type nasso_payCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<nasso_payFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Nasso_payCountAggregateInputType | true
  }

export interface nasso_payDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nasso_pay'], meta: { name: 'nasso_pay' } }
  /**
   * Find zero or one Nasso_pay that matches the filter.
   * @param {nasso_payFindUniqueArgs} args - Arguments to find a Nasso_pay
   * @example
   * // Get one Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends nasso_payFindUniqueArgs>(args: Prisma.SelectSubset<T, nasso_payFindUniqueArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Nasso_pay that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {nasso_payFindUniqueOrThrowArgs} args - Arguments to find a Nasso_pay
   * @example
   * // Get one Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends nasso_payFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, nasso_payFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_pay that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payFindFirstArgs} args - Arguments to find a Nasso_pay
   * @example
   * // Get one Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends nasso_payFindFirstArgs>(args?: Prisma.SelectSubset<T, nasso_payFindFirstArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nasso_pay that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payFindFirstOrThrowArgs} args - Arguments to find a Nasso_pay
   * @example
   * // Get one Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends nasso_payFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, nasso_payFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Nasso_pays that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Nasso_pays
   * const nasso_pays = await prisma.nasso_pay.findMany()
   * 
   * // Get first 10 Nasso_pays
   * const nasso_pays = await prisma.nasso_pay.findMany({ take: 10 })
   * 
   * // Only select the `py_Id`
   * const nasso_payWithPy_IdOnly = await prisma.nasso_pay.findMany({ select: { py_Id: true } })
   * 
   */
  findMany<T extends nasso_payFindManyArgs>(args?: Prisma.SelectSubset<T, nasso_payFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Nasso_pay.
   * @param {nasso_payCreateArgs} args - Arguments to create a Nasso_pay.
   * @example
   * // Create one Nasso_pay
   * const Nasso_pay = await prisma.nasso_pay.create({
   *   data: {
   *     // ... data to create a Nasso_pay
   *   }
   * })
   * 
   */
  create<T extends nasso_payCreateArgs>(args: Prisma.SelectSubset<T, nasso_payCreateArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Nasso_pays.
   * @param {nasso_payCreateManyArgs} args - Arguments to create many Nasso_pays.
   * @example
   * // Create many Nasso_pays
   * const nasso_pay = await prisma.nasso_pay.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends nasso_payCreateManyArgs>(args?: Prisma.SelectSubset<T, nasso_payCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Nasso_pay.
   * @param {nasso_payDeleteArgs} args - Arguments to delete one Nasso_pay.
   * @example
   * // Delete one Nasso_pay
   * const Nasso_pay = await prisma.nasso_pay.delete({
   *   where: {
   *     // ... filter to delete one Nasso_pay
   *   }
   * })
   * 
   */
  delete<T extends nasso_payDeleteArgs>(args: Prisma.SelectSubset<T, nasso_payDeleteArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Nasso_pay.
   * @param {nasso_payUpdateArgs} args - Arguments to update one Nasso_pay.
   * @example
   * // Update one Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends nasso_payUpdateArgs>(args: Prisma.SelectSubset<T, nasso_payUpdateArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Nasso_pays.
   * @param {nasso_payDeleteManyArgs} args - Arguments to filter Nasso_pays to delete.
   * @example
   * // Delete a few Nasso_pays
   * const { count } = await prisma.nasso_pay.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends nasso_payDeleteManyArgs>(args?: Prisma.SelectSubset<T, nasso_payDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Nasso_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Nasso_pays
   * const nasso_pay = await prisma.nasso_pay.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends nasso_payUpdateManyArgs>(args: Prisma.SelectSubset<T, nasso_payUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Nasso_pay.
   * @param {nasso_payUpsertArgs} args - Arguments to update or create a Nasso_pay.
   * @example
   * // Update or create a Nasso_pay
   * const nasso_pay = await prisma.nasso_pay.upsert({
   *   create: {
   *     // ... data to create a Nasso_pay
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Nasso_pay we want to update
   *   }
   * })
   */
  upsert<T extends nasso_payUpsertArgs>(args: Prisma.SelectSubset<T, nasso_payUpsertArgs<ExtArgs>>): Prisma.Prisma__nasso_payClient<runtime.Types.Result.GetResult<Prisma.$nasso_payPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Nasso_pays.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payCountArgs} args - Arguments to filter Nasso_pays to count.
   * @example
   * // Count the number of Nasso_pays
   * const count = await prisma.nasso_pay.count({
   *   where: {
   *     // ... the filter for the Nasso_pays we want to count
   *   }
   * })
  **/
  count<T extends nasso_payCountArgs>(
    args?: Prisma.Subset<T, nasso_payCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Nasso_payCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Nasso_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Nasso_payAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Nasso_payAggregateArgs>(args: Prisma.Subset<T, Nasso_payAggregateArgs>): Prisma.PrismaPromise<GetNasso_payAggregateType<T>>

  /**
   * Group by Nasso_pay.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {nasso_payGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends nasso_payGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: nasso_payGroupByArgs['orderBy'] }
      : { orderBy?: nasso_payGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, nasso_payGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNasso_payGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the nasso_pay model
 */
readonly fields: nasso_payFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for nasso_pay.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__nasso_payClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the nasso_pay model
 */
export interface nasso_payFieldRefs {
  readonly py_Id: Prisma.FieldRef<"nasso_pay", 'Int'>
  readonly py_usr: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly py_phone: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly py_email: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly py_type: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly py_amount: Prisma.FieldRef<"nasso_pay", 'Float'>
  readonly py_status: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly py_admin: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly req_date: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly pay_date: Prisma.FieldRef<"nasso_pay", 'String'>
  readonly amnt_receive: Prisma.FieldRef<"nasso_pay", 'Float'>
  readonly amnt_fee: Prisma.FieldRef<"nasso_pay", 'Float'>
}
    

// Custom InputTypes
/**
 * nasso_pay findUnique
 */
export type nasso_payFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter, which nasso_pay to fetch.
   */
  where: Prisma.nasso_payWhereUniqueInput
}

/**
 * nasso_pay findUniqueOrThrow
 */
export type nasso_payFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter, which nasso_pay to fetch.
   */
  where: Prisma.nasso_payWhereUniqueInput
}

/**
 * nasso_pay findFirst
 */
export type nasso_payFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter, which nasso_pay to fetch.
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_pays to fetch.
   */
  orderBy?: Prisma.nasso_payOrderByWithRelationInput | Prisma.nasso_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_pays.
   */
  cursor?: Prisma.nasso_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_pays.
   */
  distinct?: Prisma.Nasso_payScalarFieldEnum | Prisma.Nasso_payScalarFieldEnum[]
}

/**
 * nasso_pay findFirstOrThrow
 */
export type nasso_payFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter, which nasso_pay to fetch.
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_pays to fetch.
   */
  orderBy?: Prisma.nasso_payOrderByWithRelationInput | Prisma.nasso_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for nasso_pays.
   */
  cursor?: Prisma.nasso_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_pays.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of nasso_pays.
   */
  distinct?: Prisma.Nasso_payScalarFieldEnum | Prisma.Nasso_payScalarFieldEnum[]
}

/**
 * nasso_pay findMany
 */
export type nasso_payFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter, which nasso_pays to fetch.
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of nasso_pays to fetch.
   */
  orderBy?: Prisma.nasso_payOrderByWithRelationInput | Prisma.nasso_payOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing nasso_pays.
   */
  cursor?: Prisma.nasso_payWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` nasso_pays from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` nasso_pays.
   */
  skip?: number
  distinct?: Prisma.Nasso_payScalarFieldEnum | Prisma.Nasso_payScalarFieldEnum[]
}

/**
 * nasso_pay create
 */
export type nasso_payCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * The data needed to create a nasso_pay.
   */
  data?: Prisma.XOR<Prisma.nasso_payCreateInput, Prisma.nasso_payUncheckedCreateInput>
}

/**
 * nasso_pay createMany
 */
export type nasso_payCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many nasso_pays.
   */
  data: Prisma.nasso_payCreateManyInput | Prisma.nasso_payCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * nasso_pay update
 */
export type nasso_payUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * The data needed to update a nasso_pay.
   */
  data: Prisma.XOR<Prisma.nasso_payUpdateInput, Prisma.nasso_payUncheckedUpdateInput>
  /**
   * Choose, which nasso_pay to update.
   */
  where: Prisma.nasso_payWhereUniqueInput
}

/**
 * nasso_pay updateMany
 */
export type nasso_payUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update nasso_pays.
   */
  data: Prisma.XOR<Prisma.nasso_payUpdateManyMutationInput, Prisma.nasso_payUncheckedUpdateManyInput>
  /**
   * Filter which nasso_pays to update
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * Limit how many nasso_pays to update.
   */
  limit?: number
}

/**
 * nasso_pay upsert
 */
export type nasso_payUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * The filter to search for the nasso_pay to update in case it exists.
   */
  where: Prisma.nasso_payWhereUniqueInput
  /**
   * In case the nasso_pay found by the `where` argument doesn't exist, create a new nasso_pay with this data.
   */
  create: Prisma.XOR<Prisma.nasso_payCreateInput, Prisma.nasso_payUncheckedCreateInput>
  /**
   * In case the nasso_pay was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.nasso_payUpdateInput, Prisma.nasso_payUncheckedUpdateInput>
}

/**
 * nasso_pay delete
 */
export type nasso_payDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
  /**
   * Filter which nasso_pay to delete.
   */
  where: Prisma.nasso_payWhereUniqueInput
}

/**
 * nasso_pay deleteMany
 */
export type nasso_payDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which nasso_pays to delete
   */
  where?: Prisma.nasso_payWhereInput
  /**
   * Limit how many nasso_pays to delete.
   */
  limit?: number
}

/**
 * nasso_pay without action
 */
export type nasso_payDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the nasso_pay
   */
  select?: Prisma.nasso_paySelect<ExtArgs> | null
  /**
   * Omit specific fields from the nasso_pay
   */
  omit?: Prisma.nasso_payOmit<ExtArgs> | null
}
