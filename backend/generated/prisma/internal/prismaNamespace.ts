
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  ads_check: 'ads_check',
  ch_table: 'ch_table',
  cus_link: 'cus_link',
  login_noti: 'login_noti',
  nasso_accounts: 'nasso_accounts',
  nasso_answer: 'nasso_answer',
  nasso_logs: 'nasso_logs',
  nasso_pay: 'nasso_pay',
  nasso_qns: 'nasso_qns',
  nasso_quiz: 'nasso_quiz',
  nasso_users: 'nasso_users',
  notifiers: 'notifiers',
  pro_photo: 'pro_photo',
  referal: 'referal',
  salary_pay: 'salary_pay',
  tbl_cashes: 'tbl_cashes',
  tbl_category: 'tbl_category',
  tbl_exchange: 'tbl_exchange',
  tbl_games: 'tbl_games',
  tbl_jifunze: 'tbl_jifunze',
  tbl_karibu: 'tbl_karibu',
  tbl_loan: 'tbl_loan',
  tbl_notify: 'tbl_notify',
  tbl_payments: 'tbl_payments',
  tbl_paymethod: 'tbl_paymethod',
  tbl_products: 'tbl_products',
  tbl_rates: 'tbl_rates',
  tbl_seller: 'tbl_seller',
  tbl_sh_orders: 'tbl_sh_orders',
  tbl_status: 'tbl_status',
  tbl_video: 'tbl_video',
  tbl_video_pay: 'tbl_video_pay',
  tknes_nasso: 'tknes_nasso',
  uza_answers: 'uza_answers',
  uza_status: 'uza_status'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "ads_check" | "ch_table" | "cus_link" | "login_noti" | "nasso_accounts" | "nasso_answer" | "nasso_logs" | "nasso_pay" | "nasso_qns" | "nasso_quiz" | "nasso_users" | "notifiers" | "pro_photo" | "referal" | "salary_pay" | "tbl_cashes" | "tbl_category" | "tbl_exchange" | "tbl_games" | "tbl_jifunze" | "tbl_karibu" | "tbl_loan" | "tbl_notify" | "tbl_payments" | "tbl_paymethod" | "tbl_products" | "tbl_rates" | "tbl_seller" | "tbl_sh_orders" | "tbl_status" | "tbl_video" | "tbl_video_pay" | "tknes_nasso" | "uza_answers" | "uza_status"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    ads_check: {
      payload: Prisma.$ads_checkPayload<ExtArgs>
      fields: Prisma.ads_checkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ads_checkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ads_checkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        findFirst: {
          args: Prisma.ads_checkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ads_checkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        findMany: {
          args: Prisma.ads_checkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>[]
        }
        create: {
          args: Prisma.ads_checkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        createMany: {
          args: Prisma.ads_checkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ads_checkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        update: {
          args: Prisma.ads_checkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        deleteMany: {
          args: Prisma.ads_checkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ads_checkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ads_checkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ads_checkPayload>
        }
        aggregate: {
          args: Prisma.Ads_checkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAds_check>
        }
        groupBy: {
          args: Prisma.ads_checkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ads_checkGroupByOutputType>[]
        }
        count: {
          args: Prisma.ads_checkCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ads_checkCountAggregateOutputType> | number
        }
      }
    }
    ch_table: {
      payload: Prisma.$ch_tablePayload<ExtArgs>
      fields: Prisma.ch_tableFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ch_tableFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ch_tableFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        findFirst: {
          args: Prisma.ch_tableFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ch_tableFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        findMany: {
          args: Prisma.ch_tableFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>[]
        }
        create: {
          args: Prisma.ch_tableCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        createMany: {
          args: Prisma.ch_tableCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ch_tableDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        update: {
          args: Prisma.ch_tableUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        deleteMany: {
          args: Prisma.ch_tableDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ch_tableUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ch_tableUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ch_tablePayload>
        }
        aggregate: {
          args: Prisma.Ch_tableAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCh_table>
        }
        groupBy: {
          args: Prisma.ch_tableGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ch_tableGroupByOutputType>[]
        }
        count: {
          args: Prisma.ch_tableCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ch_tableCountAggregateOutputType> | number
        }
      }
    }
    cus_link: {
      payload: Prisma.$cus_linkPayload<ExtArgs>
      fields: Prisma.cus_linkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cus_linkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cus_linkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        findFirst: {
          args: Prisma.cus_linkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cus_linkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        findMany: {
          args: Prisma.cus_linkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>[]
        }
        create: {
          args: Prisma.cus_linkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        createMany: {
          args: Prisma.cus_linkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.cus_linkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        update: {
          args: Prisma.cus_linkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        deleteMany: {
          args: Prisma.cus_linkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cus_linkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.cus_linkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cus_linkPayload>
        }
        aggregate: {
          args: Prisma.Cus_linkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCus_link>
        }
        groupBy: {
          args: Prisma.cus_linkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cus_linkGroupByOutputType>[]
        }
        count: {
          args: Prisma.cus_linkCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cus_linkCountAggregateOutputType> | number
        }
      }
    }
    login_noti: {
      payload: Prisma.$login_notiPayload<ExtArgs>
      fields: Prisma.login_notiFieldRefs
      operations: {
        findUnique: {
          args: Prisma.login_notiFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.login_notiFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        findFirst: {
          args: Prisma.login_notiFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.login_notiFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        findMany: {
          args: Prisma.login_notiFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>[]
        }
        create: {
          args: Prisma.login_notiCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        createMany: {
          args: Prisma.login_notiCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.login_notiDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        update: {
          args: Prisma.login_notiUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        deleteMany: {
          args: Prisma.login_notiDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.login_notiUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.login_notiUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$login_notiPayload>
        }
        aggregate: {
          args: Prisma.Login_notiAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLogin_noti>
        }
        groupBy: {
          args: Prisma.login_notiGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Login_notiGroupByOutputType>[]
        }
        count: {
          args: Prisma.login_notiCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Login_notiCountAggregateOutputType> | number
        }
      }
    }
    nasso_accounts: {
      payload: Prisma.$nasso_accountsPayload<ExtArgs>
      fields: Prisma.nasso_accountsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_accountsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_accountsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        findFirst: {
          args: Prisma.nasso_accountsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_accountsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        findMany: {
          args: Prisma.nasso_accountsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>[]
        }
        create: {
          args: Prisma.nasso_accountsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        createMany: {
          args: Prisma.nasso_accountsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_accountsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        update: {
          args: Prisma.nasso_accountsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        deleteMany: {
          args: Prisma.nasso_accountsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_accountsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_accountsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_accountsPayload>
        }
        aggregate: {
          args: Prisma.Nasso_accountsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_accounts>
        }
        groupBy: {
          args: Prisma.nasso_accountsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_accountsGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_accountsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_accountsCountAggregateOutputType> | number
        }
      }
    }
    nasso_answer: {
      payload: Prisma.$nasso_answerPayload<ExtArgs>
      fields: Prisma.nasso_answerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_answerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_answerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        findFirst: {
          args: Prisma.nasso_answerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_answerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        findMany: {
          args: Prisma.nasso_answerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>[]
        }
        create: {
          args: Prisma.nasso_answerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        createMany: {
          args: Prisma.nasso_answerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_answerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        update: {
          args: Prisma.nasso_answerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        deleteMany: {
          args: Prisma.nasso_answerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_answerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_answerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_answerPayload>
        }
        aggregate: {
          args: Prisma.Nasso_answerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_answer>
        }
        groupBy: {
          args: Prisma.nasso_answerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_answerGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_answerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_answerCountAggregateOutputType> | number
        }
      }
    }
    nasso_logs: {
      payload: Prisma.$nasso_logsPayload<ExtArgs>
      fields: Prisma.nasso_logsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_logsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_logsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        findFirst: {
          args: Prisma.nasso_logsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_logsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        findMany: {
          args: Prisma.nasso_logsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>[]
        }
        create: {
          args: Prisma.nasso_logsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        createMany: {
          args: Prisma.nasso_logsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_logsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        update: {
          args: Prisma.nasso_logsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        deleteMany: {
          args: Prisma.nasso_logsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_logsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_logsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_logsPayload>
        }
        aggregate: {
          args: Prisma.Nasso_logsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_logs>
        }
        groupBy: {
          args: Prisma.nasso_logsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_logsGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_logsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_logsCountAggregateOutputType> | number
        }
      }
    }
    nasso_pay: {
      payload: Prisma.$nasso_payPayload<ExtArgs>
      fields: Prisma.nasso_payFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_payFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_payFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        findFirst: {
          args: Prisma.nasso_payFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_payFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        findMany: {
          args: Prisma.nasso_payFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>[]
        }
        create: {
          args: Prisma.nasso_payCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        createMany: {
          args: Prisma.nasso_payCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_payDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        update: {
          args: Prisma.nasso_payUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        deleteMany: {
          args: Prisma.nasso_payDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_payUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_payUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_payPayload>
        }
        aggregate: {
          args: Prisma.Nasso_payAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_pay>
        }
        groupBy: {
          args: Prisma.nasso_payGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_payGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_payCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_payCountAggregateOutputType> | number
        }
      }
    }
    nasso_qns: {
      payload: Prisma.$nasso_qnsPayload<ExtArgs>
      fields: Prisma.nasso_qnsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_qnsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_qnsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        findFirst: {
          args: Prisma.nasso_qnsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_qnsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        findMany: {
          args: Prisma.nasso_qnsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>[]
        }
        create: {
          args: Prisma.nasso_qnsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        createMany: {
          args: Prisma.nasso_qnsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_qnsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        update: {
          args: Prisma.nasso_qnsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        deleteMany: {
          args: Prisma.nasso_qnsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_qnsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_qnsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_qnsPayload>
        }
        aggregate: {
          args: Prisma.Nasso_qnsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_qns>
        }
        groupBy: {
          args: Prisma.nasso_qnsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_qnsGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_qnsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_qnsCountAggregateOutputType> | number
        }
      }
    }
    nasso_quiz: {
      payload: Prisma.$nasso_quizPayload<ExtArgs>
      fields: Prisma.nasso_quizFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_quizFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_quizFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        findFirst: {
          args: Prisma.nasso_quizFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_quizFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        findMany: {
          args: Prisma.nasso_quizFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>[]
        }
        create: {
          args: Prisma.nasso_quizCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        createMany: {
          args: Prisma.nasso_quizCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_quizDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        update: {
          args: Prisma.nasso_quizUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        deleteMany: {
          args: Prisma.nasso_quizDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_quizUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_quizUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_quizPayload>
        }
        aggregate: {
          args: Prisma.Nasso_quizAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_quiz>
        }
        groupBy: {
          args: Prisma.nasso_quizGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_quizGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_quizCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_quizCountAggregateOutputType> | number
        }
      }
    }
    nasso_users: {
      payload: Prisma.$nasso_usersPayload<ExtArgs>
      fields: Prisma.nasso_usersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.nasso_usersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.nasso_usersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        findFirst: {
          args: Prisma.nasso_usersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.nasso_usersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        findMany: {
          args: Prisma.nasso_usersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>[]
        }
        create: {
          args: Prisma.nasso_usersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        createMany: {
          args: Prisma.nasso_usersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.nasso_usersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        update: {
          args: Prisma.nasso_usersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        deleteMany: {
          args: Prisma.nasso_usersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.nasso_usersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.nasso_usersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$nasso_usersPayload>
        }
        aggregate: {
          args: Prisma.Nasso_usersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNasso_users>
        }
        groupBy: {
          args: Prisma.nasso_usersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_usersGroupByOutputType>[]
        }
        count: {
          args: Prisma.nasso_usersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Nasso_usersCountAggregateOutputType> | number
        }
      }
    }
    notifiers: {
      payload: Prisma.$notifiersPayload<ExtArgs>
      fields: Prisma.notifiersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.notifiersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.notifiersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        findFirst: {
          args: Prisma.notifiersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.notifiersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        findMany: {
          args: Prisma.notifiersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>[]
        }
        create: {
          args: Prisma.notifiersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        createMany: {
          args: Prisma.notifiersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.notifiersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        update: {
          args: Prisma.notifiersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        deleteMany: {
          args: Prisma.notifiersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.notifiersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.notifiersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$notifiersPayload>
        }
        aggregate: {
          args: Prisma.NotifiersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotifiers>
        }
        groupBy: {
          args: Prisma.notifiersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotifiersGroupByOutputType>[]
        }
        count: {
          args: Prisma.notifiersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotifiersCountAggregateOutputType> | number
        }
      }
    }
    pro_photo: {
      payload: Prisma.$pro_photoPayload<ExtArgs>
      fields: Prisma.pro_photoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.pro_photoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.pro_photoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        findFirst: {
          args: Prisma.pro_photoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.pro_photoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        findMany: {
          args: Prisma.pro_photoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>[]
        }
        create: {
          args: Prisma.pro_photoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        createMany: {
          args: Prisma.pro_photoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.pro_photoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        update: {
          args: Prisma.pro_photoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        deleteMany: {
          args: Prisma.pro_photoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.pro_photoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.pro_photoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$pro_photoPayload>
        }
        aggregate: {
          args: Prisma.Pro_photoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePro_photo>
        }
        groupBy: {
          args: Prisma.pro_photoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pro_photoGroupByOutputType>[]
        }
        count: {
          args: Prisma.pro_photoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Pro_photoCountAggregateOutputType> | number
        }
      }
    }
    referal: {
      payload: Prisma.$referalPayload<ExtArgs>
      fields: Prisma.referalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.referalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.referalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        findFirst: {
          args: Prisma.referalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.referalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        findMany: {
          args: Prisma.referalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>[]
        }
        create: {
          args: Prisma.referalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        createMany: {
          args: Prisma.referalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.referalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        update: {
          args: Prisma.referalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        deleteMany: {
          args: Prisma.referalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.referalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.referalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$referalPayload>
        }
        aggregate: {
          args: Prisma.ReferalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReferal>
        }
        groupBy: {
          args: Prisma.referalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReferalGroupByOutputType>[]
        }
        count: {
          args: Prisma.referalCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReferalCountAggregateOutputType> | number
        }
      }
    }
    salary_pay: {
      payload: Prisma.$salary_payPayload<ExtArgs>
      fields: Prisma.salary_payFieldRefs
      operations: {
        findUnique: {
          args: Prisma.salary_payFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.salary_payFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        findFirst: {
          args: Prisma.salary_payFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.salary_payFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        findMany: {
          args: Prisma.salary_payFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>[]
        }
        create: {
          args: Prisma.salary_payCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        createMany: {
          args: Prisma.salary_payCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.salary_payDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        update: {
          args: Prisma.salary_payUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        deleteMany: {
          args: Prisma.salary_payDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.salary_payUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.salary_payUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$salary_payPayload>
        }
        aggregate: {
          args: Prisma.Salary_payAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSalary_pay>
        }
        groupBy: {
          args: Prisma.salary_payGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Salary_payGroupByOutputType>[]
        }
        count: {
          args: Prisma.salary_payCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Salary_payCountAggregateOutputType> | number
        }
      }
    }
    tbl_cashes: {
      payload: Prisma.$tbl_cashesPayload<ExtArgs>
      fields: Prisma.tbl_cashesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_cashesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_cashesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        findFirst: {
          args: Prisma.tbl_cashesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_cashesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        findMany: {
          args: Prisma.tbl_cashesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>[]
        }
        create: {
          args: Prisma.tbl_cashesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        createMany: {
          args: Prisma.tbl_cashesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_cashesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        update: {
          args: Prisma.tbl_cashesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        deleteMany: {
          args: Prisma.tbl_cashesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_cashesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_cashesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_cashesPayload>
        }
        aggregate: {
          args: Prisma.Tbl_cashesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_cashes>
        }
        groupBy: {
          args: Prisma.tbl_cashesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_cashesGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_cashesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_cashesCountAggregateOutputType> | number
        }
      }
    }
    tbl_category: {
      payload: Prisma.$tbl_categoryPayload<ExtArgs>
      fields: Prisma.tbl_categoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_categoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_categoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        findFirst: {
          args: Prisma.tbl_categoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_categoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        findMany: {
          args: Prisma.tbl_categoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>[]
        }
        create: {
          args: Prisma.tbl_categoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        createMany: {
          args: Prisma.tbl_categoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_categoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        update: {
          args: Prisma.tbl_categoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        deleteMany: {
          args: Prisma.tbl_categoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_categoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_categoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_categoryPayload>
        }
        aggregate: {
          args: Prisma.Tbl_categoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_category>
        }
        groupBy: {
          args: Prisma.tbl_categoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_categoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_categoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_categoryCountAggregateOutputType> | number
        }
      }
    }
    tbl_exchange: {
      payload: Prisma.$tbl_exchangePayload<ExtArgs>
      fields: Prisma.tbl_exchangeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_exchangeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_exchangeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        findFirst: {
          args: Prisma.tbl_exchangeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_exchangeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        findMany: {
          args: Prisma.tbl_exchangeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>[]
        }
        create: {
          args: Prisma.tbl_exchangeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        createMany: {
          args: Prisma.tbl_exchangeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_exchangeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        update: {
          args: Prisma.tbl_exchangeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        deleteMany: {
          args: Prisma.tbl_exchangeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_exchangeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_exchangeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_exchangePayload>
        }
        aggregate: {
          args: Prisma.Tbl_exchangeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_exchange>
        }
        groupBy: {
          args: Prisma.tbl_exchangeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_exchangeGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_exchangeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_exchangeCountAggregateOutputType> | number
        }
      }
    }
    tbl_games: {
      payload: Prisma.$tbl_gamesPayload<ExtArgs>
      fields: Prisma.tbl_gamesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_gamesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_gamesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        findFirst: {
          args: Prisma.tbl_gamesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_gamesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        findMany: {
          args: Prisma.tbl_gamesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>[]
        }
        create: {
          args: Prisma.tbl_gamesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        createMany: {
          args: Prisma.tbl_gamesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_gamesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        update: {
          args: Prisma.tbl_gamesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        deleteMany: {
          args: Prisma.tbl_gamesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_gamesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_gamesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_gamesPayload>
        }
        aggregate: {
          args: Prisma.Tbl_gamesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_games>
        }
        groupBy: {
          args: Prisma.tbl_gamesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_gamesGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_gamesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_gamesCountAggregateOutputType> | number
        }
      }
    }
    tbl_jifunze: {
      payload: Prisma.$tbl_jifunzePayload<ExtArgs>
      fields: Prisma.tbl_jifunzeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_jifunzeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_jifunzeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        findFirst: {
          args: Prisma.tbl_jifunzeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_jifunzeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        findMany: {
          args: Prisma.tbl_jifunzeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>[]
        }
        create: {
          args: Prisma.tbl_jifunzeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        createMany: {
          args: Prisma.tbl_jifunzeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_jifunzeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        update: {
          args: Prisma.tbl_jifunzeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        deleteMany: {
          args: Prisma.tbl_jifunzeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_jifunzeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_jifunzeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_jifunzePayload>
        }
        aggregate: {
          args: Prisma.Tbl_jifunzeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_jifunze>
        }
        groupBy: {
          args: Prisma.tbl_jifunzeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_jifunzeGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_jifunzeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_jifunzeCountAggregateOutputType> | number
        }
      }
    }
    tbl_karibu: {
      payload: Prisma.$tbl_karibuPayload<ExtArgs>
      fields: Prisma.tbl_karibuFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_karibuFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_karibuFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        findFirst: {
          args: Prisma.tbl_karibuFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_karibuFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        findMany: {
          args: Prisma.tbl_karibuFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>[]
        }
        create: {
          args: Prisma.tbl_karibuCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        createMany: {
          args: Prisma.tbl_karibuCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_karibuDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        update: {
          args: Prisma.tbl_karibuUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        deleteMany: {
          args: Prisma.tbl_karibuDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_karibuUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_karibuUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_karibuPayload>
        }
        aggregate: {
          args: Prisma.Tbl_karibuAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_karibu>
        }
        groupBy: {
          args: Prisma.tbl_karibuGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_karibuGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_karibuCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_karibuCountAggregateOutputType> | number
        }
      }
    }
    tbl_loan: {
      payload: Prisma.$tbl_loanPayload<ExtArgs>
      fields: Prisma.tbl_loanFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_loanFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_loanFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        findFirst: {
          args: Prisma.tbl_loanFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_loanFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        findMany: {
          args: Prisma.tbl_loanFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>[]
        }
        create: {
          args: Prisma.tbl_loanCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        createMany: {
          args: Prisma.tbl_loanCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_loanDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        update: {
          args: Prisma.tbl_loanUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        deleteMany: {
          args: Prisma.tbl_loanDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_loanUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_loanUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_loanPayload>
        }
        aggregate: {
          args: Prisma.Tbl_loanAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_loan>
        }
        groupBy: {
          args: Prisma.tbl_loanGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_loanGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_loanCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_loanCountAggregateOutputType> | number
        }
      }
    }
    tbl_notify: {
      payload: Prisma.$tbl_notifyPayload<ExtArgs>
      fields: Prisma.tbl_notifyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_notifyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_notifyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        findFirst: {
          args: Prisma.tbl_notifyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_notifyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        findMany: {
          args: Prisma.tbl_notifyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>[]
        }
        create: {
          args: Prisma.tbl_notifyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        createMany: {
          args: Prisma.tbl_notifyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_notifyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        update: {
          args: Prisma.tbl_notifyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        deleteMany: {
          args: Prisma.tbl_notifyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_notifyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_notifyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_notifyPayload>
        }
        aggregate: {
          args: Prisma.Tbl_notifyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_notify>
        }
        groupBy: {
          args: Prisma.tbl_notifyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_notifyGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_notifyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_notifyCountAggregateOutputType> | number
        }
      }
    }
    tbl_payments: {
      payload: Prisma.$tbl_paymentsPayload<ExtArgs>
      fields: Prisma.tbl_paymentsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_paymentsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_paymentsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        findFirst: {
          args: Prisma.tbl_paymentsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_paymentsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        findMany: {
          args: Prisma.tbl_paymentsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>[]
        }
        create: {
          args: Prisma.tbl_paymentsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        createMany: {
          args: Prisma.tbl_paymentsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_paymentsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        update: {
          args: Prisma.tbl_paymentsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        deleteMany: {
          args: Prisma.tbl_paymentsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_paymentsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_paymentsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymentsPayload>
        }
        aggregate: {
          args: Prisma.Tbl_paymentsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_payments>
        }
        groupBy: {
          args: Prisma.tbl_paymentsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_paymentsGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_paymentsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_paymentsCountAggregateOutputType> | number
        }
      }
    }
    tbl_paymethod: {
      payload: Prisma.$tbl_paymethodPayload<ExtArgs>
      fields: Prisma.tbl_paymethodFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_paymethodFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_paymethodFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        findFirst: {
          args: Prisma.tbl_paymethodFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_paymethodFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        findMany: {
          args: Prisma.tbl_paymethodFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>[]
        }
        create: {
          args: Prisma.tbl_paymethodCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        createMany: {
          args: Prisma.tbl_paymethodCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_paymethodDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        update: {
          args: Prisma.tbl_paymethodUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        deleteMany: {
          args: Prisma.tbl_paymethodDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_paymethodUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_paymethodUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_paymethodPayload>
        }
        aggregate: {
          args: Prisma.Tbl_paymethodAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_paymethod>
        }
        groupBy: {
          args: Prisma.tbl_paymethodGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_paymethodGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_paymethodCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_paymethodCountAggregateOutputType> | number
        }
      }
    }
    tbl_products: {
      payload: Prisma.$tbl_productsPayload<ExtArgs>
      fields: Prisma.tbl_productsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_productsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_productsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        findFirst: {
          args: Prisma.tbl_productsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_productsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        findMany: {
          args: Prisma.tbl_productsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>[]
        }
        create: {
          args: Prisma.tbl_productsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        createMany: {
          args: Prisma.tbl_productsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_productsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        update: {
          args: Prisma.tbl_productsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        deleteMany: {
          args: Prisma.tbl_productsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_productsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_productsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_productsPayload>
        }
        aggregate: {
          args: Prisma.Tbl_productsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_products>
        }
        groupBy: {
          args: Prisma.tbl_productsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_productsGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_productsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_productsCountAggregateOutputType> | number
        }
      }
    }
    tbl_rates: {
      payload: Prisma.$tbl_ratesPayload<ExtArgs>
      fields: Prisma.tbl_ratesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_ratesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_ratesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        findFirst: {
          args: Prisma.tbl_ratesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_ratesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        findMany: {
          args: Prisma.tbl_ratesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>[]
        }
        create: {
          args: Prisma.tbl_ratesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        createMany: {
          args: Prisma.tbl_ratesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_ratesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        update: {
          args: Prisma.tbl_ratesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        deleteMany: {
          args: Prisma.tbl_ratesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_ratesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_ratesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_ratesPayload>
        }
        aggregate: {
          args: Prisma.Tbl_ratesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_rates>
        }
        groupBy: {
          args: Prisma.tbl_ratesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_ratesGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_ratesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_ratesCountAggregateOutputType> | number
        }
      }
    }
    tbl_seller: {
      payload: Prisma.$tbl_sellerPayload<ExtArgs>
      fields: Prisma.tbl_sellerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_sellerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_sellerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        findFirst: {
          args: Prisma.tbl_sellerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_sellerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        findMany: {
          args: Prisma.tbl_sellerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>[]
        }
        create: {
          args: Prisma.tbl_sellerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        createMany: {
          args: Prisma.tbl_sellerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_sellerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        update: {
          args: Prisma.tbl_sellerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        deleteMany: {
          args: Prisma.tbl_sellerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_sellerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_sellerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sellerPayload>
        }
        aggregate: {
          args: Prisma.Tbl_sellerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_seller>
        }
        groupBy: {
          args: Prisma.tbl_sellerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_sellerGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_sellerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_sellerCountAggregateOutputType> | number
        }
      }
    }
    tbl_sh_orders: {
      payload: Prisma.$tbl_sh_ordersPayload<ExtArgs>
      fields: Prisma.tbl_sh_ordersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_sh_ordersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_sh_ordersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        findFirst: {
          args: Prisma.tbl_sh_ordersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_sh_ordersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        findMany: {
          args: Prisma.tbl_sh_ordersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>[]
        }
        create: {
          args: Prisma.tbl_sh_ordersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        createMany: {
          args: Prisma.tbl_sh_ordersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_sh_ordersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        update: {
          args: Prisma.tbl_sh_ordersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        deleteMany: {
          args: Prisma.tbl_sh_ordersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_sh_ordersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_sh_ordersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_sh_ordersPayload>
        }
        aggregate: {
          args: Prisma.Tbl_sh_ordersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_sh_orders>
        }
        groupBy: {
          args: Prisma.tbl_sh_ordersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_sh_ordersGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_sh_ordersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_sh_ordersCountAggregateOutputType> | number
        }
      }
    }
    tbl_status: {
      payload: Prisma.$tbl_statusPayload<ExtArgs>
      fields: Prisma.tbl_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        findFirst: {
          args: Prisma.tbl_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        findMany: {
          args: Prisma.tbl_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>[]
        }
        create: {
          args: Prisma.tbl_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        createMany: {
          args: Prisma.tbl_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        update: {
          args: Prisma.tbl_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        deleteMany: {
          args: Prisma.tbl_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_statusPayload>
        }
        aggregate: {
          args: Prisma.Tbl_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_status>
        }
        groupBy: {
          args: Prisma.tbl_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_statusCountAggregateOutputType> | number
        }
      }
    }
    tbl_video: {
      payload: Prisma.$tbl_videoPayload<ExtArgs>
      fields: Prisma.tbl_videoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_videoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_videoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        findFirst: {
          args: Prisma.tbl_videoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_videoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        findMany: {
          args: Prisma.tbl_videoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>[]
        }
        create: {
          args: Prisma.tbl_videoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        createMany: {
          args: Prisma.tbl_videoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_videoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        update: {
          args: Prisma.tbl_videoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        deleteMany: {
          args: Prisma.tbl_videoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_videoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_videoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_videoPayload>
        }
        aggregate: {
          args: Prisma.Tbl_videoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_video>
        }
        groupBy: {
          args: Prisma.tbl_videoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_videoGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_videoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_videoCountAggregateOutputType> | number
        }
      }
    }
    tbl_video_pay: {
      payload: Prisma.$tbl_video_payPayload<ExtArgs>
      fields: Prisma.tbl_video_payFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tbl_video_payFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tbl_video_payFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        findFirst: {
          args: Prisma.tbl_video_payFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tbl_video_payFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        findMany: {
          args: Prisma.tbl_video_payFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>[]
        }
        create: {
          args: Prisma.tbl_video_payCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        createMany: {
          args: Prisma.tbl_video_payCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tbl_video_payDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        update: {
          args: Prisma.tbl_video_payUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        deleteMany: {
          args: Prisma.tbl_video_payDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tbl_video_payUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tbl_video_payUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tbl_video_payPayload>
        }
        aggregate: {
          args: Prisma.Tbl_video_payAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTbl_video_pay>
        }
        groupBy: {
          args: Prisma.tbl_video_payGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_video_payGroupByOutputType>[]
        }
        count: {
          args: Prisma.tbl_video_payCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tbl_video_payCountAggregateOutputType> | number
        }
      }
    }
    tknes_nasso: {
      payload: Prisma.$tknes_nassoPayload<ExtArgs>
      fields: Prisma.tknes_nassoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.tknes_nassoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.tknes_nassoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        findFirst: {
          args: Prisma.tknes_nassoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.tknes_nassoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        findMany: {
          args: Prisma.tknes_nassoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>[]
        }
        create: {
          args: Prisma.tknes_nassoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        createMany: {
          args: Prisma.tknes_nassoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.tknes_nassoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        update: {
          args: Prisma.tknes_nassoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        deleteMany: {
          args: Prisma.tknes_nassoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.tknes_nassoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.tknes_nassoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$tknes_nassoPayload>
        }
        aggregate: {
          args: Prisma.Tknes_nassoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTknes_nasso>
        }
        groupBy: {
          args: Prisma.tknes_nassoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tknes_nassoGroupByOutputType>[]
        }
        count: {
          args: Prisma.tknes_nassoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Tknes_nassoCountAggregateOutputType> | number
        }
      }
    }
    uza_answers: {
      payload: Prisma.$uza_answersPayload<ExtArgs>
      fields: Prisma.uza_answersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.uza_answersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.uza_answersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        findFirst: {
          args: Prisma.uza_answersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.uza_answersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        findMany: {
          args: Prisma.uza_answersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>[]
        }
        create: {
          args: Prisma.uza_answersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        createMany: {
          args: Prisma.uza_answersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.uza_answersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        update: {
          args: Prisma.uza_answersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        deleteMany: {
          args: Prisma.uza_answersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.uza_answersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.uza_answersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_answersPayload>
        }
        aggregate: {
          args: Prisma.Uza_answersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUza_answers>
        }
        groupBy: {
          args: Prisma.uza_answersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Uza_answersGroupByOutputType>[]
        }
        count: {
          args: Prisma.uza_answersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Uza_answersCountAggregateOutputType> | number
        }
      }
    }
    uza_status: {
      payload: Prisma.$uza_statusPayload<ExtArgs>
      fields: Prisma.uza_statusFieldRefs
      operations: {
        findUnique: {
          args: Prisma.uza_statusFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.uza_statusFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        findFirst: {
          args: Prisma.uza_statusFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.uza_statusFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        findMany: {
          args: Prisma.uza_statusFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>[]
        }
        create: {
          args: Prisma.uza_statusCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        createMany: {
          args: Prisma.uza_statusCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.uza_statusDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        update: {
          args: Prisma.uza_statusUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        deleteMany: {
          args: Prisma.uza_statusDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.uza_statusUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.uza_statusUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$uza_statusPayload>
        }
        aggregate: {
          args: Prisma.Uza_statusAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUza_status>
        }
        groupBy: {
          args: Prisma.uza_statusGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Uza_statusGroupByOutputType>[]
        }
        count: {
          args: Prisma.uza_statusCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Uza_statusCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const Ads_checkScalarFieldEnum = {
  ads_ID: 'ads_ID',
  ads_user: 'ads_user',
  ads_photo_id: 'ads_photo_id'
} as const

export type Ads_checkScalarFieldEnum = (typeof Ads_checkScalarFieldEnum)[keyof typeof Ads_checkScalarFieldEnum]


export const Ch_tableScalarFieldEnum = {
  c_ID: 'c_ID',
  c_name: 'c_name',
  c_amount: 'c_amount',
  c_date: 'c_date',
  c_week: 'c_week',
  c_year: 'c_year',
  c_status: 'c_status'
} as const

export type Ch_tableScalarFieldEnum = (typeof Ch_tableScalarFieldEnum)[keyof typeof Ch_tableScalarFieldEnum]


export const Cus_linkScalarFieldEnum = {
  ln_ID: 'ln_ID',
  help_link: 'help_link',
  g_link: 'g_link',
  dash_link: 'dash_link'
} as const

export type Cus_linkScalarFieldEnum = (typeof Cus_linkScalarFieldEnum)[keyof typeof Cus_linkScalarFieldEnum]


export const Login_notiScalarFieldEnum = {
  noti_ID: 'noti_ID',
  noti_txt: 'noti_txt'
} as const

export type Login_notiScalarFieldEnum = (typeof Login_notiScalarFieldEnum)[keyof typeof Login_notiScalarFieldEnum]


export const Nasso_accountsScalarFieldEnum = {
  ac_Id: 'ac_Id',
  ac_usr: 'ac_usr',
  ac_bonus: 'ac_bonus',
  ac_profit: 'ac_profit',
  ac_withdraw: 'ac_withdraw',
  ac_spin: 'ac_spin',
  ac_video: 'ac_video',
  ac_trivia: 'ac_trivia',
  ac_status: 'ac_status',
  ac_balance: 'ac_balance',
  ac_expense: 'ac_expense',
  ac_media: 'ac_media',
  ac_mshahara: 'ac_mshahara',
  paid_month: 'paid_month',
  ac_ads: 'ac_ads',
  task_balance: 'task_balance',
  task_withdraw: 'task_withdraw',
  aff_balance: 'aff_balance'
} as const

export type Nasso_accountsScalarFieldEnum = (typeof Nasso_accountsScalarFieldEnum)[keyof typeof Nasso_accountsScalarFieldEnum]


export const Nasso_answerScalarFieldEnum = {
  ans_Id: 'ans_Id',
  qns_ID: 'qns_ID',
  answer: 'answer',
  ans_correct: 'ans_correct',
  ans_uza: 'ans_uza'
} as const

export type Nasso_answerScalarFieldEnum = (typeof Nasso_answerScalarFieldEnum)[keyof typeof Nasso_answerScalarFieldEnum]


export const Nasso_logsScalarFieldEnum = {
  log_Id: 'log_Id',
  log_amount: 'log_amount',
  log_op: 'log_op',
  log_date: 'log_date',
  log_usr: 'log_usr'
} as const

export type Nasso_logsScalarFieldEnum = (typeof Nasso_logsScalarFieldEnum)[keyof typeof Nasso_logsScalarFieldEnum]


export const Nasso_payScalarFieldEnum = {
  py_Id: 'py_Id',
  py_usr: 'py_usr',
  py_phone: 'py_phone',
  py_email: 'py_email',
  py_type: 'py_type',
  py_amount: 'py_amount',
  py_status: 'py_status',
  py_admin: 'py_admin',
  req_date: 'req_date',
  pay_date: 'pay_date',
  amnt_receive: 'amnt_receive',
  amnt_fee: 'amnt_fee'
} as const

export type Nasso_payScalarFieldEnum = (typeof Nasso_payScalarFieldEnum)[keyof typeof Nasso_payScalarFieldEnum]


export const Nasso_qnsScalarFieldEnum = {
  qns_Id: 'qns_Id',
  qns_name: 'qns_name',
  quiz_Id: 'quiz_Id'
} as const

export type Nasso_qnsScalarFieldEnum = (typeof Nasso_qnsScalarFieldEnum)[keyof typeof Nasso_qnsScalarFieldEnum]


export const Nasso_quizScalarFieldEnum = {
  qz_Id: 'qz_Id',
  qz_name: 'qz_name',
  qzop: 'qzop',
  del_date: 'del_date'
} as const

export type Nasso_quizScalarFieldEnum = (typeof Nasso_quizScalarFieldEnum)[keyof typeof Nasso_quizScalarFieldEnum]


export const Nasso_usersScalarFieldEnum = {
  usr_Id: 'usr_Id',
  usr_uname: 'usr_uname',
  usr_posio: 'usr_posio',
  usr_status: 'usr_status',
  usr_code: 'usr_code',
  usr_passwd: 'usr_passwd',
  usr_email: 'usr_email',
  usr_phone: 'usr_phone',
  usr_county: 'usr_county',
  usr_photo: 'usr_photo',
  join_date: 'join_date',
  full_name: 'full_name'
} as const

export type Nasso_usersScalarFieldEnum = (typeof Nasso_usersScalarFieldEnum)[keyof typeof Nasso_usersScalarFieldEnum]


export const NotifiersScalarFieldEnum = {
  notify_Id: 'notify_Id',
  notify_token: 'notify_token',
  token_username: 'token_username'
} as const

export type NotifiersScalarFieldEnum = (typeof NotifiersScalarFieldEnum)[keyof typeof NotifiersScalarFieldEnum]


export const Pro_photoScalarFieldEnum = {
  p_ID: 'p_ID',
  pro_ID: 'pro_ID',
  p_path: 'p_path',
  user_Id: 'user_Id'
} as const

export type Pro_photoScalarFieldEnum = (typeof Pro_photoScalarFieldEnum)[keyof typeof Pro_photoScalarFieldEnum]


export const ReferalScalarFieldEnum = {
  ref_Id: 'ref_Id',
  userID: 'userID',
  user_ref_Id: 'user_ref_Id',
  pay_status: 'pay_status',
  r_week: 'r_week',
  r_year: 'r_year',
  r_date: 'r_date',
  r_month: 'r_month'
} as const

export type ReferalScalarFieldEnum = (typeof ReferalScalarFieldEnum)[keyof typeof ReferalScalarFieldEnum]


export const Salary_payScalarFieldEnum = {
  s_ID: 's_ID',
  s_name: 's_name',
  s_amount: 's_amount',
  s_date: 's_date',
  s_month: 's_month',
  s_year: 's_year',
  s_status: 's_status'
} as const

export type Salary_payScalarFieldEnum = (typeof Salary_payScalarFieldEnum)[keyof typeof Salary_payScalarFieldEnum]


export const Tbl_cashesScalarFieldEnum = {
  c_Id: 'c_Id',
  c_type: 'c_type',
  data_ID: 'data_ID',
  c_amount: 'c_amount',
  c_uza: 'c_uza',
  c_status: 'c_status'
} as const

export type Tbl_cashesScalarFieldEnum = (typeof Tbl_cashesScalarFieldEnum)[keyof typeof Tbl_cashesScalarFieldEnum]


export const Tbl_categoryScalarFieldEnum = {
  ct_ID: 'ct_ID',
  ct_name: 'ct_name'
} as const

export type Tbl_categoryScalarFieldEnum = (typeof Tbl_categoryScalarFieldEnum)[keyof typeof Tbl_categoryScalarFieldEnum]


export const Tbl_exchangeScalarFieldEnum = {
  ex_ID: 'ex_ID',
  ex_rate: 'ex_rate'
} as const

export type Tbl_exchangeScalarFieldEnum = (typeof Tbl_exchangeScalarFieldEnum)[keyof typeof Tbl_exchangeScalarFieldEnum]


export const Tbl_gamesScalarFieldEnum = {
  g_ID: 'g_ID',
  g_games: 'g_games'
} as const

export type Tbl_gamesScalarFieldEnum = (typeof Tbl_gamesScalarFieldEnum)[keyof typeof Tbl_gamesScalarFieldEnum]


export const Tbl_jifunzeScalarFieldEnum = {
  j_Id: 'j_Id',
  j_vaudio: 'j_vaudio'
} as const

export type Tbl_jifunzeScalarFieldEnum = (typeof Tbl_jifunzeScalarFieldEnum)[keyof typeof Tbl_jifunzeScalarFieldEnum]


export const Tbl_karibuScalarFieldEnum = {
  v_ID: 'v_ID',
  v_link: 'v_link'
} as const

export type Tbl_karibuScalarFieldEnum = (typeof Tbl_karibuScalarFieldEnum)[keyof typeof Tbl_karibuScalarFieldEnum]


export const Tbl_loanScalarFieldEnum = {
  ln_ID: 'ln_ID',
  ln_user: 'ln_user',
  ln_amount: 'ln_amount',
  ln_date: 'ln_date',
  ln_status: 'ln_status'
} as const

export type Tbl_loanScalarFieldEnum = (typeof Tbl_loanScalarFieldEnum)[keyof typeof Tbl_loanScalarFieldEnum]


export const Tbl_notifyScalarFieldEnum = {
  nt_ID: 'nt_ID',
  nt_txt: 'nt_txt'
} as const

export type Tbl_notifyScalarFieldEnum = (typeof Tbl_notifyScalarFieldEnum)[keyof typeof Tbl_notifyScalarFieldEnum]


export const Tbl_paymentsScalarFieldEnum = {
  pay_ID: 'pay_ID',
  pay_user: 'pay_user',
  pay_amount: 'pay_amount',
  pay_phone: 'pay_phone',
  pay_email: 'pay_email',
  pay_refID: 'pay_refID',
  pay_token: 'pay_token',
  pay_date: 'pay_date',
  pay_url: 'pay_url',
  pay_order_Id: 'pay_order_Id',
  pay_method: 'pay_method',
  paid_ref: 'paid_ref',
  paid_transId: 'paid_transId',
  paid_date: 'paid_date',
  pay_status: 'pay_status',
  pay_today: 'pay_today',
  pay_types: 'pay_types',
  sh_usr_ID: 'sh_usr_ID',
  sh_pro_Id: 'sh_pro_Id'
} as const

export type Tbl_paymentsScalarFieldEnum = (typeof Tbl_paymentsScalarFieldEnum)[keyof typeof Tbl_paymentsScalarFieldEnum]


export const Tbl_paymethodScalarFieldEnum = {
  md_ID: 'md_ID',
  md_country: 'md_country',
  md_methods: 'md_methods'
} as const

export type Tbl_paymethodScalarFieldEnum = (typeof Tbl_paymethodScalarFieldEnum)[keyof typeof Tbl_paymethodScalarFieldEnum]


export const Tbl_productsScalarFieldEnum = {
  pro_ID: 'pro_ID',
  pro_name: 'pro_name',
  pro_seller: 'pro_seller',
  pro_location: 'pro_location',
  pro_date: 'pro_date',
  pro_price: 'pro_price',
  pro_category: 'pro_category',
  pro_pay_method: 'pro_pay_method',
  pro_status: 'pro_status',
  pro_country: 'pro_country',
  pro_des: 'pro_des',
  seller_nm: 'seller_nm',
  sel_comisio: 'sel_comisio'
} as const

export type Tbl_productsScalarFieldEnum = (typeof Tbl_productsScalarFieldEnum)[keyof typeof Tbl_productsScalarFieldEnum]


export const Tbl_ratesScalarFieldEnum = {
  rt_Id: 'rt_Id',
  rt_country: 'rt_country',
  rt_rate: 'rt_rate',
  rt_symbol: 'rt_symbol'
} as const

export type Tbl_ratesScalarFieldEnum = (typeof Tbl_ratesScalarFieldEnum)[keyof typeof Tbl_ratesScalarFieldEnum]


export const Tbl_sellerScalarFieldEnum = {
  seller_ID: 'seller_ID',
  seller_name: 'seller_name'
} as const

export type Tbl_sellerScalarFieldEnum = (typeof Tbl_sellerScalarFieldEnum)[keyof typeof Tbl_sellerScalarFieldEnum]


export const Tbl_sh_ordersScalarFieldEnum = {
  o_ID: 'o_ID',
  o_pro_Id: 'o_pro_Id',
  order_ID: 'order_ID',
  o_user: 'o_user',
  o_date: 'o_date',
  oda_status: 'oda_status',
  o_idadi: 'o_idadi',
  o_datetimes: 'o_datetimes',
  o_delivery: 'o_delivery'
} as const

export type Tbl_sh_ordersScalarFieldEnum = (typeof Tbl_sh_ordersScalarFieldEnum)[keyof typeof Tbl_sh_ordersScalarFieldEnum]


export const Tbl_statusScalarFieldEnum = {
  st_Id: 'st_Id',
  st_link: 'st_link',
  st_del_date: 'st_del_date',
  money_go: 'money_go'
} as const

export type Tbl_statusScalarFieldEnum = (typeof Tbl_statusScalarFieldEnum)[keyof typeof Tbl_statusScalarFieldEnum]


export const Tbl_videoScalarFieldEnum = {
  v_Id: 'v_Id',
  v_link: 'v_link',
  v_del_date: 'v_del_date',
  v_op: 'v_op',
  v_type: 'v_type',
  v_duration: 'v_duration'
} as const

export type Tbl_videoScalarFieldEnum = (typeof Tbl_videoScalarFieldEnum)[keyof typeof Tbl_videoScalarFieldEnum]


export const Tbl_video_payScalarFieldEnum = {
  ID: 'ID',
  uza: 'uza',
  status: 'status'
} as const

export type Tbl_video_payScalarFieldEnum = (typeof Tbl_video_payScalarFieldEnum)[keyof typeof Tbl_video_payScalarFieldEnum]


export const Tknes_nassoScalarFieldEnum = {
  token_ID: 'token_ID',
  tk_nm_nasso: 'tk_nm_nasso',
  tk_rw_nasso: 'tk_rw_nasso'
} as const

export type Tknes_nassoScalarFieldEnum = (typeof Tknes_nassoScalarFieldEnum)[keyof typeof Tknes_nassoScalarFieldEnum]


export const Uza_answersScalarFieldEnum = {
  a_ID: 'a_ID',
  uza_ID: 'uza_ID',
  qns_ID: 'qns_ID',
  ans_ID: 'ans_ID',
  a_status: 'a_status',
  uza_paid: 'uza_paid'
} as const

export type Uza_answersScalarFieldEnum = (typeof Uza_answersScalarFieldEnum)[keyof typeof Uza_answersScalarFieldEnum]


export const Uza_statusScalarFieldEnum = {
  status_ID: 'status_ID',
  status_uza: 'status_uza',
  status_data_Id: 'status_data_Id',
  status_link: 'status_link'
} as const

export type Uza_statusScalarFieldEnum = (typeof Uza_statusScalarFieldEnum)[keyof typeof Uza_statusScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const ads_checkOrderByRelevanceFieldEnum = {
  ads_user: 'ads_user'
} as const

export type ads_checkOrderByRelevanceFieldEnum = (typeof ads_checkOrderByRelevanceFieldEnum)[keyof typeof ads_checkOrderByRelevanceFieldEnum]


export const ch_tableOrderByRelevanceFieldEnum = {
  c_name: 'c_name',
  c_date: 'c_date',
  c_week: 'c_week',
  c_status: 'c_status'
} as const

export type ch_tableOrderByRelevanceFieldEnum = (typeof ch_tableOrderByRelevanceFieldEnum)[keyof typeof ch_tableOrderByRelevanceFieldEnum]


export const cus_linkOrderByRelevanceFieldEnum = {
  help_link: 'help_link',
  g_link: 'g_link',
  dash_link: 'dash_link'
} as const

export type cus_linkOrderByRelevanceFieldEnum = (typeof cus_linkOrderByRelevanceFieldEnum)[keyof typeof cus_linkOrderByRelevanceFieldEnum]


export const login_notiOrderByRelevanceFieldEnum = {
  noti_txt: 'noti_txt'
} as const

export type login_notiOrderByRelevanceFieldEnum = (typeof login_notiOrderByRelevanceFieldEnum)[keyof typeof login_notiOrderByRelevanceFieldEnum]


export const nasso_accountsOrderByRelevanceFieldEnum = {
  ac_usr: 'ac_usr',
  paid_month: 'paid_month'
} as const

export type nasso_accountsOrderByRelevanceFieldEnum = (typeof nasso_accountsOrderByRelevanceFieldEnum)[keyof typeof nasso_accountsOrderByRelevanceFieldEnum]


export const nasso_answerOrderByRelevanceFieldEnum = {
  answer: 'answer',
  ans_correct: 'ans_correct'
} as const

export type nasso_answerOrderByRelevanceFieldEnum = (typeof nasso_answerOrderByRelevanceFieldEnum)[keyof typeof nasso_answerOrderByRelevanceFieldEnum]


export const nasso_logsOrderByRelevanceFieldEnum = {
  log_op: 'log_op',
  log_date: 'log_date',
  log_usr: 'log_usr'
} as const

export type nasso_logsOrderByRelevanceFieldEnum = (typeof nasso_logsOrderByRelevanceFieldEnum)[keyof typeof nasso_logsOrderByRelevanceFieldEnum]


export const nasso_payOrderByRelevanceFieldEnum = {
  py_usr: 'py_usr',
  py_phone: 'py_phone',
  py_email: 'py_email',
  py_type: 'py_type',
  py_status: 'py_status',
  py_admin: 'py_admin',
  req_date: 'req_date',
  pay_date: 'pay_date'
} as const

export type nasso_payOrderByRelevanceFieldEnum = (typeof nasso_payOrderByRelevanceFieldEnum)[keyof typeof nasso_payOrderByRelevanceFieldEnum]


export const nasso_qnsOrderByRelevanceFieldEnum = {
  qns_name: 'qns_name'
} as const

export type nasso_qnsOrderByRelevanceFieldEnum = (typeof nasso_qnsOrderByRelevanceFieldEnum)[keyof typeof nasso_qnsOrderByRelevanceFieldEnum]


export const nasso_quizOrderByRelevanceFieldEnum = {
  qz_name: 'qz_name',
  qzop: 'qzop',
  del_date: 'del_date'
} as const

export type nasso_quizOrderByRelevanceFieldEnum = (typeof nasso_quizOrderByRelevanceFieldEnum)[keyof typeof nasso_quizOrderByRelevanceFieldEnum]


export const nasso_usersOrderByRelevanceFieldEnum = {
  usr_uname: 'usr_uname',
  usr_posio: 'usr_posio',
  usr_status: 'usr_status',
  usr_code: 'usr_code',
  usr_passwd: 'usr_passwd',
  usr_email: 'usr_email',
  usr_phone: 'usr_phone',
  usr_county: 'usr_county',
  usr_photo: 'usr_photo',
  join_date: 'join_date',
  full_name: 'full_name'
} as const

export type nasso_usersOrderByRelevanceFieldEnum = (typeof nasso_usersOrderByRelevanceFieldEnum)[keyof typeof nasso_usersOrderByRelevanceFieldEnum]


export const notifiersOrderByRelevanceFieldEnum = {
  notify_token: 'notify_token',
  token_username: 'token_username'
} as const

export type notifiersOrderByRelevanceFieldEnum = (typeof notifiersOrderByRelevanceFieldEnum)[keyof typeof notifiersOrderByRelevanceFieldEnum]


export const pro_photoOrderByRelevanceFieldEnum = {
  p_path: 'p_path'
} as const

export type pro_photoOrderByRelevanceFieldEnum = (typeof pro_photoOrderByRelevanceFieldEnum)[keyof typeof pro_photoOrderByRelevanceFieldEnum]


export const referalOrderByRelevanceFieldEnum = {
  userID: 'userID',
  user_ref_Id: 'user_ref_Id',
  pay_status: 'pay_status',
  r_week: 'r_week',
  r_date: 'r_date',
  r_month: 'r_month'
} as const

export type referalOrderByRelevanceFieldEnum = (typeof referalOrderByRelevanceFieldEnum)[keyof typeof referalOrderByRelevanceFieldEnum]


export const salary_payOrderByRelevanceFieldEnum = {
  s_name: 's_name',
  s_date: 's_date',
  s_month: 's_month',
  s_year: 's_year',
  s_status: 's_status'
} as const

export type salary_payOrderByRelevanceFieldEnum = (typeof salary_payOrderByRelevanceFieldEnum)[keyof typeof salary_payOrderByRelevanceFieldEnum]


export const tbl_cashesOrderByRelevanceFieldEnum = {
  c_type: 'c_type',
  c_uza: 'c_uza',
  c_status: 'c_status'
} as const

export type tbl_cashesOrderByRelevanceFieldEnum = (typeof tbl_cashesOrderByRelevanceFieldEnum)[keyof typeof tbl_cashesOrderByRelevanceFieldEnum]


export const tbl_categoryOrderByRelevanceFieldEnum = {
  ct_name: 'ct_name'
} as const

export type tbl_categoryOrderByRelevanceFieldEnum = (typeof tbl_categoryOrderByRelevanceFieldEnum)[keyof typeof tbl_categoryOrderByRelevanceFieldEnum]


export const tbl_gamesOrderByRelevanceFieldEnum = {
  g_games: 'g_games'
} as const

export type tbl_gamesOrderByRelevanceFieldEnum = (typeof tbl_gamesOrderByRelevanceFieldEnum)[keyof typeof tbl_gamesOrderByRelevanceFieldEnum]


export const tbl_jifunzeOrderByRelevanceFieldEnum = {
  j_vaudio: 'j_vaudio'
} as const

export type tbl_jifunzeOrderByRelevanceFieldEnum = (typeof tbl_jifunzeOrderByRelevanceFieldEnum)[keyof typeof tbl_jifunzeOrderByRelevanceFieldEnum]


export const tbl_karibuOrderByRelevanceFieldEnum = {
  v_link: 'v_link'
} as const

export type tbl_karibuOrderByRelevanceFieldEnum = (typeof tbl_karibuOrderByRelevanceFieldEnum)[keyof typeof tbl_karibuOrderByRelevanceFieldEnum]


export const tbl_loanOrderByRelevanceFieldEnum = {
  ln_user: 'ln_user',
  ln_date: 'ln_date',
  ln_status: 'ln_status'
} as const

export type tbl_loanOrderByRelevanceFieldEnum = (typeof tbl_loanOrderByRelevanceFieldEnum)[keyof typeof tbl_loanOrderByRelevanceFieldEnum]


export const tbl_notifyOrderByRelevanceFieldEnum = {
  nt_txt: 'nt_txt'
} as const

export type tbl_notifyOrderByRelevanceFieldEnum = (typeof tbl_notifyOrderByRelevanceFieldEnum)[keyof typeof tbl_notifyOrderByRelevanceFieldEnum]


export const tbl_paymentsOrderByRelevanceFieldEnum = {
  pay_user: 'pay_user',
  pay_phone: 'pay_phone',
  pay_email: 'pay_email',
  pay_refID: 'pay_refID',
  pay_token: 'pay_token',
  pay_date: 'pay_date',
  pay_url: 'pay_url',
  pay_order_Id: 'pay_order_Id',
  pay_method: 'pay_method',
  paid_ref: 'paid_ref',
  paid_transId: 'paid_transId',
  paid_date: 'paid_date',
  pay_status: 'pay_status',
  pay_today: 'pay_today',
  pay_types: 'pay_types'
} as const

export type tbl_paymentsOrderByRelevanceFieldEnum = (typeof tbl_paymentsOrderByRelevanceFieldEnum)[keyof typeof tbl_paymentsOrderByRelevanceFieldEnum]


export const tbl_paymethodOrderByRelevanceFieldEnum = {
  md_country: 'md_country',
  md_methods: 'md_methods'
} as const

export type tbl_paymethodOrderByRelevanceFieldEnum = (typeof tbl_paymethodOrderByRelevanceFieldEnum)[keyof typeof tbl_paymethodOrderByRelevanceFieldEnum]


export const tbl_productsOrderByRelevanceFieldEnum = {
  pro_name: 'pro_name',
  pro_seller: 'pro_seller',
  pro_location: 'pro_location',
  pro_date: 'pro_date',
  pro_category: 'pro_category',
  pro_pay_method: 'pro_pay_method',
  pro_status: 'pro_status',
  pro_country: 'pro_country',
  pro_des: 'pro_des'
} as const

export type tbl_productsOrderByRelevanceFieldEnum = (typeof tbl_productsOrderByRelevanceFieldEnum)[keyof typeof tbl_productsOrderByRelevanceFieldEnum]


export const tbl_ratesOrderByRelevanceFieldEnum = {
  rt_country: 'rt_country',
  rt_symbol: 'rt_symbol'
} as const

export type tbl_ratesOrderByRelevanceFieldEnum = (typeof tbl_ratesOrderByRelevanceFieldEnum)[keyof typeof tbl_ratesOrderByRelevanceFieldEnum]


export const tbl_sellerOrderByRelevanceFieldEnum = {
  seller_name: 'seller_name'
} as const

export type tbl_sellerOrderByRelevanceFieldEnum = (typeof tbl_sellerOrderByRelevanceFieldEnum)[keyof typeof tbl_sellerOrderByRelevanceFieldEnum]


export const tbl_sh_ordersOrderByRelevanceFieldEnum = {
  order_ID: 'order_ID',
  o_date: 'o_date',
  oda_status: 'oda_status',
  o_datetimes: 'o_datetimes',
  o_delivery: 'o_delivery'
} as const

export type tbl_sh_ordersOrderByRelevanceFieldEnum = (typeof tbl_sh_ordersOrderByRelevanceFieldEnum)[keyof typeof tbl_sh_ordersOrderByRelevanceFieldEnum]


export const tbl_statusOrderByRelevanceFieldEnum = {
  st_link: 'st_link',
  st_del_date: 'st_del_date',
  money_go: 'money_go'
} as const

export type tbl_statusOrderByRelevanceFieldEnum = (typeof tbl_statusOrderByRelevanceFieldEnum)[keyof typeof tbl_statusOrderByRelevanceFieldEnum]


export const tbl_videoOrderByRelevanceFieldEnum = {
  v_link: 'v_link',
  v_del_date: 'v_del_date',
  v_op: 'v_op',
  v_type: 'v_type'
} as const

export type tbl_videoOrderByRelevanceFieldEnum = (typeof tbl_videoOrderByRelevanceFieldEnum)[keyof typeof tbl_videoOrderByRelevanceFieldEnum]


export const tbl_video_payOrderByRelevanceFieldEnum = {
  uza: 'uza',
  status: 'status'
} as const

export type tbl_video_payOrderByRelevanceFieldEnum = (typeof tbl_video_payOrderByRelevanceFieldEnum)[keyof typeof tbl_video_payOrderByRelevanceFieldEnum]


export const tknes_nassoOrderByRelevanceFieldEnum = {
  tk_nm_nasso: 'tk_nm_nasso',
  tk_rw_nasso: 'tk_rw_nasso'
} as const

export type tknes_nassoOrderByRelevanceFieldEnum = (typeof tknes_nassoOrderByRelevanceFieldEnum)[keyof typeof tknes_nassoOrderByRelevanceFieldEnum]


export const uza_answersOrderByRelevanceFieldEnum = {
  uza_ID: 'uza_ID',
  ans_ID: 'ans_ID',
  a_status: 'a_status',
  uza_paid: 'uza_paid'
} as const

export type uza_answersOrderByRelevanceFieldEnum = (typeof uza_answersOrderByRelevanceFieldEnum)[keyof typeof uza_answersOrderByRelevanceFieldEnum]


export const uza_statusOrderByRelevanceFieldEnum = {
  status_uza: 'status_uza',
  status_link: 'status_link'
} as const

export type uza_statusOrderByRelevanceFieldEnum = (typeof uza_statusOrderByRelevanceFieldEnum)[keyof typeof uza_statusOrderByRelevanceFieldEnum]



/**
 * Field references
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  ads_check?: Prisma.ads_checkOmit
  ch_table?: Prisma.ch_tableOmit
  cus_link?: Prisma.cus_linkOmit
  login_noti?: Prisma.login_notiOmit
  nasso_accounts?: Prisma.nasso_accountsOmit
  nasso_answer?: Prisma.nasso_answerOmit
  nasso_logs?: Prisma.nasso_logsOmit
  nasso_pay?: Prisma.nasso_payOmit
  nasso_qns?: Prisma.nasso_qnsOmit
  nasso_quiz?: Prisma.nasso_quizOmit
  nasso_users?: Prisma.nasso_usersOmit
  notifiers?: Prisma.notifiersOmit
  pro_photo?: Prisma.pro_photoOmit
  referal?: Prisma.referalOmit
  salary_pay?: Prisma.salary_payOmit
  tbl_cashes?: Prisma.tbl_cashesOmit
  tbl_category?: Prisma.tbl_categoryOmit
  tbl_exchange?: Prisma.tbl_exchangeOmit
  tbl_games?: Prisma.tbl_gamesOmit
  tbl_jifunze?: Prisma.tbl_jifunzeOmit
  tbl_karibu?: Prisma.tbl_karibuOmit
  tbl_loan?: Prisma.tbl_loanOmit
  tbl_notify?: Prisma.tbl_notifyOmit
  tbl_payments?: Prisma.tbl_paymentsOmit
  tbl_paymethod?: Prisma.tbl_paymethodOmit
  tbl_products?: Prisma.tbl_productsOmit
  tbl_rates?: Prisma.tbl_ratesOmit
  tbl_seller?: Prisma.tbl_sellerOmit
  tbl_sh_orders?: Prisma.tbl_sh_ordersOmit
  tbl_status?: Prisma.tbl_statusOmit
  tbl_video?: Prisma.tbl_videoOmit
  tbl_video_pay?: Prisma.tbl_video_payOmit
  tknes_nasso?: Prisma.tknes_nassoOmit
  uza_answers?: Prisma.uza_answersOmit
  uza_status?: Prisma.uza_statusOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

